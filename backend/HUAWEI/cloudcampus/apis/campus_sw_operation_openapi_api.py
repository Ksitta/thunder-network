# coding: utf-8

"""
    框式交换机板卡信息操作

    框式上云相关操作接口： 场景：对框式交换机信息查询操作的第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class CampusSWOperationOpenapiApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def get_fan_info(self, id, frame_no, **kwargs):
        """
        查询设备风扇信息
        ## 典型场景 ##   查询设备风扇信息，支持堆叠设备风扇查询。 ## 接口功能 ##   查询设备风扇信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fan_info(id, frame_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: 设备ID，UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :return: GetFanInfoOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fan_info_with_http_info(id, frame_no, **kwargs)
        else:
            (data) = self.get_fan_info_with_http_info(id, frame_no, **kwargs)
            return data

    def get_fan_info_with_http_info(self, id, frame_no, **kwargs):
        """
        查询设备风扇信息
        ## 典型场景 ##   查询设备风扇信息，支持堆叠设备风扇查询。 ## 接口功能 ##   查询设备风扇信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fan_info_with_http_info(id, frame_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: 设备ID，UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :return: GetFanInfoOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'frame_no']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fan_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_fan_info`")
        # verify the required parameter 'frame_no' is set
        if ('frame_no' not in params) or (params['frame_no'] is None):
            raise ValueError("Missing the required parameter `frame_no` when calling `get_fan_info`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'frame_no' in params:
            path_params['frameNo'] = params['frame_no']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/faninfo/devices/{id}/frame/{frameNo}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetFanInfoOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_power_info(self, id, frame_no, **kwargs):
        """
        查询设备电源信息
        ## 典型场景 ##   查询设备电源信息，支持查询堆叠设备的电源信息。 ## 接口功能 ##   查询设备电源信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_power_info(id, frame_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: 设备ID，UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :return: GetPowerInfoOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_power_info_with_http_info(id, frame_no, **kwargs)
        else:
            (data) = self.get_power_info_with_http_info(id, frame_no, **kwargs)
            return data

    def get_power_info_with_http_info(self, id, frame_no, **kwargs):
        """
        查询设备电源信息
        ## 典型场景 ##   查询设备电源信息，支持查询堆叠设备的电源信息。 ## 接口功能 ##   查询设备电源信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_power_info_with_http_info(id, frame_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: 设备ID，UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :return: GetPowerInfoOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'frame_no']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_power_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_power_info`")
        # verify the required parameter 'frame_no' is set
        if ('frame_no' not in params) or (params['frame_no'] is None):
            raise ValueError("Missing the required parameter `frame_no` when calling `get_power_info`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'frame_no' in params:
            path_params['frameNo'] = params['frame_no']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/powerinfo/devices/{id}/frame/{frameNo}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetPowerInfoOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_reset_reason(self, id, frame_no, board_name, **kwargs):
        """
        查询指定单板复位原因
        ## 典型场景 ##   查询指定单板复位原因。 ## 接口功能 ##   查询指定单板复位原因。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_reset_reason(id, frame_no, board_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: 设备ID，UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :param str board_name: 槽位名称。 (required)
        :return: GetResetReasonOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_reset_reason_with_http_info(id, frame_no, board_name, **kwargs)
        else:
            (data) = self.get_reset_reason_with_http_info(id, frame_no, board_name, **kwargs)
            return data

    def get_reset_reason_with_http_info(self, id, frame_no, board_name, **kwargs):
        """
        查询指定单板复位原因
        ## 典型场景 ##   查询指定单板复位原因。 ## 接口功能 ##   查询指定单板复位原因。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_reset_reason_with_http_info(id, frame_no, board_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: 设备ID，UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :param str board_name: 槽位名称。 (required)
        :return: GetResetReasonOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'frame_no', 'board_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reset_reason" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_reset_reason`")
        # verify the required parameter 'frame_no' is set
        if ('frame_no' not in params) or (params['frame_no'] is None):
            raise ValueError("Missing the required parameter `frame_no` when calling `get_reset_reason`")
        # verify the required parameter 'board_name' is set
        if ('board_name' not in params) or (params['board_name'] is None):
            raise ValueError("Missing the required parameter `board_name` when calling `get_reset_reason`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'frame_no' in params:
            path_params['frameNo'] = params['frame_no']
        if 'board_name' in params:
            path_params['boardName'] = params['board_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/resetreason/devices/{id}/frame/{frameNo}/board/{boardName}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetResetReasonOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_system_power_info(self, id, frame_no, **kwargs):
        """
        查询设备系统电源信息
        ## 典型场景 ##   查询设备系统电源信息，支持查询堆叠设备的系统电源信息。 ## 接口功能 ##   查询设备系统电源信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_system_power_info(id, frame_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: 设备ID，UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :return: GetSystemPowerInfoOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_system_power_info_with_http_info(id, frame_no, **kwargs)
        else:
            (data) = self.get_system_power_info_with_http_info(id, frame_no, **kwargs)
            return data

    def get_system_power_info_with_http_info(self, id, frame_no, **kwargs):
        """
        查询设备系统电源信息
        ## 典型场景 ##   查询设备系统电源信息，支持查询堆叠设备的系统电源信息。 ## 接口功能 ##   查询设备系统电源信息。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_system_power_info_with_http_info(id, frame_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: 设备ID，UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :return: GetSystemPowerInfoOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'frame_no']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_power_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_system_power_info`")
        # verify the required parameter 'frame_no' is set
        if ('frame_no' not in params) or (params['frame_no'] is None):
            raise ValueError("Missing the required parameter `frame_no` when calling `get_system_power_info`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'frame_no' in params:
            path_params['frameNo'] = params['frame_no']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/systempowerinfo/devices/{id}/frame/{frameNo}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetSystemPowerInfoOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def power_supply(self, request, **kwargs):
        """
        配置单板上下电
        ## 典型场景 ##   根据设备ID和单板名称，给指定单板上下电。 ## 接口功能 ##   配置单板上下电。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.power_supply(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PowerSupplyDto request: 请求参数。 (required)
        :return: PowerSupplyOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.power_supply_with_http_info(request, **kwargs)
        else:
            (data) = self.power_supply_with_http_info(request, **kwargs)
            return data

    def power_supply_with_http_info(self, request, **kwargs):
        """
        配置单板上下电
        ## 典型场景 ##   根据设备ID和单板名称，给指定单板上下电。 ## 接口功能 ##   配置单板上下电。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.power_supply_with_http_info(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PowerSupplyDto request: 请求参数。 (required)
        :return: PowerSupplyOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method power_supply" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `power_supply`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/powersupply', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PowerSupplyOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_all_boards(self, device_id, frame_no, **kwargs):
        """
        查询插卡框式交换机单板信息
        ## 典型场景 ##    提供查询框式交换机单板信息接口。 ## 接口功能 ##    基于单板维度查询框式交换机单板信息。 ## 接口约束 ##    该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_all_boards(device_id, frame_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID或堆叠ID，UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :return: BoardsInfoOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_all_boards_with_http_info(device_id, frame_no, **kwargs)
        else:
            (data) = self.query_all_boards_with_http_info(device_id, frame_no, **kwargs)
            return data

    def query_all_boards_with_http_info(self, device_id, frame_no, **kwargs):
        """
        查询插卡框式交换机单板信息
        ## 典型场景 ##    提供查询框式交换机单板信息接口。 ## 接口功能 ##    基于单板维度查询框式交换机单板信息。 ## 接口约束 ##    该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_all_boards_with_http_info(device_id, frame_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID或堆叠ID，UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :return: BoardsInfoOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'frame_no']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_all_boards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `query_all_boards`")
        # verify the required parameter 'frame_no' is set
        if ('frame_no' not in params) or (params['frame_no'] is None):
            raise ValueError("Missing the required parameter `frame_no` when calling `query_all_boards`")


        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']
        if 'frame_no' in params:
            path_params['frameNo'] = params['frame_no']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/boards/devices/{deviceId}/frame/{frameNo}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BoardsInfoOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_interface_detail(self, device_id, frame_no, slot_no, **kwargs):
        """
        查询单板接口信息
        ## 典型场景 ##    根据设备ID和槽位号，查询单板接口信息。 ## 接口功能 ##    基于单板维度查询接口信息。 ## 接口约束 ##    该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_interface_detail(device_id, frame_no, slot_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID或堆叠ID， UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :param int slot_no: 单板索引号，槽位号。 (required)
        :return: InterfacesInfoOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_interface_detail_with_http_info(device_id, frame_no, slot_no, **kwargs)
        else:
            (data) = self.query_interface_detail_with_http_info(device_id, frame_no, slot_no, **kwargs)
            return data

    def query_interface_detail_with_http_info(self, device_id, frame_no, slot_no, **kwargs):
        """
        查询单板接口信息
        ## 典型场景 ##    根据设备ID和槽位号，查询单板接口信息。 ## 接口功能 ##    基于单板维度查询接口信息。 ## 接口约束 ##    该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_interface_detail_with_http_info(device_id, frame_no, slot_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID或堆叠ID， UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :param int slot_no: 单板索引号，槽位号。 (required)
        :return: InterfacesInfoOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'frame_no', 'slot_no']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_interface_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `query_interface_detail`")
        # verify the required parameter 'frame_no' is set
        if ('frame_no' not in params) or (params['frame_no'] is None):
            raise ValueError("Missing the required parameter `frame_no` when calling `query_interface_detail`")
        # verify the required parameter 'slot_no' is set
        if ('slot_no' not in params) or (params['slot_no'] is None):
            raise ValueError("Missing the required parameter `slot_no` when calling `query_interface_detail`")

        if 'slot_no' in params and params['slot_no'] > 64:
            raise ValueError("Invalid value for parameter `slot_no` when calling `query_interface_detail`, must be a value less than or equal to `64`")
        if 'slot_no' in params and params['slot_no'] < 0:
            raise ValueError("Invalid value for parameter `slot_no` when calling `query_interface_detail`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']
        if 'frame_no' in params:
            path_params['frameNo'] = params['frame_no']
        if 'slot_no' in params:
            path_params['slotNo'] = params['slot_no']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/interface/devices/{deviceId}/frame/{frameNo}/slot/{slotNo}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InterfacesInfoOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def reset_board(self, id, frame_no, board_name, **kwargs):
        """
        复位单板
        ## 典型场景 ##   根据设备ID和单板名称，复位指定单板。 ## 接口功能 ##   复位单板。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_board(id, frame_no, board_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: 设备ID，UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :param str board_name: 槽位名称。 (required)
        :return: ResetBoardOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.reset_board_with_http_info(id, frame_no, board_name, **kwargs)
        else:
            (data) = self.reset_board_with_http_info(id, frame_no, board_name, **kwargs)
            return data

    def reset_board_with_http_info(self, id, frame_no, board_name, **kwargs):
        """
        复位单板
        ## 典型场景 ##   根据设备ID和单板名称，复位指定单板。 ## 接口功能 ##   复位单板。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_board_with_http_info(id, frame_no, board_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: 设备ID，UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :param str board_name: 槽位名称。 (required)
        :return: ResetBoardOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'frame_no', 'board_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_board" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `reset_board`")
        # verify the required parameter 'frame_no' is set
        if ('frame_no' not in params) or (params['frame_no'] is None):
            raise ValueError("Missing the required parameter `frame_no` when calling `reset_board`")
        # verify the required parameter 'board_name' is set
        if ('board_name' not in params) or (params['board_name'] is None):
            raise ValueError("Missing the required parameter `board_name` when calling `reset_board`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'frame_no' in params:
            path_params['frameNo'] = params['frame_no']
        if 'board_name' in params:
            path_params['boardName'] = params['board_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/reset/devices/{id}/frame/{frameNo}/board/{boardName}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResetBoardOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def reset_chassis(self, device_id, frame_no, **kwargs):
        """
        框式交换机整框重启
        ## 典型场景 ##    框式交换机整框重启。 ## 接口功能 ##    框式整框重启。 ## 接口约束 ##    北向接口管理员可以访问。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_chassis(device_id, frame_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID或堆叠ID， UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :return: ResetChassisOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.reset_chassis_with_http_info(device_id, frame_no, **kwargs)
        else:
            (data) = self.reset_chassis_with_http_info(device_id, frame_no, **kwargs)
            return data

    def reset_chassis_with_http_info(self, device_id, frame_no, **kwargs):
        """
        框式交换机整框重启
        ## 典型场景 ##    框式交换机整框重启。 ## 接口功能 ##    框式整框重启。 ## 接口约束 ##    北向接口管理员可以访问。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_chassis_with_http_info(device_id, frame_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID或堆叠ID， UUID格式。 (required)
        :param int frame_no: 机框号。 (required)
        :return: ResetChassisOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'frame_no']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_chassis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `reset_chassis`")
        # verify the required parameter 'frame_no' is set
        if ('frame_no' not in params) or (params['frame_no'] is None):
            raise ValueError("Missing the required parameter `frame_no` when calling `reset_chassis`")


        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']
        if 'frame_no' in params:
            path_params['frameNo'] = params['frame_no']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/resetchassis/devices/{deviceId}/frame/{frameNo}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResetChassisOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def switchover(self, device_id, **kwargs):
        """
        框式交换机主备倒换
        ## 典型场景 ##    框式交换机主备倒换。 ## 接口功能 ##    框式或者框式堆叠主备倒换。 ## 接口约束 ##    北向接口管理员可以访问。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.switchover(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID或者堆叠ID， UUID格式。 (required)
        :return: SwitchoverOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.switchover_with_http_info(device_id, **kwargs)
        else:
            (data) = self.switchover_with_http_info(device_id, **kwargs)
            return data

    def switchover_with_http_info(self, device_id, **kwargs):
        """
        框式交换机主备倒换
        ## 典型场景 ##    框式交换机主备倒换。 ## 接口功能 ##    框式或者框式堆叠主备倒换。 ## 接口约束 ##    北向接口管理员可以访问。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.switchover_with_http_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID或者堆叠ID， UUID格式。 (required)
        :return: SwitchoverOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method switchover" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `switchover`")


        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/switchover/{deviceId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SwitchoverOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
