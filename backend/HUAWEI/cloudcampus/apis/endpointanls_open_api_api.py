# coding: utf-8

"""
    终端客流量数据信息查询

    1、查询设备标签。 2、查询历史客户流量。 3、查询实时客户流量，返回最近5分钟内接入客户流量。 4、查询访客、路人、接入用户的历史趋势。 5、查询访客驻留时长的历史趋势。 6、查询回头客记录。 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class EndpointanlsOpenApiApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def get_device_group_tags(self, site_id, page_size, page_index, **kwargs):
        """
        获取设备标签
        ## 典型场景 ##    提供查询设备标签。           ## 接口功能 ##    查询设备标签，设备标签在监控->设备360->AP-AP中创建，单个设备最多可以创建10个标签。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若pageSize和pageIndex参数不传或者为非法参数，则默认按照pageSize=1000，pageIndex=0返回查询结果。     
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_device_group_tags(site_id, page_size, page_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param int page_size: 分页的大小。 (required)
        :param int page_index: 分页的序号。 (required)
        :return: DeviceGroupTagResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_device_group_tags_with_http_info(site_id, page_size, page_index, **kwargs)
        else:
            (data) = self.get_device_group_tags_with_http_info(site_id, page_size, page_index, **kwargs)
            return data

    def get_device_group_tags_with_http_info(self, site_id, page_size, page_index, **kwargs):
        """
        获取设备标签
        ## 典型场景 ##    提供查询设备标签。           ## 接口功能 ##    查询设备标签，设备标签在监控->设备360->AP-AP中创建，单个设备最多可以创建10个标签。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若pageSize和pageIndex参数不传或者为非法参数，则默认按照pageSize=1000，pageIndex=0返回查询结果。     
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_device_group_tags_with_http_info(site_id, page_size, page_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param int page_size: 分页的大小。 (required)
        :param int page_index: 分页的序号。 (required)
        :return: DeviceGroupTagResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'page_size', 'page_index']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_group_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_device_group_tags`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_device_group_tags`")
        # verify the required parameter 'page_index' is set
        if ('page_index' not in params) or (params['page_index'] is None):
            raise ValueError("Missing the required parameter `page_index` when calling `get_device_group_tags`")

        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_device_group_tags`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_device_group_tags`, must be a value greater than or equal to `1`")
        if 'page_index' in params and params['page_index'] > 2147483647:
            raise ValueError("Invalid value for parameter `page_index` when calling `get_device_group_tags`, must be a value less than or equal to `2147483647`")
        if 'page_index' in params and params['page_index'] < 0:
            raise ValueError("Invalid value for parameter `page_index` when calling `get_device_group_tags`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/endpointbehavior/tags', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceGroupTagResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_history_flow_distr(self, site_id, start_time, end_time, **kwargs):
        """
        查询历史接入客户数量
        ## 典型场景 ##    查询历史客户流量。           ## 接口功能 ##    查询历史接入客户流量。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。         
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_history_flow_distr(site_id, start_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param int start_time: 时间戳（毫秒），最大时间差不超过一年。 (required)
        :param int end_time: 时间戳（毫秒），最大时间差不超过一年。 (required)
        :param str tag_id: 标签ID，UUID格式，非必填，若不填，则默认查询站点下所有设备。
        :return: FlowDistrResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_history_flow_distr_with_http_info(site_id, start_time, end_time, **kwargs)
        else:
            (data) = self.get_history_flow_distr_with_http_info(site_id, start_time, end_time, **kwargs)
            return data

    def get_history_flow_distr_with_http_info(self, site_id, start_time, end_time, **kwargs):
        """
        查询历史接入客户数量
        ## 典型场景 ##    查询历史客户流量。           ## 接口功能 ##    查询历史接入客户流量。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。         
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_history_flow_distr_with_http_info(site_id, start_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param int start_time: 时间戳（毫秒），最大时间差不超过一年。 (required)
        :param int end_time: 时间戳（毫秒），最大时间差不超过一年。 (required)
        :param str tag_id: 标签ID，UUID格式，非必填，若不填，则默认查询站点下所有设备。
        :return: FlowDistrResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'start_time', 'end_time', 'tag_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_history_flow_distr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_history_flow_distr`")
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params) or (params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_history_flow_distr`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_history_flow_distr`")

        if 'site_id' in params and len(params['site_id']) > 64:
            raise ValueError("Invalid value for parameter `site_id` when calling `get_history_flow_distr`, length must be less than or equal to `64`")
        if 'site_id' in params and len(params['site_id']) < 0:
            raise ValueError("Invalid value for parameter `site_id` when calling `get_history_flow_distr`, length must be greater than or equal to `0`")
        if 'tag_id' in params and len(params['tag_id']) > 64:
            raise ValueError("Invalid value for parameter `tag_id` when calling `get_history_flow_distr`, length must be less than or equal to `64`")
        if 'tag_id' in params and len(params['tag_id']) < 0:
            raise ValueError("Invalid value for parameter `tag_id` when calling `get_history_flow_distr`, length must be greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))
        if 'tag_id' in params:
            query_params.append(('tagId', params['tag_id']))
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/endpointbehavior/historyflow', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowDistrResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_realtime_flow_distr(self, site_id, **kwargs):
        """
        查询实时接入客户数量
        ## 典型场景 ##    查询历史实时客户流量。           ## 接口功能 ##    查询历史实时客户数量，返回最近5分钟内接入客户流量。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_realtime_flow_distr(site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param str tag_id: 标签ID，若不设置，则默认查询站点下所有设备。
        :return: FlowDistrResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_realtime_flow_distr_with_http_info(site_id, **kwargs)
        else:
            (data) = self.get_realtime_flow_distr_with_http_info(site_id, **kwargs)
            return data

    def get_realtime_flow_distr_with_http_info(self, site_id, **kwargs):
        """
        查询实时接入客户数量
        ## 典型场景 ##    查询历史实时客户流量。           ## 接口功能 ##    查询历史实时客户数量，返回最近5分钟内接入客户流量。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_realtime_flow_distr_with_http_info(site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param str tag_id: 标签ID，若不设置，则默认查询站点下所有设备。
        :return: FlowDistrResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'tag_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_realtime_flow_distr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_realtime_flow_distr`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))
        if 'tag_id' in params:
            query_params.append(('tagId', params['tag_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/endpointbehavior/realtimeflow', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowDistrResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_capture_rate_distr(self, tag_id, tag_type, start_time, end_time, time_unit, **kwargs):
        """
        查询访客、路人、接入用户的历史趋势
        ## 典型场景 ##    查询访客、路人、接入用户的历史趋势。           ## 接口功能 ##    查询访客、路人、接入用户的历史趋势。    访客：以一小时为周期，一小时内连续5分钟都被探测到的终端，识别为访客。    路人：不满足访客条件的终端，均识别为路人。    接入用户：已关联或已认证的终端，识别为接入用户。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。            
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_capture_rate_distr(tag_id, tag_type, start_time, end_time, time_unit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tag_id: 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
        :param str tag_type: 标签类型：  0---TagID为站点ID。  1---TagID为标签ID。  (required)
        :param int start_time: 时间戳（秒），最大时间差不超过一年。 (required)
        :param int end_time: 时间戳（秒），最大时间差不超过一年。 (required)
        :param str time_unit: 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
        :return: FlowDistrResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_capture_rate_distr_with_http_info(tag_id, tag_type, start_time, end_time, time_unit, **kwargs)
        else:
            (data) = self.query_capture_rate_distr_with_http_info(tag_id, tag_type, start_time, end_time, time_unit, **kwargs)
            return data

    def query_capture_rate_distr_with_http_info(self, tag_id, tag_type, start_time, end_time, time_unit, **kwargs):
        """
        查询访客、路人、接入用户的历史趋势
        ## 典型场景 ##    查询访客、路人、接入用户的历史趋势。           ## 接口功能 ##    查询访客、路人、接入用户的历史趋势。    访客：以一小时为周期，一小时内连续5分钟都被探测到的终端，识别为访客。    路人：不满足访客条件的终端，均识别为路人。    接入用户：已关联或已认证的终端，识别为接入用户。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。            
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_capture_rate_distr_with_http_info(tag_id, tag_type, start_time, end_time, time_unit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tag_id: 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
        :param str tag_type: 标签类型：  0---TagID为站点ID。  1---TagID为标签ID。  (required)
        :param int start_time: 时间戳（秒），最大时间差不超过一年。 (required)
        :param int end_time: 时间戳（秒），最大时间差不超过一年。 (required)
        :param str time_unit: 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
        :return: FlowDistrResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag_id', 'tag_type', 'start_time', 'end_time', 'time_unit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_capture_rate_distr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tag_id' is set
        if ('tag_id' not in params) or (params['tag_id'] is None):
            raise ValueError("Missing the required parameter `tag_id` when calling `query_capture_rate_distr`")
        # verify the required parameter 'tag_type' is set
        if ('tag_type' not in params) or (params['tag_type'] is None):
            raise ValueError("Missing the required parameter `tag_type` when calling `query_capture_rate_distr`")
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params) or (params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `query_capture_rate_distr`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `query_capture_rate_distr`")
        # verify the required parameter 'time_unit' is set
        if ('time_unit' not in params) or (params['time_unit'] is None):
            raise ValueError("Missing the required parameter `time_unit` when calling `query_capture_rate_distr`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tag_id' in params:
            query_params.append(('tagId', params['tag_id']))
        if 'tag_type' in params:
            query_params.append(('tagType', params['tag_type']))
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))
        if 'time_unit' in params:
            query_params.append(('timeUnit', params['time_unit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/endpointbehavior/capturerate', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowDistrResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_dwell_time_distr(self, tag_id, tag_type, start_time, end_time, time_unit, **kwargs):
        """
        查询访客驻留时长的历史趋势
        ## 典型场景 ##    查询访客驻留时长的历史趋势。           ## 接口功能 ##    查询访客驻留时长的历史趋势。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_dwell_time_distr(tag_id, tag_type, start_time, end_time, time_unit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tag_id: 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
        :param str tag_type: 标签类型：  0---TagID为站点ID，  1---TagID为标签ID。  (required)
        :param int start_time: 时间戳（秒），最大时间差不超过一年。 (required)
        :param int end_time: 时间戳（秒），最大时间差不超过一年。 (required)
        :param str time_unit: 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
        :return: FlowDistrResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_dwell_time_distr_with_http_info(tag_id, tag_type, start_time, end_time, time_unit, **kwargs)
        else:
            (data) = self.query_dwell_time_distr_with_http_info(tag_id, tag_type, start_time, end_time, time_unit, **kwargs)
            return data

    def query_dwell_time_distr_with_http_info(self, tag_id, tag_type, start_time, end_time, time_unit, **kwargs):
        """
        查询访客驻留时长的历史趋势
        ## 典型场景 ##    查询访客驻留时长的历史趋势。           ## 接口功能 ##    查询访客驻留时长的历史趋势。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_dwell_time_distr_with_http_info(tag_id, tag_type, start_time, end_time, time_unit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tag_id: 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
        :param str tag_type: 标签类型：  0---TagID为站点ID，  1---TagID为标签ID。  (required)
        :param int start_time: 时间戳（秒），最大时间差不超过一年。 (required)
        :param int end_time: 时间戳（秒），最大时间差不超过一年。 (required)
        :param str time_unit: 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
        :return: FlowDistrResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag_id', 'tag_type', 'start_time', 'end_time', 'time_unit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_dwell_time_distr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tag_id' is set
        if ('tag_id' not in params) or (params['tag_id'] is None):
            raise ValueError("Missing the required parameter `tag_id` when calling `query_dwell_time_distr`")
        # verify the required parameter 'tag_type' is set
        if ('tag_type' not in params) or (params['tag_type'] is None):
            raise ValueError("Missing the required parameter `tag_type` when calling `query_dwell_time_distr`")
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params) or (params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `query_dwell_time_distr`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `query_dwell_time_distr`")
        # verify the required parameter 'time_unit' is set
        if ('time_unit' not in params) or (params['time_unit'] is None):
            raise ValueError("Missing the required parameter `time_unit` when calling `query_dwell_time_distr`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tag_id' in params:
            query_params.append(('tagId', params['tag_id']))
        if 'tag_type' in params:
            query_params.append(('tagType', params['tag_type']))
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))
        if 'time_unit' in params:
            query_params.append(('timeUnit', params['time_unit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/endpointbehavior/dwelltime', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowDistrResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_loyalty_distr(self, tag_id, tag_type, start_time, end_time, time_unit, **kwargs):
        """
        查询回头客记录
        ## 典型场景 ##    查询回头客记录。           ## 接口功能 ##    查询回头客记录。    首次访问是指半年内无访问记录的访客。    偶尔访问是指半年内存在访问记录的访客。    经常访问是指最近一个月内访问超过7天的访客。    频繁访问时指最近一个月内访问超过15天的访客。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_loyalty_distr(tag_id, tag_type, start_time, end_time, time_unit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tag_id: 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
        :param str tag_type: 标签类型：  0---TagID为站点ID，  1---TagID为标签ID。  (required)
        :param int start_time: 时间戳（秒），最大时间差不超过一年。 (required)
        :param int end_time: 时间戳（秒），最大时间差不超过一年。 (required)
        :param str time_unit: 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
        :return: FlowDistrResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_loyalty_distr_with_http_info(tag_id, tag_type, start_time, end_time, time_unit, **kwargs)
        else:
            (data) = self.query_loyalty_distr_with_http_info(tag_id, tag_type, start_time, end_time, time_unit, **kwargs)
            return data

    def query_loyalty_distr_with_http_info(self, tag_id, tag_type, start_time, end_time, time_unit, **kwargs):
        """
        查询回头客记录
        ## 典型场景 ##    查询回头客记录。           ## 接口功能 ##    查询回头客记录。    首次访问是指半年内无访问记录的访客。    偶尔访问是指半年内存在访问记录的访客。    经常访问是指最近一个月内访问超过7天的访客。    频繁访问时指最近一个月内访问超过15天的访客。 ## 接口约束 ##    1、只有租户管理员获取token并建立会话后才能调用该接口。    2、若时间差大于一个月小于一年，则以月时间粒度返回查询结果。    3、若时间差小于一个月大于一周，则以天时间维度返回查询结果。    4、若时间差小于一周，则以小时维度返回查询结果。    5、不支持超过一年以上的数据查询。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_loyalty_distr_with_http_info(tag_id, tag_type, start_time, end_time, time_unit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tag_id: 设备标签，若设备标签不存在或查询所有设备，需填写站点ID。 (required)
        :param str tag_type: 标签类型：  0---TagID为站点ID，  1---TagID为标签ID。  (required)
        :param int start_time: 时间戳（秒），最大时间差不超过一年。 (required)
        :param int end_time: 时间戳（秒），最大时间差不超过一年。 (required)
        :param str time_unit: 时间维度。   day---天维度   week---周维度   month---月维度   custom---自定义维度  (required)
        :return: FlowDistrResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag_id', 'tag_type', 'start_time', 'end_time', 'time_unit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_loyalty_distr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tag_id' is set
        if ('tag_id' not in params) or (params['tag_id'] is None):
            raise ValueError("Missing the required parameter `tag_id` when calling `query_loyalty_distr`")
        # verify the required parameter 'tag_type' is set
        if ('tag_type' not in params) or (params['tag_type'] is None):
            raise ValueError("Missing the required parameter `tag_type` when calling `query_loyalty_distr`")
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params) or (params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `query_loyalty_distr`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `query_loyalty_distr`")
        # verify the required parameter 'time_unit' is set
        if ('time_unit' not in params) or (params['time_unit'] is None):
            raise ValueError("Missing the required parameter `time_unit` when calling `query_loyalty_distr`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tag_id' in params:
            query_params.append(('tagId', params['tag_id']))
        if 'tag_type' in params:
            query_params.append(('tagType', params['tag_type']))
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))
        if 'time_unit' in params:
            query_params.append(('timeUnit', params['time_unit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/endpointbehavior/loyalty', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowDistrResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
