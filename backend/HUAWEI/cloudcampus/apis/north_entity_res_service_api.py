# coding: utf-8

"""
    实体资源北向接口

    实体资源条件查询。 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class NorthEntityResServiceApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def get_frame_list(self, **kwargs):
        """
        条件查询机框资源
        ## 典型场景 ##  北向接口支持条件查询机框资源。 ## 接口功能 ##  条件查询机框资源。 ## 接口约束 ##  该接口属于北向接口，由北向调用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_frame_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nedn: 设备dn，样例：047f72d1-7ad3-11e9-b906-000c29b01448。
        :param str nename: 网元名称，样例：FW_B。
        :param str framedn: 机框Dn，样例：047f72d1-7ad3-11e9-b906-000c29b01448,FR=1。
        :param int shelfindex: 机架索引设备上有的，所有资源的根索引，样例：-1。
        :param int frameindex: 机框索引，样例：67108867。
        :param int frameno: 机框序号，样例：1。
        :param str vendortype: 厂商类型，样例：.1.3.6.1.4.1.2011.20021210.11.16715812。
        :param str mfgname: 物理固件的制造厂商，样例：Huawei。
        :param str serialnum: 序列号，样例：020LKTD0A9000233。
        :param int physicalclass: 设备上实体大类型： 3：框 4：背板 5：子槽 6：电源 7：风扇 9：板 10：端口 
        :param str descr: 机框描述，样例：Eudemon1000E-N6。
        :param str framename: 机框名称，样例：Eudemon1000E-N6。
        :param int adminstatus: 管理状态，可以是如下值之一： 4、11：正常 2、3、12：错误 13：LoopBack 其他：未知 
        :param int operstatus: 操作状态，可以是如下值之一： 3、11、13、15、16：正常 2、12、17：错误 4：离线 其他：未知 
        :param int standbystatus: 主备状态： 1：notSupported  2：hotStandby  3：coldStandby  4：providingService 
        :param str softversion: 软件版本。
        :param int start: 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。说明，如果值小于0，将使用缺省值。
        :param int size: 指定返回查询结果集总数。缺省值是20。说明，如果值小于0，将使用缺省值。
        :param str orderby: 指定查询结果集采用的排序字段。缺省排序字段是nedn。可指定的排序字段包括：nedn、nename、framedn、framename（机框名称）。
        :param bool desc: 指定查询结果是否按降序排序。缺省值是false。说明，此请求参数只有指定了“orderby”请求参数后才有效。
        :return: FrameResResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_frame_list_with_http_info(**kwargs)
        else:
            (data) = self.get_frame_list_with_http_info(**kwargs)
            return data

    def get_frame_list_with_http_info(self, **kwargs):
        """
        条件查询机框资源
        ## 典型场景 ##  北向接口支持条件查询机框资源。 ## 接口功能 ##  条件查询机框资源。 ## 接口约束 ##  该接口属于北向接口，由北向调用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_frame_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nedn: 设备dn，样例：047f72d1-7ad3-11e9-b906-000c29b01448。
        :param str nename: 网元名称，样例：FW_B。
        :param str framedn: 机框Dn，样例：047f72d1-7ad3-11e9-b906-000c29b01448,FR=1。
        :param int shelfindex: 机架索引设备上有的，所有资源的根索引，样例：-1。
        :param int frameindex: 机框索引，样例：67108867。
        :param int frameno: 机框序号，样例：1。
        :param str vendortype: 厂商类型，样例：.1.3.6.1.4.1.2011.20021210.11.16715812。
        :param str mfgname: 物理固件的制造厂商，样例：Huawei。
        :param str serialnum: 序列号，样例：020LKTD0A9000233。
        :param int physicalclass: 设备上实体大类型： 3：框 4：背板 5：子槽 6：电源 7：风扇 9：板 10：端口 
        :param str descr: 机框描述，样例：Eudemon1000E-N6。
        :param str framename: 机框名称，样例：Eudemon1000E-N6。
        :param int adminstatus: 管理状态，可以是如下值之一： 4、11：正常 2、3、12：错误 13：LoopBack 其他：未知 
        :param int operstatus: 操作状态，可以是如下值之一： 3、11、13、15、16：正常 2、12、17：错误 4：离线 其他：未知 
        :param int standbystatus: 主备状态： 1：notSupported  2：hotStandby  3：coldStandby  4：providingService 
        :param str softversion: 软件版本。
        :param int start: 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。说明，如果值小于0，将使用缺省值。
        :param int size: 指定返回查询结果集总数。缺省值是20。说明，如果值小于0，将使用缺省值。
        :param str orderby: 指定查询结果集采用的排序字段。缺省排序字段是nedn。可指定的排序字段包括：nedn、nename、framedn、framename（机框名称）。
        :param bool desc: 指定查询结果是否按降序排序。缺省值是false。说明，此请求参数只有指定了“orderby”请求参数后才有效。
        :return: FrameResResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nedn', 'nename', 'framedn', 'shelfindex', 'frameindex', 'frameno', 'vendortype', 'mfgname', 'serialnum', 'physicalclass', 'descr', 'framename', 'adminstatus', 'operstatus', 'standbystatus', 'softversion', 'start', 'size', 'orderby', 'desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_frame_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nedn' in params:
            query_params.append(('nedn', params['nedn']))
        if 'nename' in params:
            query_params.append(('nename', params['nename']))
        if 'framedn' in params:
            query_params.append(('framedn', params['framedn']))
        if 'shelfindex' in params:
            query_params.append(('shelfindex', params['shelfindex']))
        if 'frameindex' in params:
            query_params.append(('frameindex', params['frameindex']))
        if 'frameno' in params:
            query_params.append(('frameno', params['frameno']))
        if 'vendortype' in params:
            query_params.append(('vendortype', params['vendortype']))
        if 'mfgname' in params:
            query_params.append(('mfgname', params['mfgname']))
        if 'serialnum' in params:
            query_params.append(('serialnum', params['serialnum']))
        if 'physicalclass' in params:
            query_params.append(('physicalclass', params['physicalclass']))
        if 'descr' in params:
            query_params.append(('descr', params['descr']))
        if 'framename' in params:
            query_params.append(('framename', params['framename']))
        if 'adminstatus' in params:
            query_params.append(('adminstatus', params['adminstatus']))
        if 'operstatus' in params:
            query_params.append(('operstatus', params['operstatus']))
        if 'standbystatus' in params:
            query_params.append(('standbystatus', params['standbystatus']))
        if 'softversion' in params:
            query_params.append(('softversion', params['softversion']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))
        if 'desc' in params:
            query_params.append(('desc', params['desc']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/openapi/network/frame', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FrameResResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_ot_point_list(self, **kwargs):
        """
        条件查询光口资源
        ## 典型场景 ##  北向接口支持条件查询光口资源。 ## 接口功能 ##  条件查询光口资源。 ## 接口约束 ##  该接口属于北向接口，由北向调用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ot_point_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nedn: 设备DN，样例：NE=34604111。
        :param int start: 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。说明：如果值小于0，将使用缺省值。
        :param int size: 指定返回查询结果集总数，支持1～100条，缺省值是20。说明：如果值小于1或大于100时，将使用缺省值。
        :param str fields: 指定查询结果所包含的列。需要查询的列名为fields参数的值，多个列名时可用英文逗号隔开。 说明： 此请求参数只有指定了fields请求参数后才有效，不指定默认返回所有字段。
        :return: OTPointResResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_ot_point_list_with_http_info(**kwargs)
        else:
            (data) = self.get_ot_point_list_with_http_info(**kwargs)
            return data

    def get_ot_point_list_with_http_info(self, **kwargs):
        """
        条件查询光口资源
        ## 典型场景 ##  北向接口支持条件查询光口资源。 ## 接口功能 ##  条件查询光口资源。 ## 接口约束 ##  该接口属于北向接口，由北向调用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ot_point_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nedn: 设备DN，样例：NE=34604111。
        :param int start: 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。说明：如果值小于0，将使用缺省值。
        :param int size: 指定返回查询结果集总数，支持1～100条，缺省值是20。说明：如果值小于1或大于100时，将使用缺省值。
        :param str fields: 指定查询结果所包含的列。需要查询的列名为fields参数的值，多个列名时可用英文逗号隔开。 说明： 此请求参数只有指定了fields请求参数后才有效，不指定默认返回所有字段。
        :return: OTPointResResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nedn', 'start', 'size', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ot_point_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nedn' in params:
            query_params.append(('nedn', params['nedn']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'fields' in params:
            query_params.append(('fields', params['fields']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/openapi/network/otpoint', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OTPointResResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_port_list(self, **kwargs):
        """
        条件查询端口资源
        ## 典型场景 ##  北向接口支持条件查询端口资源。 ## 接口功能 ##  条件查询端口资源。 ## 接口约束 ##  该接口属于北向接口，由北向调用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_port_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str neip: 设备IP地址，样例：10.136.252.60。
        :param str nename: 设备名称，样例：FW_B。
        :param str nedn: 设备DN，样例：047f72d1-7ad3-11e9-b906-000c29b01448。
        :param str portdn: 端口DN，样例：047f72d1-7ad3-11e9-b906-000c29b01448,FR=1,S=1,SS=-1,PP=|1025|0|GigabitEthernet1/0/0。
        :param str framedn: 机框DN，样例：047f72d1-7ad3-11e9-b906-000c29b01448,FR=1。
        :param str slotdn: 单板DN，样例：047f72d1-7ad3-11e9-b906-000c29b01448,FR=1,S=1。
        :param str subslotdn: 子卡DN，样例：-1。
        :param int frameno: 机框序号，样例：1。
        :param int slotno: 单板序号，样例：1。
        :param int subslotno: 子卡序号，样例：-1。
        :param int portindex: 端口索引，样例：67387406。
        :param int portno: 端口编号，样例：0。
        :param str descr: 端口描述，样例：Port。
        :param str name: 端口名称，样例：GigabitEthernet1/0/0。
        :param int adminstatus: 接口管理状态，可以是如下值之一： 1：up 2：down 
        :param int operstatus: 接口运行状态，可以是如下值之一： 1：up 2：down 
        :param int ifindex: 接口索引，样例：6。
        :param int iftype: 端口类型，可以是如下值之一： 2：Ethernet 5：Atm 6：Pos 7：Serial 9：E1 10：T1 11：Cpos 19：Aux 20：E3 21：T3 22：Meth 32：Cellular 
        :param str ipaddress: 端口IP地址，样例：10.0.0.0。
        :param str ifspeed: 端口速率（bps），样例：1000000000。
        :param int start: 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。说明：如果值小于0，将使用缺省值。
        :param int size: 指定返回查询结果集总数，支持1～100条，缺省值是20。说明：如果值小于1或大于100时，将使用缺省值。
        :param str orderby: 指定查询结果集采用的排序字段。缺省排序字段是nedn。可指定的排序字段包括：nedn、nename、portdn，name(端口名) 说明： 指定多个排序字段时字段间用英文半角逗号“,”分隔。
        :param bool desc: 指定查询结果是否按降序排序。缺省值是false。说明：此请求参数只有指定了“orderby”请求参数后才有效。
        :param str fields: 指定查询结果所包含的列。需要查询的列名为fields参数的值，多个列名时可用英文逗号隔开。 说明： 此请求参数只有指定了fields请求参数后才有效，不指定默认返回所有字段。
        :return: PortResResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_port_list_with_http_info(**kwargs)
        else:
            (data) = self.get_port_list_with_http_info(**kwargs)
            return data

    def get_port_list_with_http_info(self, **kwargs):
        """
        条件查询端口资源
        ## 典型场景 ##  北向接口支持条件查询端口资源。 ## 接口功能 ##  条件查询端口资源。 ## 接口约束 ##  该接口属于北向接口，由北向调用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_port_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str neip: 设备IP地址，样例：10.136.252.60。
        :param str nename: 设备名称，样例：FW_B。
        :param str nedn: 设备DN，样例：047f72d1-7ad3-11e9-b906-000c29b01448。
        :param str portdn: 端口DN，样例：047f72d1-7ad3-11e9-b906-000c29b01448,FR=1,S=1,SS=-1,PP=|1025|0|GigabitEthernet1/0/0。
        :param str framedn: 机框DN，样例：047f72d1-7ad3-11e9-b906-000c29b01448,FR=1。
        :param str slotdn: 单板DN，样例：047f72d1-7ad3-11e9-b906-000c29b01448,FR=1,S=1。
        :param str subslotdn: 子卡DN，样例：-1。
        :param int frameno: 机框序号，样例：1。
        :param int slotno: 单板序号，样例：1。
        :param int subslotno: 子卡序号，样例：-1。
        :param int portindex: 端口索引，样例：67387406。
        :param int portno: 端口编号，样例：0。
        :param str descr: 端口描述，样例：Port。
        :param str name: 端口名称，样例：GigabitEthernet1/0/0。
        :param int adminstatus: 接口管理状态，可以是如下值之一： 1：up 2：down 
        :param int operstatus: 接口运行状态，可以是如下值之一： 1：up 2：down 
        :param int ifindex: 接口索引，样例：6。
        :param int iftype: 端口类型，可以是如下值之一： 2：Ethernet 5：Atm 6：Pos 7：Serial 9：E1 10：T1 11：Cpos 19：Aux 20：E3 21：T3 22：Meth 32：Cellular 
        :param str ipaddress: 端口IP地址，样例：10.0.0.0。
        :param str ifspeed: 端口速率（bps），样例：1000000000。
        :param int start: 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。说明：如果值小于0，将使用缺省值。
        :param int size: 指定返回查询结果集总数，支持1～100条，缺省值是20。说明：如果值小于1或大于100时，将使用缺省值。
        :param str orderby: 指定查询结果集采用的排序字段。缺省排序字段是nedn。可指定的排序字段包括：nedn、nename、portdn，name(端口名) 说明： 指定多个排序字段时字段间用英文半角逗号“,”分隔。
        :param bool desc: 指定查询结果是否按降序排序。缺省值是false。说明：此请求参数只有指定了“orderby”请求参数后才有效。
        :param str fields: 指定查询结果所包含的列。需要查询的列名为fields参数的值，多个列名时可用英文逗号隔开。 说明： 此请求参数只有指定了fields请求参数后才有效，不指定默认返回所有字段。
        :return: PortResResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['neip', 'nename', 'nedn', 'portdn', 'framedn', 'slotdn', 'subslotdn', 'frameno', 'slotno', 'subslotno', 'portindex', 'portno', 'descr', 'name', 'adminstatus', 'operstatus', 'ifindex', 'iftype', 'ipaddress', 'ifspeed', 'start', 'size', 'orderby', 'desc', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_port_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'neip' in params:
            query_params.append(('neip', params['neip']))
        if 'nename' in params:
            query_params.append(('nename', params['nename']))
        if 'nedn' in params:
            query_params.append(('nedn', params['nedn']))
        if 'portdn' in params:
            query_params.append(('portdn', params['portdn']))
        if 'framedn' in params:
            query_params.append(('framedn', params['framedn']))
        if 'slotdn' in params:
            query_params.append(('slotdn', params['slotdn']))
        if 'subslotdn' in params:
            query_params.append(('subslotdn', params['subslotdn']))
        if 'frameno' in params:
            query_params.append(('frameno', params['frameno']))
        if 'slotno' in params:
            query_params.append(('slotno', params['slotno']))
        if 'subslotno' in params:
            query_params.append(('subslotno', params['subslotno']))
        if 'portindex' in params:
            query_params.append(('portindex', params['portindex']))
        if 'portno' in params:
            query_params.append(('portno', params['portno']))
        if 'descr' in params:
            query_params.append(('descr', params['descr']))
        if 'name' in params:
            query_params.append(('name', params['name']))
        if 'adminstatus' in params:
            query_params.append(('adminstatus', params['adminstatus']))
        if 'operstatus' in params:
            query_params.append(('operstatus', params['operstatus']))
        if 'ifindex' in params:
            query_params.append(('ifindex', params['ifindex']))
        if 'iftype' in params:
            query_params.append(('iftype', params['iftype']))
        if 'ipaddress' in params:
            query_params.append(('ipaddress', params['ipaddress']))
        if 'ifspeed' in params:
            query_params.append(('ifspeed', params['ifspeed']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))
        if 'desc' in params:
            query_params.append(('desc', params['desc']))
        if 'fields' in params:
            query_params.append(('fields', params['fields']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/openapi/network/port', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PortResResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_slot_list(self, **kwargs):
        """
        条件查询单板资源
        ## 典型场景 ##  北向接口支持条件查询单板资源。 ## 接口功能 ##  条件查询单板资源。 ## 接口约束 ##  该接口属于北向接口，由北向调用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_slot_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nedn: 设备DN，样例：047f72d1-7ad3-11e9-b906-000c29b01448。
        :param str nename: 设备名称，样例：FW_B。
        :param str framedn: 机框DN，样例：047f72d1-7ad3-11e9-b906-000c29b01448,FR=1。
        :param str framename: 机框名称，样例：Eudemon1000E-N6。
        :param int frameno: 机框序号，样例：1。
        :param str slotdn: 单板Dn，样例：047f72d1-7ad3-11e9-b906-000c29b01448,FR=1,S=1。
        :param int slotindex: 单板索引，样例：67371017。
        :param int slotno: 单板序号，样例：1。
        :param str vendortype: 厂商类型，样例：.1.3.6.1.4.1.2011.20021210.12.16719978。
        :param str descr: 单板描述，样例：--。
        :param str slotname: 单板名称，样例：2XG8GE。
        :param int physicalclass: 设备上实体大类型： 3：框 4：背板 5：子槽 6：电源 7：风扇 9：板 10：端口 
        :param int adminstatus: 管理状态： 4、11：正常 2、3、12：错误 13：LoopBack 
        :param int operstatus: 操作状态： 3、11、13、15、16：正 2、12、17：错误 4：离线 其他：未知 
        :param int standbystatus: 主备状态： 1：notSupported 2： hotStandby 3：coldStandby 4：providingService 
        :param str hardversion: 硬件版本，样例：VER.A。
        :param str firmversion: 固件版本，样例：221 Nov 28 2017 17:23:17 。
        :param str softversion: 软件版本，样例：V500R001C80SPC100。
        :param str serialnum: 序列号，样例：210235G7FW0123456789。
        :param str mfgname: 组件名称，样例：Huawei。
        :param str modelname: 模块名称，样例：huawei。
        :param str alarmlight: 预留字段，当前无意义。
        :param int start: 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。说明： 如果值小于0，将使用缺省值。
        :param int size: 指定返回查询结果集总数。缺省值是20。说明： 1、如果值小于0，将使用缺省值。2、数据的size，最大建议10000条。
        :param str orderby: 指定查询结果集采用的排序字段。缺省排序字段是nedn。可指定的排序字段包括：nedn、nename、framedn、framename、slotdn说明：指定多个排序字段时字段间用英文半角逗号“,”分隔。
        :param bool desc: 指定查询结果是否按降序排序。缺省值是false。说明： 此请求参数只有指定了“orderby”请求参数后才有效。
        :param str fields: 指定查询结果所包含的列。需要查询的列名为fields参数的值，多个列名时可用英文逗号隔开。说明：此请求参数只有指定了“fields”请求参数后才有效，不指定默认返回所有字段。
        :return: SlotResResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_slot_list_with_http_info(**kwargs)
        else:
            (data) = self.get_slot_list_with_http_info(**kwargs)
            return data

    def get_slot_list_with_http_info(self, **kwargs):
        """
        条件查询单板资源
        ## 典型场景 ##  北向接口支持条件查询单板资源。 ## 接口功能 ##  条件查询单板资源。 ## 接口约束 ##  该接口属于北向接口，由北向调用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_slot_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nedn: 设备DN，样例：047f72d1-7ad3-11e9-b906-000c29b01448。
        :param str nename: 设备名称，样例：FW_B。
        :param str framedn: 机框DN，样例：047f72d1-7ad3-11e9-b906-000c29b01448,FR=1。
        :param str framename: 机框名称，样例：Eudemon1000E-N6。
        :param int frameno: 机框序号，样例：1。
        :param str slotdn: 单板Dn，样例：047f72d1-7ad3-11e9-b906-000c29b01448,FR=1,S=1。
        :param int slotindex: 单板索引，样例：67371017。
        :param int slotno: 单板序号，样例：1。
        :param str vendortype: 厂商类型，样例：.1.3.6.1.4.1.2011.20021210.12.16719978。
        :param str descr: 单板描述，样例：--。
        :param str slotname: 单板名称，样例：2XG8GE。
        :param int physicalclass: 设备上实体大类型： 3：框 4：背板 5：子槽 6：电源 7：风扇 9：板 10：端口 
        :param int adminstatus: 管理状态： 4、11：正常 2、3、12：错误 13：LoopBack 
        :param int operstatus: 操作状态： 3、11、13、15、16：正 2、12、17：错误 4：离线 其他：未知 
        :param int standbystatus: 主备状态： 1：notSupported 2： hotStandby 3：coldStandby 4：providingService 
        :param str hardversion: 硬件版本，样例：VER.A。
        :param str firmversion: 固件版本，样例：221 Nov 28 2017 17:23:17 。
        :param str softversion: 软件版本，样例：V500R001C80SPC100。
        :param str serialnum: 序列号，样例：210235G7FW0123456789。
        :param str mfgname: 组件名称，样例：Huawei。
        :param str modelname: 模块名称，样例：huawei。
        :param str alarmlight: 预留字段，当前无意义。
        :param int start: 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。说明： 如果值小于0，将使用缺省值。
        :param int size: 指定返回查询结果集总数。缺省值是20。说明： 1、如果值小于0，将使用缺省值。2、数据的size，最大建议10000条。
        :param str orderby: 指定查询结果集采用的排序字段。缺省排序字段是nedn。可指定的排序字段包括：nedn、nename、framedn、framename、slotdn说明：指定多个排序字段时字段间用英文半角逗号“,”分隔。
        :param bool desc: 指定查询结果是否按降序排序。缺省值是false。说明： 此请求参数只有指定了“orderby”请求参数后才有效。
        :param str fields: 指定查询结果所包含的列。需要查询的列名为fields参数的值，多个列名时可用英文逗号隔开。说明：此请求参数只有指定了“fields”请求参数后才有效，不指定默认返回所有字段。
        :return: SlotResResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nedn', 'nename', 'framedn', 'framename', 'frameno', 'slotdn', 'slotindex', 'slotno', 'vendortype', 'descr', 'slotname', 'physicalclass', 'adminstatus', 'operstatus', 'standbystatus', 'hardversion', 'firmversion', 'softversion', 'serialnum', 'mfgname', 'modelname', 'alarmlight', 'start', 'size', 'orderby', 'desc', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slot_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nedn' in params:
            query_params.append(('nedn', params['nedn']))
        if 'nename' in params:
            query_params.append(('nename', params['nename']))
        if 'framedn' in params:
            query_params.append(('framedn', params['framedn']))
        if 'framename' in params:
            query_params.append(('framename', params['framename']))
        if 'frameno' in params:
            query_params.append(('frameno', params['frameno']))
        if 'slotdn' in params:
            query_params.append(('slotdn', params['slotdn']))
        if 'slotindex' in params:
            query_params.append(('slotindex', params['slotindex']))
        if 'slotno' in params:
            query_params.append(('slotno', params['slotno']))
        if 'vendortype' in params:
            query_params.append(('vendortype', params['vendortype']))
        if 'descr' in params:
            query_params.append(('descr', params['descr']))
        if 'slotname' in params:
            query_params.append(('slotname', params['slotname']))
        if 'physicalclass' in params:
            query_params.append(('physicalclass', params['physicalclass']))
        if 'adminstatus' in params:
            query_params.append(('adminstatus', params['adminstatus']))
        if 'operstatus' in params:
            query_params.append(('operstatus', params['operstatus']))
        if 'standbystatus' in params:
            query_params.append(('standbystatus', params['standbystatus']))
        if 'hardversion' in params:
            query_params.append(('hardversion', params['hardversion']))
        if 'firmversion' in params:
            query_params.append(('firmversion', params['firmversion']))
        if 'softversion' in params:
            query_params.append(('softversion', params['softversion']))
        if 'serialnum' in params:
            query_params.append(('serialnum', params['serialnum']))
        if 'mfgname' in params:
            query_params.append(('mfgname', params['mfgname']))
        if 'modelname' in params:
            query_params.append(('modelname', params['modelname']))
        if 'alarmlight' in params:
            query_params.append(('alarmlight', params['alarmlight']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))
        if 'desc' in params:
            query_params.append(('desc', params['desc']))
        if 'fields' in params:
            query_params.append(('fields', params['fields']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/openapi/network/slot', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SlotResResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_sub_slot_list(self, **kwargs):
        """
        条件查询子卡资源
        ## 典型场景 ##  北向接口支持条件查询子卡资源。 ## 接口功能 ##  条件查询子卡资源。 ## 接口约束 ##  该接口属于北向接口，由北向调用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sub_slot_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nedn: 设备Dn，样例：a4059c31-7ad3-11e9-b906-000c29b01448。
        :param str nename: 设备名称，样例：AR1220-56。
        :param str framedn: 机框Dn，样例：a4059c31-7ad3-11e9-b906-000c29b01448,FR=0。
        :param str slotdn: 单板Dn，样例：a4059c31-7ad3-11e9-b906-000c29b01448,FR=0,S=0。
        :param str slotname: 单板名称，样例：SRU Board 0。
        :param str subslotdn: 子卡Dn，样例：a4059c31-7ad3-11e9-b906-000c29b01448,FR=0,S=0,SS=0。
        :param int frameno: 机框序号，样例：0。
        :param int slotno: 单板序号，样例：0。
        :param int subslotindex: 子卡索引，样例：16397。
        :param int subslotno: 子卡序号，样例：0。
        :param str descr: 子卡描述，样例：FAN Card。
        :param str subslotname: 子卡名称，样例：FAN Card 0/1。
        :param str vendortype: 厂商类型，样例：.1.3.6.1.4.1.2011.20021210.13.0。
        :param int physicalclass: 设备上实体大类型： 3：框 4：背板 5：子槽 6：电源 7：风扇 9：板 10：端口 
        :param str hardversion: 硬件版本，样例：VER.0。
        :param str firmversion: 固件版本，样例：Hex： 31 30 39 。
        :param str softversion: 软件版本，样例：0。
        :param int adminstatus: 管理状态： 4、11：正常 2、3、12：错误 13：LoopBack 
        :param int operstatus: 操作状态： 3、11、13、15、16：正常 2、12、17：错误 4：离线 其他：未知 
        :param str modelname: 模块名称，样例：--。
        :param str serialnum: 序列号，样例：030KSB10B3000060。
        :param str mfgname: 组件名称，物理固件的制造厂商，样例：Huawei。
        :param int start: 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。说明：如果值小于0，将使用缺省值。
        :param int size: 指定返回查询结果集总数。缺省值是20。说明：如果值小于0，将使用缺省值。
        :param str orderby: 指定查询结果集采用的排序字段。缺省排序字段是nedn。可指定的排序字段包括：nedn、nename、framedn、slotdn、slotname。说明：指定多个排序字段时字段间用英文半角逗号“,”分隔。
        :param bool desc: 指定查询结果是否按降序排序。缺省值是false。说明：此请求参数只有指定了“orderby”请求参数后才有效。
        :return: SubSlotResResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sub_slot_list_with_http_info(**kwargs)
        else:
            (data) = self.get_sub_slot_list_with_http_info(**kwargs)
            return data

    def get_sub_slot_list_with_http_info(self, **kwargs):
        """
        条件查询子卡资源
        ## 典型场景 ##  北向接口支持条件查询子卡资源。 ## 接口功能 ##  条件查询子卡资源。 ## 接口约束 ##  该接口属于北向接口，由北向调用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sub_slot_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nedn: 设备Dn，样例：a4059c31-7ad3-11e9-b906-000c29b01448。
        :param str nename: 设备名称，样例：AR1220-56。
        :param str framedn: 机框Dn，样例：a4059c31-7ad3-11e9-b906-000c29b01448,FR=0。
        :param str slotdn: 单板Dn，样例：a4059c31-7ad3-11e9-b906-000c29b01448,FR=0,S=0。
        :param str slotname: 单板名称，样例：SRU Board 0。
        :param str subslotdn: 子卡Dn，样例：a4059c31-7ad3-11e9-b906-000c29b01448,FR=0,S=0,SS=0。
        :param int frameno: 机框序号，样例：0。
        :param int slotno: 单板序号，样例：0。
        :param int subslotindex: 子卡索引，样例：16397。
        :param int subslotno: 子卡序号，样例：0。
        :param str descr: 子卡描述，样例：FAN Card。
        :param str subslotname: 子卡名称，样例：FAN Card 0/1。
        :param str vendortype: 厂商类型，样例：.1.3.6.1.4.1.2011.20021210.13.0。
        :param int physicalclass: 设备上实体大类型： 3：框 4：背板 5：子槽 6：电源 7：风扇 9：板 10：端口 
        :param str hardversion: 硬件版本，样例：VER.0。
        :param str firmversion: 固件版本，样例：Hex： 31 30 39 。
        :param str softversion: 软件版本，样例：0。
        :param int adminstatus: 管理状态： 4、11：正常 2、3、12：错误 13：LoopBack 
        :param int operstatus: 操作状态： 3、11、13、15、16：正常 2、12、17：错误 4：离线 其他：未知 
        :param str modelname: 模块名称，样例：--。
        :param str serialnum: 序列号，样例：030KSB10B3000060。
        :param str mfgname: 组件名称，物理固件的制造厂商，样例：Huawei。
        :param int start: 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。说明：如果值小于0，将使用缺省值。
        :param int size: 指定返回查询结果集总数。缺省值是20。说明：如果值小于0，将使用缺省值。
        :param str orderby: 指定查询结果集采用的排序字段。缺省排序字段是nedn。可指定的排序字段包括：nedn、nename、framedn、slotdn、slotname。说明：指定多个排序字段时字段间用英文半角逗号“,”分隔。
        :param bool desc: 指定查询结果是否按降序排序。缺省值是false。说明：此请求参数只有指定了“orderby”请求参数后才有效。
        :return: SubSlotResResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nedn', 'nename', 'framedn', 'slotdn', 'slotname', 'subslotdn', 'frameno', 'slotno', 'subslotindex', 'subslotno', 'descr', 'subslotname', 'vendortype', 'physicalclass', 'hardversion', 'firmversion', 'softversion', 'adminstatus', 'operstatus', 'modelname', 'serialnum', 'mfgname', 'start', 'size', 'orderby', 'desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sub_slot_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nedn' in params:
            query_params.append(('nedn', params['nedn']))
        if 'nename' in params:
            query_params.append(('nename', params['nename']))
        if 'framedn' in params:
            query_params.append(('framedn', params['framedn']))
        if 'slotdn' in params:
            query_params.append(('slotdn', params['slotdn']))
        if 'slotname' in params:
            query_params.append(('slotname', params['slotname']))
        if 'subslotdn' in params:
            query_params.append(('subslotdn', params['subslotdn']))
        if 'frameno' in params:
            query_params.append(('frameno', params['frameno']))
        if 'slotno' in params:
            query_params.append(('slotno', params['slotno']))
        if 'subslotindex' in params:
            query_params.append(('subslotindex', params['subslotindex']))
        if 'subslotno' in params:
            query_params.append(('subslotno', params['subslotno']))
        if 'descr' in params:
            query_params.append(('descr', params['descr']))
        if 'subslotname' in params:
            query_params.append(('subslotname', params['subslotname']))
        if 'vendortype' in params:
            query_params.append(('vendortype', params['vendortype']))
        if 'physicalclass' in params:
            query_params.append(('physicalclass', params['physicalclass']))
        if 'hardversion' in params:
            query_params.append(('hardversion', params['hardversion']))
        if 'firmversion' in params:
            query_params.append(('firmversion', params['firmversion']))
        if 'softversion' in params:
            query_params.append(('softversion', params['softversion']))
        if 'adminstatus' in params:
            query_params.append(('adminstatus', params['adminstatus']))
        if 'operstatus' in params:
            query_params.append(('operstatus', params['operstatus']))
        if 'modelname' in params:
            query_params.append(('modelname', params['modelname']))
        if 'serialnum' in params:
            query_params.append(('serialnum', params['serialnum']))
        if 'mfgname' in params:
            query_params.append(('mfgname', params['mfgname']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))
        if 'desc' in params:
            query_params.append(('desc', params['desc']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/openapi/network/subslot', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SubSlotResResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
