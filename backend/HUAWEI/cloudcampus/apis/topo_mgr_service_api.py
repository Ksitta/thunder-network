# coding: utf-8

"""
    拓扑管理

    拓扑管理第三方北向接口。 1、查询LACP LAG信息 2、查询LLDP信息 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class TopoMgrServiceApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def get_lacp_lag_info(self, device_id, **kwargs):
        """
        查询LACP LAG信息
        ## 典型场景 ##  根据设备ID查询LACP LAG信息。 ## 接口功能 ##  查询LACP LAG信息。 ## 接口约束 ##  1、当前仅LSW支持该接口。  2、该接口必须在用户会话建立后使用。  3、该接口需从设备查询信息，数据量大时会导致查询响应慢。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_lacp_lag_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID，UUID格式。 (required)
        :return: LacpLagInfoResultDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_lacp_lag_info_with_http_info(device_id, **kwargs)
        else:
            (data) = self.get_lacp_lag_info_with_http_info(device_id, **kwargs)
            return data

    def get_lacp_lag_info_with_http_info(self, device_id, **kwargs):
        """
        查询LACP LAG信息
        ## 典型场景 ##  根据设备ID查询LACP LAG信息。 ## 接口功能 ##  查询LACP LAG信息。 ## 接口约束 ##  1、当前仅LSW支持该接口。  2、该接口必须在用户会话建立后使用。  3、该接口需从设备查询信息，数据量大时会导致查询响应慢。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_lacp_lag_info_with_http_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID，UUID格式。 (required)
        :return: LacpLagInfoResultDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lacp_lag_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_lacp_lag_info`")

        if 'device_id' in params and len(params['device_id']) > 36:
            raise ValueError("Invalid value for parameter `device_id` when calling `get_lacp_lag_info`, length must be less than or equal to `36`")
        if 'device_id' in params and len(params['device_id']) < 36:
            raise ValueError("Invalid value for parameter `device_id` when calling `get_lacp_lag_info`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkresource/topomanager/device/{deviceId}/ethtrunk', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LacpLagInfoResultDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_neighbors_info(self, device_id, **kwargs):
        """
        查询LLDP信息
        ## 典型场景 ##  根据设备ID查询LLDP信息。 ## 接口功能 ##  查询LLDP信息。 ## 接口约束 ##  1、当前仅LSW和云AP支持该接口。  2、该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_neighbors_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID，UUID格式。 (required)
        :param str local_if_name: 本端接口名称，值为空时表示查询该设备所有接口的LLDP连接。
        :param int page_index: 分页时，当前页面索引，值<=0时表示获取所有数据。
        :param int page_size: 分页时，当前页面设备数据长度；pageIndex为空或<=0时，此参数无意义。
        :return: NeighborsInfoResultDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_neighbors_info_with_http_info(device_id, **kwargs)
        else:
            (data) = self.get_neighbors_info_with_http_info(device_id, **kwargs)
            return data

    def get_neighbors_info_with_http_info(self, device_id, **kwargs):
        """
        查询LLDP信息
        ## 典型场景 ##  根据设备ID查询LLDP信息。 ## 接口功能 ##  查询LLDP信息。 ## 接口约束 ##  1、当前仅LSW和云AP支持该接口。  2、该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_neighbors_info_with_http_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID，UUID格式。 (required)
        :param str local_if_name: 本端接口名称，值为空时表示查询该设备所有接口的LLDP连接。
        :param int page_index: 分页时，当前页面索引，值<=0时表示获取所有数据。
        :param int page_size: 分页时，当前页面设备数据长度；pageIndex为空或<=0时，此参数无意义。
        :return: NeighborsInfoResultDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'local_if_name', 'page_index', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_neighbors_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_neighbors_info`")

        if 'device_id' in params and len(params['device_id']) > 36:
            raise ValueError("Invalid value for parameter `device_id` when calling `get_neighbors_info`, length must be less than or equal to `36`")
        if 'device_id' in params and len(params['device_id']) < 36:
            raise ValueError("Invalid value for parameter `device_id` when calling `get_neighbors_info`, length must be greater than or equal to `36`")
        if 'local_if_name' in params and len(params['local_if_name']) > 128:
            raise ValueError("Invalid value for parameter `local_if_name` when calling `get_neighbors_info`, length must be less than or equal to `128`")
        if 'local_if_name' in params and len(params['local_if_name']) < 0:
            raise ValueError("Invalid value for parameter `local_if_name` when calling `get_neighbors_info`, length must be greater than or equal to `0`")
        if 'page_index' in params and params['page_index'] > 2147483647:
            raise ValueError("Invalid value for parameter `page_index` when calling `get_neighbors_info`, must be a value less than or equal to `2147483647`")
        if 'page_index' in params and params['page_index'] < 0:
            raise ValueError("Invalid value for parameter `page_index` when calling `get_neighbors_info`, must be a value greater than or equal to `0`")
        if 'page_size' in params and params['page_size'] > 2147483647:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_neighbors_info`, must be a value less than or equal to `2147483647`")
        if 'page_size' in params and params['page_size'] < 0:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_neighbors_info`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']

        query_params = []
        if 'local_if_name' in params:
            query_params.append(('localIfName', params['local_if_name']))
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkresource/topomanager/device/{deviceId}/neighbors', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='NeighborsInfoResultDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
