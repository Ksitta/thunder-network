# coding: utf-8

"""
    站点管理

    站点管理第三方接口。 场景：对站点增删改查操作的第三方接口。

    OpenAPI spec version: 1.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class SiteManagerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def create_sites(self, create_site_dto, **kwargs):
        """
        创建站点
        ## 典型场景 ## 根据站点名称和描述，创建站点。 ## 接口功能 ## 创建站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_sites(create_site_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateSiteDto create_site_dto: 创建站点入参。 (required)
        :return: CreateSiteOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_sites_with_http_info(create_site_dto, **kwargs)
        else:
            (data) = self.create_sites_with_http_info(create_site_dto, **kwargs)
            return data

    def create_sites_with_http_info(self, create_site_dto, **kwargs):
        """
        创建站点
        ## 典型场景 ## 根据站点名称和描述，创建站点。 ## 接口功能 ## 创建站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_sites_with_http_info(create_site_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateSiteDto create_site_dto: 创建站点入参。 (required)
        :return: CreateSiteOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_site_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sites" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_site_dto' is set
        if ('create_site_dto' not in params) or (params['create_site_dto'] is None):
            raise ValueError("Missing the required parameter `create_site_dto` when calling `create_sites`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_site_dto' in params:
            body_params = params['create_site_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/sites', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreateSiteOut',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_sites(self, delete_site_dto, **kwargs):
        """
        删除站点
        ## 典型场景 ## 根据站点ID列表，删除对应的站点。 ## 接口功能 ## 删除站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_sites(delete_site_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeleteSiteDto delete_site_dto: 删除站点请求体。 (required)
        :return: DeleteSiteOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_sites_with_http_info(delete_site_dto, **kwargs)
        else:
            (data) = self.delete_sites_with_http_info(delete_site_dto, **kwargs)
            return data

    def delete_sites_with_http_info(self, delete_site_dto, **kwargs):
        """
        删除站点
        ## 典型场景 ## 根据站点ID列表，删除对应的站点。 ## 接口功能 ## 删除站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_sites_with_http_info(delete_site_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeleteSiteDto delete_site_dto: 删除站点请求体。 (required)
        :return: DeleteSiteOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_site_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sites" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_site_dto' is set
        if ('delete_site_dto' not in params) or (params['delete_site_dto'] is None):
            raise ValueError("Missing the required parameter `delete_site_dto` when calling `delete_sites`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_site_dto' in params:
            body_params = params['delete_site_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/sites', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeleteSiteOut',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_sites(self, **kwargs):
        """
        查询站点
        ## 典型场景 ## 传入页面索引和页面长度，查询站点信息。 ## 接口功能 ## 查询站点列表。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_sites(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_index: 分页时，当前页面索引，值<=0时默认获取前20条数据。
        :param int page_size: 分页时，当前页面设备数据长度；pageIndex为空或<=0时，此参数默认20。
        :param str name: 站点名称模糊查询，支持精确和模糊匹配，不支持正则。
        :return: QuerySitesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_sites_with_http_info(**kwargs)
        else:
            (data) = self.query_sites_with_http_info(**kwargs)
            return data

    def query_sites_with_http_info(self, **kwargs):
        """
        查询站点
        ## 典型场景 ## 传入页面索引和页面长度，查询站点信息。 ## 接口功能 ## 查询站点列表。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_sites_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_index: 分页时，当前页面索引，值<=0时默认获取前20条数据。
        :param int page_size: 分页时，当前页面设备数据长度；pageIndex为空或<=0时，此参数默认20。
        :param str name: 站点名称模糊查询，支持精确和模糊匹配，不支持正则。
        :return: QuerySitesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_index', 'page_size', 'name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_sites" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_index' in params and params['page_index'] > 2147483647:
            raise ValueError("Invalid value for parameter `page_index` when calling `query_sites`, must be a value less than or equal to `2147483647`")
        if 'page_index' in params and params['page_index'] < 0:
            raise ValueError("Invalid value for parameter `page_index` when calling `query_sites`, must be a value greater than or equal to `0`")
        if 'page_size' in params and params['page_size'] > 100:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_sites`, must be a value less than or equal to `100`")
        if 'page_size' in params and params['page_size'] < 0:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_sites`, must be a value greater than or equal to `0`")
        if 'name' in params and len(params['name']) > 128:
            raise ValueError("Invalid value for parameter `name` when calling `query_sites`, length must be less than or equal to `128`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'name' in params:
            query_params.append(('name', params['name']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/sites', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QuerySitesOut',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_site(self, site_id, update_site_dto, **kwargs):
        """
        修改站点
        ## 典型场景 ## 根据站点ID，修改站点的名称和描述信息。 ## 接口功能 ## 修改站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_site(site_id, update_site_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param UpdateSitesDto update_site_dto: 修改站点请求体。 (required)
        :return: UpdateSitesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_site_with_http_info(site_id, update_site_dto, **kwargs)
        else:
            (data) = self.update_site_with_http_info(site_id, update_site_dto, **kwargs)
            return data

    def update_site_with_http_info(self, site_id, update_site_dto, **kwargs):
        """
        修改站点
        ## 典型场景 ## 根据站点ID，修改站点的名称和描述信息。 ## 接口功能 ## 修改站点。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_site_with_http_info(site_id, update_site_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param UpdateSitesDto update_site_dto: 修改站点请求体。 (required)
        :return: UpdateSitesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'update_site_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `update_site`")
        # verify the required parameter 'update_site_dto' is set
        if ('update_site_dto' not in params) or (params['update_site_dto'] is None):
            raise ValueError("Missing the required parameter `update_site_dto` when calling `update_site`")


        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_site_dto' in params:
            body_params = params['update_site_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/sites/{siteId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdateSitesOut',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
