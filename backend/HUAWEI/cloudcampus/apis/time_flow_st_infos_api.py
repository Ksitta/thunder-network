# coding: utf-8

"""
    用户流量信息查询

    控制器支持查询指定时间内流量和时长发生变化的用户流量信息分页查询北向接口。 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class TimeFlowStInfosApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def get_time_flow_st_info_list(self, **kwargs):
        """
        查询用户流量信息
        ## 典型场景 ##  提供查询指定时间内流量和时长发生变化的用户流量信息分页查询北向接口。 ## 接口功能 ##  根据租户ID查询最后一次计费时间在指定时间范围之内的用户流量信息。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_time_flow_st_info_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID，UUID格式。
        :param int page_index: 当前页数，默认为1。
        :param int page_size: 每页显示的最大数量，默认为20。
        :param str sort: 排序字段，目前只支持用户名排序。userName为正序，-userName为逆序。
        :param str user_name: 用户名，最大长度为64。
        :param str used_time: 已使用时长(分钟)大于等于当前条件值。
        :param str used_flow: 已使用流量(兆)大于等于当前条件值。
        :param str begin_time: 最后一次计费时间起始时间。
        :param str end_time: 最后一次计费时间截止时间。
        :return: TimeFlowStInfosOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_time_flow_st_info_list_with_http_info(**kwargs)
        else:
            (data) = self.get_time_flow_st_info_list_with_http_info(**kwargs)
            return data

    def get_time_flow_st_info_list_with_http_info(self, **kwargs):
        """
        查询用户流量信息
        ## 典型场景 ##  提供查询指定时间内流量和时长发生变化的用户流量信息分页查询北向接口。 ## 接口功能 ##  根据租户ID查询最后一次计费时间在指定时间范围之内的用户流量信息。 ## 接口约束 ##  该接口支持北向管理员访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_time_flow_st_info_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID，UUID格式。
        :param int page_index: 当前页数，默认为1。
        :param int page_size: 每页显示的最大数量，默认为20。
        :param str sort: 排序字段，目前只支持用户名排序。userName为正序，-userName为逆序。
        :param str user_name: 用户名，最大长度为64。
        :param str used_time: 已使用时长(分钟)大于等于当前条件值。
        :param str used_flow: 已使用流量(兆)大于等于当前条件值。
        :param str begin_time: 最后一次计费时间起始时间。
        :param str end_time: 最后一次计费时间截止时间。
        :return: TimeFlowStInfosOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'page_index', 'page_size', 'sort', 'user_name', 'used_time', 'used_flow', 'begin_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_time_flow_st_info_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_index' in params and params['page_index'] > 2147483647:
            raise ValueError("Invalid value for parameter `page_index` when calling `get_time_flow_st_info_list`, must be a value less than or equal to `2147483647`")
        if 'page_index' in params and params['page_index'] < 0:
            raise ValueError("Invalid value for parameter `page_index` when calling `get_time_flow_st_info_list`, must be a value greater than or equal to `0`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_time_flow_st_info_list`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 0:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_time_flow_st_info_list`, must be a value greater than or equal to `0`")
        if 'user_name' in params and len(params['user_name']) > 64:
            raise ValueError("Invalid value for parameter `user_name` when calling `get_time_flow_st_info_list`, length must be less than or equal to `64`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))
        if 'used_time' in params:
            query_params.append(('usedTime', params['used_time']))
        if 'used_flow' in params:
            query_params.append(('usedFlow', params['used_flow']))
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/accountservice/user/timeflowstinfos', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TimeFlowStInfosOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
