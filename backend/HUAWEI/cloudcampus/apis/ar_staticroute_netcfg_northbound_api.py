# coding: utf-8

"""
    路由器设备静态路由配置

    路由器设备静态路由配置第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class ArStaticrouteNetcfgNorthboundApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def create_device_ar_staticroute_config(self, device_id, device_ar_staticroute_info_dto, **kwargs):
        """
        创建路由器设备静态路由配置
        ## 典型场景 ##    提供创建路由器设备静态路由配置的接口。 ## 接口功能 ##    创建路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_device_ar_staticroute_config(device_id, device_ar_staticroute_info_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备标识，UUID格式。 (required)
        :param RouteInfo device_ar_staticroute_info_dto: 创建的路由器设备静态路由配置。 (required)
        :return: ArStaticrouteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_device_ar_staticroute_config_with_http_info(device_id, device_ar_staticroute_info_dto, **kwargs)
        else:
            (data) = self.create_device_ar_staticroute_config_with_http_info(device_id, device_ar_staticroute_info_dto, **kwargs)
            return data

    def create_device_ar_staticroute_config_with_http_info(self, device_id, device_ar_staticroute_info_dto, **kwargs):
        """
        创建路由器设备静态路由配置
        ## 典型场景 ##    提供创建路由器设备静态路由配置的接口。 ## 接口功能 ##    创建路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_device_ar_staticroute_config_with_http_info(device_id, device_ar_staticroute_info_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备标识，UUID格式。 (required)
        :param RouteInfo device_ar_staticroute_info_dto: 创建的路由器设备静态路由配置。 (required)
        :return: ArStaticrouteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'device_ar_staticroute_info_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_device_ar_staticroute_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `create_device_ar_staticroute_config`")
        # verify the required parameter 'device_ar_staticroute_info_dto' is set
        if ('device_ar_staticroute_info_dto' not in params) or (params['device_ar_staticroute_info_dto'] is None):
            raise ValueError("Missing the required parameter `device_ar_staticroute_info_dto` when calling `create_device_ar_staticroute_config`")

        if 'device_id' in params and len(params['device_id']) > 36:
            raise ValueError("Invalid value for parameter `device_id` when calling `create_device_ar_staticroute_config`, length must be less than or equal to `36`")
        if 'device_id' in params and len(params['device_id']) < 36:
            raise ValueError("Invalid value for parameter `device_id` when calling `create_device_ar_staticroute_config`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_ar_staticroute_info_dto' in params:
            body_params = params['device_ar_staticroute_info_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/arstaticroute/devices/{deviceId}/staticroute', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArStaticrouteResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_device_ar_staticroute_config(self, device_id, id, **kwargs):
        """
        删除路由器设备静态路由配置
        ## 典型场景 ##    提供删除路由器设备静态路由配置的接口。 ## 接口功能 ##    删除路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_device_ar_staticroute_config(device_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备标识，UUID格式。 (required)
        :param ArStaticrouteDeleteDto id: 要删除的路由器设备静态路由配置ID列表。 (required)
        :return: ArStaticrouteDeleteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_device_ar_staticroute_config_with_http_info(device_id, id, **kwargs)
        else:
            (data) = self.delete_device_ar_staticroute_config_with_http_info(device_id, id, **kwargs)
            return data

    def delete_device_ar_staticroute_config_with_http_info(self, device_id, id, **kwargs):
        """
        删除路由器设备静态路由配置
        ## 典型场景 ##    提供删除路由器设备静态路由配置的接口。 ## 接口功能 ##    删除路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_device_ar_staticroute_config_with_http_info(device_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备标识，UUID格式。 (required)
        :param ArStaticrouteDeleteDto id: 要删除的路由器设备静态路由配置ID列表。 (required)
        :return: ArStaticrouteDeleteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_device_ar_staticroute_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `delete_device_ar_staticroute_config`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_device_ar_staticroute_config`")

        if 'device_id' in params and len(params['device_id']) > 36:
            raise ValueError("Invalid value for parameter `device_id` when calling `delete_device_ar_staticroute_config`, length must be less than or equal to `36`")
        if 'device_id' in params and len(params['device_id']) < 36:
            raise ValueError("Invalid value for parameter `device_id` when calling `delete_device_ar_staticroute_config`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'id' in params:
            body_params = params['id']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/arstaticroute/devices/{deviceId}/staticroute/action/batch-delete', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArStaticrouteDeleteResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_device_ar_staticroute_config(self, device_id, page_size, **kwargs):
        """
        查询路由器设备静态路由配置
        ## 典型场景 ##    提供查询路由器设备静态路由配置的接口。 ## 接口功能 ##    查询路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_device_ar_staticroute_config(device_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备标识，UUID格式。 (required)
        :param int page_size: 每页显示记录数。 (required)
        :param int page_index: 页面索引。
        :return: GetArStaticrouteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_device_ar_staticroute_config_with_http_info(device_id, page_size, **kwargs)
        else:
            (data) = self.get_device_ar_staticroute_config_with_http_info(device_id, page_size, **kwargs)
            return data

    def get_device_ar_staticroute_config_with_http_info(self, device_id, page_size, **kwargs):
        """
        查询路由器设备静态路由配置
        ## 典型场景 ##    提供查询路由器设备静态路由配置的接口。 ## 接口功能 ##    查询路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_device_ar_staticroute_config_with_http_info(device_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备标识，UUID格式。 (required)
        :param int page_size: 每页显示记录数。 (required)
        :param int page_index: 页面索引。
        :return: GetArStaticrouteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'page_size', 'page_index']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_ar_staticroute_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_device_ar_staticroute_config`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_device_ar_staticroute_config`")

        if 'device_id' in params and len(params['device_id']) > 36:
            raise ValueError("Invalid value for parameter `device_id` when calling `get_device_ar_staticroute_config`, length must be less than or equal to `36`")
        if 'device_id' in params and len(params['device_id']) < 36:
            raise ValueError("Invalid value for parameter `device_id` when calling `get_device_ar_staticroute_config`, length must be greater than or equal to `36`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_device_ar_staticroute_config`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_device_ar_staticroute_config`, must be a value greater than or equal to `1`")
        if 'page_index' in params and params['page_index'] > 65535:
            raise ValueError("Invalid value for parameter `page_index` when calling `get_device_ar_staticroute_config`, must be a value less than or equal to `65535`")
        if 'page_index' in params and params['page_index'] < 1:
            raise ValueError("Invalid value for parameter `page_index` when calling `get_device_ar_staticroute_config`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/arstaticroute/devices/{deviceId}/staticroute', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetArStaticrouteResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_device_ar_staticroute_config(self, device_id, device_ar_staticroute_info_dto, **kwargs):
        """
        修改路由器设备静态路由配置
        ## 典型场景 ##    提供修改路由器设备静态路由配置的接口。 ## 接口功能 ##    修改路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_device_ar_staticroute_config(device_id, device_ar_staticroute_info_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备标识，UUID格式。 (required)
        :param DeviceArStaticrouteInfoDto device_ar_staticroute_info_dto: 修改的路由器设备静态路由配置。 (required)
        :return: ArStaticrouteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_device_ar_staticroute_config_with_http_info(device_id, device_ar_staticroute_info_dto, **kwargs)
        else:
            (data) = self.update_device_ar_staticroute_config_with_http_info(device_id, device_ar_staticroute_info_dto, **kwargs)
            return data

    def update_device_ar_staticroute_config_with_http_info(self, device_id, device_ar_staticroute_info_dto, **kwargs):
        """
        修改路由器设备静态路由配置
        ## 典型场景 ##    提供修改路由器设备静态路由配置的接口。 ## 接口功能 ##    修改路由器设备静态路由配置。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_device_ar_staticroute_config_with_http_info(device_id, device_ar_staticroute_info_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备标识，UUID格式。 (required)
        :param DeviceArStaticrouteInfoDto device_ar_staticroute_info_dto: 修改的路由器设备静态路由配置。 (required)
        :return: ArStaticrouteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'device_ar_staticroute_info_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_device_ar_staticroute_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `update_device_ar_staticroute_config`")
        # verify the required parameter 'device_ar_staticroute_info_dto' is set
        if ('device_ar_staticroute_info_dto' not in params) or (params['device_ar_staticroute_info_dto'] is None):
            raise ValueError("Missing the required parameter `device_ar_staticroute_info_dto` when calling `update_device_ar_staticroute_config`")

        if 'device_id' in params and len(params['device_id']) > 36:
            raise ValueError("Invalid value for parameter `device_id` when calling `update_device_ar_staticroute_config`, length must be less than or equal to `36`")
        if 'device_id' in params and len(params['device_id']) < 36:
            raise ValueError("Invalid value for parameter `device_id` when calling `update_device_ar_staticroute_config`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_ar_staticroute_info_dto' in params:
            body_params = params['device_ar_staticroute_info_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/arstaticroute/devices/{deviceId}/staticroute', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ArStaticrouteResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
