# coding: utf-8

"""
    时间模板管理

    时间模板第三方接口说明。 

    OpenAPI spec version: 1.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class TimeRangeTemplateNetcfgNorthboundApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def get_time_range_template(self, **kwargs):
        """
        查询时间段模板
        ## 典型场景 ##  提供查询时间段模板接口。 ## 接口功能 ##  查询时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_time_range_template(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: 模板名称。
        :return: TimeInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_time_range_template_with_http_info(**kwargs)
        else:
            (data) = self.get_time_range_template_with_http_info(**kwargs)
            return data

    def get_time_range_template_with_http_info(self, **kwargs):
        """
        查询时间段模板
        ## 典型场景 ##  提供查询时间段模板接口。 ## 接口功能 ##  查询时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_time_range_template_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: 模板名称。
        :return: TimeInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_time_range_template" % key
                )
            params[key] = val
        del params['kwargs']

        if 'name' in params and len(params['name']) > 32:
            raise ValueError("Invalid value for parameter `name` when calling `get_time_range_template`, length must be less than or equal to `32`")
        if 'name' in params and len(params['name']) < 1:
            raise ValueError("Invalid value for parameter `name` when calling `get_time_range_template`, length must be greater than or equal to `1`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/networkconfig/timetemplate/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TimeInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def modify_time_range_template(self, modify_dto, **kwargs):
        """
        修改时间段模板
        ## 典型场景 ##  提供修改时间段模板接口。 ## 接口功能 ##  修改时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.modify_time_range_template(modify_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TimeTemplateDto modify_dto: 修改时间段模板入参。 (required)
        :return: TemplateResultDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.modify_time_range_template_with_http_info(modify_dto, **kwargs)
        else:
            (data) = self.modify_time_range_template_with_http_info(modify_dto, **kwargs)
            return data

    def modify_time_range_template_with_http_info(self, modify_dto, **kwargs):
        """
        修改时间段模板
        ## 典型场景 ##  提供修改时间段模板接口。 ## 接口功能 ##  修改时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.modify_time_range_template_with_http_info(modify_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TimeTemplateDto modify_dto: 修改时间段模板入参。 (required)
        :return: TemplateResultDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modify_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_time_range_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modify_dto' is set
        if ('modify_dto' not in params) or (params['modify_dto'] is None):
            raise ValueError("Missing the required parameter `modify_dto` when calling `modify_time_range_template`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'modify_dto' in params:
            body_params = params['modify_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/networkconfig/timetemplate/', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TemplateResultDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def time_rangetemplate_post(self, time_template, **kwargs):
        """
        新增时间段模板
        ## 典型场景 ##  提供新增时间段模板接口。 ## 接口功能 ##  新增时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.time_rangetemplate_post(time_template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AddTemplateDto time_template: 增加时间段模板入参。 (required)
        :return: TemplateResultDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.time_rangetemplate_post_with_http_info(time_template, **kwargs)
        else:
            (data) = self.time_rangetemplate_post_with_http_info(time_template, **kwargs)
            return data

    def time_rangetemplate_post_with_http_info(self, time_template, **kwargs):
        """
        新增时间段模板
        ## 典型场景 ##  提供新增时间段模板接口。 ## 接口功能 ##  新增时间段模板。  ## 接口约束 ##  该接口支持北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.time_rangetemplate_post_with_http_info(time_template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AddTemplateDto time_template: 增加时间段模板入参。 (required)
        :return: TemplateResultDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['time_template']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method time_rangetemplate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'time_template' is set
        if ('time_template' not in params) or (params['time_template'] is None):
            raise ValueError("Missing the required parameter `time_template` when calling `time_rangetemplate_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'time_template' in params:
            body_params = params['time_template']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/networkconfig/timetemplate/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TemplateResultDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
