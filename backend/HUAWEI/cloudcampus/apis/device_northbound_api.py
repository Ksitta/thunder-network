# coding: utf-8

"""
    设备基本信息管理

    设备相关操作接口。 场景：对设备增删改查操作的第三方接口。

    OpenAPI spec version: 1.6.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class DeviceNorthboundApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def batch_modify_devices(self, batch_modify_device_dto, **kwargs):
        """
        批量修改设备
        ## 典型场景 ## 批量修改设备的名称、站点等信息。 ## 接口功能 ##   批量修改设备。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.batch_modify_devices(batch_modify_device_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BatchModifyDeviceDto batch_modify_device_dto: 批量修改设备入参模型。 (required)
        :return: BatchModifyDeviceBean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.batch_modify_devices_with_http_info(batch_modify_device_dto, **kwargs)
        else:
            (data) = self.batch_modify_devices_with_http_info(batch_modify_device_dto, **kwargs)
            return data

    def batch_modify_devices_with_http_info(self, batch_modify_device_dto, **kwargs):
        """
        批量修改设备
        ## 典型场景 ## 批量修改设备的名称、站点等信息。 ## 接口功能 ##   批量修改设备。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.batch_modify_devices_with_http_info(batch_modify_device_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BatchModifyDeviceDto batch_modify_device_dto: 批量修改设备入参模型。 (required)
        :return: BatchModifyDeviceBean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['batch_modify_device_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_modify_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'batch_modify_device_dto' is set
        if ('batch_modify_device_dto' not in params) or (params['batch_modify_device_dto'] is None):
            raise ValueError("Missing the required parameter `batch_modify_device_dto` when calling `batch_modify_devices`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_modify_device_dto' in params:
            body_params = params['batch_modify_device_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/devices', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BatchModifyDeviceBean',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_devices(self, create_device_dto, **kwargs):
        """
        创建设备
        ## 典型场景 ##  根据设备ESN、设备名称、设备描述、站点ID等进行设备创建。 ## 接口功能 ##  创建设备。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_devices(create_device_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateDeviceDto create_device_dto: 创建设备入参信息。 (required)
        :return: CreateDeviceBean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_devices_with_http_info(create_device_dto, **kwargs)
        else:
            (data) = self.create_devices_with_http_info(create_device_dto, **kwargs)
            return data

    def create_devices_with_http_info(self, create_device_dto, **kwargs):
        """
        创建设备
        ## 典型场景 ##  根据设备ESN、设备名称、设备描述、站点ID等进行设备创建。 ## 接口功能 ##  创建设备。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_devices_with_http_info(create_device_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateDeviceDto create_device_dto: 创建设备入参信息。 (required)
        :return: CreateDeviceBean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_device_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_device_dto' is set
        if ('create_device_dto' not in params) or (params['create_device_dto'] is None):
            raise ValueError("Missing the required parameter `create_device_dto` when calling `create_devices`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_device_dto' in params:
            body_params = params['create_device_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/devices', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreateDeviceBean',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_devices(self, device_ids, **kwargs):
        """
        删除设备
        ## 典型场景 ##  根据设备ID删除设备。 ## 接口功能 ##  删除设备。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_devices(device_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeleteDeviceDto device_ids: 设备ID列表。 (required)
        :return: DeleteDeviceBean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_devices_with_http_info(device_ids, **kwargs)
        else:
            (data) = self.delete_devices_with_http_info(device_ids, **kwargs)
            return data

    def delete_devices_with_http_info(self, device_ids, **kwargs):
        """
        删除设备
        ## 典型场景 ##  根据设备ID删除设备。 ## 接口功能 ##  删除设备。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_devices_with_http_info(device_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeleteDeviceDto device_ids: 设备ID列表。 (required)
        :return: DeleteDeviceBean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_ids' is set
        if ('device_ids' not in params) or (params['device_ids'] is None):
            raise ValueError("Missing the required parameter `device_ids` when calling `delete_devices`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_ids' in params:
            body_params = params['device_ids']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/devices', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeleteDeviceBean',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_device_models(self, **kwargs):
        """
        查询设备款型
        ## 典型场景 ## 在控制器上查询设备款型信息时使用。 ## 接口功能 ## 查询设备款型信息。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_device_models(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: DeviceModelEntityList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_device_models_with_http_info(**kwargs)
        else:
            (data) = self.get_device_models_with_http_info(**kwargs)
            return data

    def get_device_models_with_http_info(self, **kwargs):
        """
        查询设备款型
        ## 典型场景 ## 在控制器上查询设备款型信息时使用。 ## 接口功能 ## 查询设备款型信息。 ## 接口约束 ## 该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_device_models_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: DeviceModelEntityList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_models" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/device-models', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceModelEntityList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_site_device(self, **kwargs):
        """
        查询设备
        ## 典型场景 ##   查询设备信息。 ## 接口功能 ##   查询设备信息（真实设备和虚拟设备），包括所属站点、设备类型、设备名称、设备状态等拓扑信息，支持基于站点查询，支持基于字段排序。 ## 接口约束 ##   1、该接口支持租户下北向接口管理访问，必须在用户会话建立后使用;   2、若pageSize和pageIndex参数不传或者为非法参数，则默认按照pageSize=1000，pageIndex=1返回查询结果。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_site_device(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_index: 分页的序号。
        :param int page_size: 分页的大小。
        :param str ne_type: 设备类型，类型可以是'AR'，'AP'，'LSW'，'FW'，如果多个类型用逗号分隔（如：AR，AP）。不推荐使用，请尽量以deviceType为主。
        :param str device_type: 设备类型，类型可以是'AR'，'AP'，'LSW'，'FW'，如果多个类型用逗号分隔（如：AR，AP）。如果跟neType同时出现，以deviceType为主。
        :param str site_id: 站点ID，查询单个站点下设备列表，为空查询所有设备。
        :param str sort: 排序字段，支持name，esn，deviceModel，deviceType，status，mac，ip，neType，version，description，createTime，registerTime，modifyTime。
        :param str name: 设备名称模糊查询，支持精确和模糊匹配，不支持正则。
        :return: DeviceResponseBean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_site_device_with_http_info(**kwargs)
        else:
            (data) = self.get_site_device_with_http_info(**kwargs)
            return data

    def get_site_device_with_http_info(self, **kwargs):
        """
        查询设备
        ## 典型场景 ##   查询设备信息。 ## 接口功能 ##   查询设备信息（真实设备和虚拟设备），包括所属站点、设备类型、设备名称、设备状态等拓扑信息，支持基于站点查询，支持基于字段排序。 ## 接口约束 ##   1、该接口支持租户下北向接口管理访问，必须在用户会话建立后使用;   2、若pageSize和pageIndex参数不传或者为非法参数，则默认按照pageSize=1000，pageIndex=1返回查询结果。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_site_device_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_index: 分页的序号。
        :param int page_size: 分页的大小。
        :param str ne_type: 设备类型，类型可以是'AR'，'AP'，'LSW'，'FW'，如果多个类型用逗号分隔（如：AR，AP）。不推荐使用，请尽量以deviceType为主。
        :param str device_type: 设备类型，类型可以是'AR'，'AP'，'LSW'，'FW'，如果多个类型用逗号分隔（如：AR，AP）。如果跟neType同时出现，以deviceType为主。
        :param str site_id: 站点ID，查询单个站点下设备列表，为空查询所有设备。
        :param str sort: 排序字段，支持name，esn，deviceModel，deviceType，status，mac，ip，neType，version，description，createTime，registerTime，modifyTime。
        :param str name: 设备名称模糊查询，支持精确和模糊匹配，不支持正则。
        :return: DeviceResponseBean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_index', 'page_size', 'ne_type', 'device_type', 'site_id', 'sort', 'name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_device" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_index' in params and params['page_index'] > 2147483647:
            raise ValueError("Invalid value for parameter `page_index` when calling `get_site_device`, must be a value less than or equal to `2147483647`")
        if 'page_index' in params and params['page_index'] < 0:
            raise ValueError("Invalid value for parameter `page_index` when calling `get_site_device`, must be a value greater than or equal to `0`")
        if 'page_size' in params and params['page_size'] > 1000:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_site_device`, must be a value less than or equal to `1000`")
        if 'page_size' in params and params['page_size'] < 0:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_site_device`, must be a value greater than or equal to `0`")
        if 'ne_type' in params and len(params['ne_type']) > 128:
            raise ValueError("Invalid value for parameter `ne_type` when calling `get_site_device`, length must be less than or equal to `128`")
        if 'device_type' in params and len(params['device_type']) > 128:
            raise ValueError("Invalid value for parameter `device_type` when calling `get_site_device`, length must be less than or equal to `128`")
        if 'site_id' in params and len(params['site_id']) > 128:
            raise ValueError("Invalid value for parameter `site_id` when calling `get_site_device`, length must be less than or equal to `128`")
        if 'sort' in params and len(params['sort']) > 128:
            raise ValueError("Invalid value for parameter `sort` when calling `get_site_device`, length must be less than or equal to `128`")
        if 'name' in params and len(params['name']) > 128:
            raise ValueError("Invalid value for parameter `name` when calling `get_site_device`, length must be less than or equal to `128`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'ne_type' in params:
            query_params.append(('neType', params['ne_type']))
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'name' in params:
            query_params.append(('name', params['name']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/devices', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceResponseBean',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def modify_devices(self, device_id, modify_device_dto, **kwargs):
        """
        修改设备
        ## 典型场景 ##  修改设备基本信息时使用。 ## 接口功能 ##  修改设备基本信息。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.modify_devices(device_id, modify_device_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID。 (required)
        :param ModifyDeviceDto modify_device_dto: 修改设备入参模型。 (required)
        :return: ModifyDeviceBean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.modify_devices_with_http_info(device_id, modify_device_dto, **kwargs)
        else:
            (data) = self.modify_devices_with_http_info(device_id, modify_device_dto, **kwargs)
            return data

    def modify_devices_with_http_info(self, device_id, modify_device_dto, **kwargs):
        """
        修改设备
        ## 典型场景 ##  修改设备基本信息时使用。 ## 接口功能 ##  修改设备基本信息。 ## 接口约束 ##  该接口必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.modify_devices_with_http_info(device_id, modify_device_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID。 (required)
        :param ModifyDeviceDto modify_device_dto: 修改设备入参模型。 (required)
        :return: ModifyDeviceBean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'modify_device_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `modify_devices`")
        # verify the required parameter 'modify_device_dto' is set
        if ('modify_device_dto' not in params) or (params['modify_device_dto'] is None):
            raise ValueError("Missing the required parameter `modify_device_dto` when calling `modify_devices`")

        if 'device_id' in params and len(params['device_id']) > 64:
            raise ValueError("Invalid value for parameter `device_id` when calling `modify_devices`, length must be less than or equal to `64`")
        if 'device_id' in params and len(params['device_id']) < 0:
            raise ValueError("Invalid value for parameter `device_id` when calling `modify_devices`, length must be greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'modify_device_dto' in params:
            body_params = params['modify_device_dto']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/devices/{deviceId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ModifyDeviceBean',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def replace_device(self, replace_device_dto, **kwargs):
        """
        替换设备
        ## 操作场景 ##  设备替换。 ## 接口功能 ##  设备替换。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_device(replace_device_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ReplaceDeviceDto replace_device_dto: 设备替换入参模型。 (required)
        :return: CommonResponseBean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_device_with_http_info(replace_device_dto, **kwargs)
        else:
            (data) = self.replace_device_with_http_info(replace_device_dto, **kwargs)
            return data

    def replace_device_with_http_info(self, replace_device_dto, **kwargs):
        """
        替换设备
        ## 操作场景 ##  设备替换。 ## 接口功能 ##  设备替换。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_device_with_http_info(replace_device_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ReplaceDeviceDto replace_device_dto: 设备替换入参模型。 (required)
        :return: CommonResponseBean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['replace_device_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'replace_device_dto' is set
        if ('replace_device_dto' not in params) or (params['replace_device_dto'] is None):
            raise ValueError("Missing the required parameter `replace_device_dto` when calling `replace_device`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'replace_device_dto' in params:
            body_params = params['replace_device_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/devices/replace', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommonResponseBean',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def replace_original_device(self, replace_original_device_dto, **kwargs):
        """
        替换设备款型
        ## 典型场景 ##  设备款型替换。 ## 接口功能 ##  支持替换款型，支持无ESN替换 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_original_device(replace_original_device_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ReplaceOriginalDeviceDto replace_original_device_dto: 设备替换入参模型。 (required)
        :return: CommonResponseBean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_original_device_with_http_info(replace_original_device_dto, **kwargs)
        else:
            (data) = self.replace_original_device_with_http_info(replace_original_device_dto, **kwargs)
            return data

    def replace_original_device_with_http_info(self, replace_original_device_dto, **kwargs):
        """
        替换设备款型
        ## 典型场景 ##  设备款型替换。 ## 接口功能 ##  支持替换款型，支持无ESN替换 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_original_device_with_http_info(replace_original_device_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ReplaceOriginalDeviceDto replace_original_device_dto: 设备替换入参模型。 (required)
        :return: CommonResponseBean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['replace_original_device_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_original_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'replace_original_device_dto' is set
        if ('replace_original_device_dto' not in params) or (params['replace_original_device_dto'] is None):
            raise ValueError("Missing the required parameter `replace_original_device_dto` when calling `replace_original_device`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'replace_original_device_dto' in params:
            body_params = params['replace_original_device_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/devices/replacement', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommonResponseBean',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
