# coding: utf-8

"""
    TACACS模板管理

    TACACS模板配置北向接口，主要特性：  * 创建tacacs模板。 * 修改tacacs模板。 * 查询tacacs模板。 * 删除tacacs模板。 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class NetWorkServiceTacacsTmplApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def create_tacacs_tmpl(self, body, **kwargs):
        """
        创建TACACS模板
        ## 典型场景 ##    创建Tacacs模板。 ## 接口功能 ##   Tacacs模板创建接口（包含Tacacs模板对应的名称、描述、认证服务器地址、端口等）。 ## 接口约束 ##    该接口基于租户下；优先配置主服务器地址/端口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_tacacs_tmpl(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateTacacsTmplInfoDto body: tacacs服务器模板信息。 (required)
        :return: CreateTacacsTmplResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_tacacs_tmpl_with_http_info(body, **kwargs)
        else:
            (data) = self.create_tacacs_tmpl_with_http_info(body, **kwargs)
            return data

    def create_tacacs_tmpl_with_http_info(self, body, **kwargs):
        """
        创建TACACS模板
        ## 典型场景 ##    创建Tacacs模板。 ## 接口功能 ##   Tacacs模板创建接口（包含Tacacs模板对应的名称、描述、认证服务器地址、端口等）。 ## 接口约束 ##    该接口基于租户下；优先配置主服务器地址/端口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_tacacs_tmpl_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateTacacsTmplInfoDto body: tacacs服务器模板信息。 (required)
        :return: CreateTacacsTmplResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_tacacs_tmpl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_tacacs_tmpl`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/profile/tacacs/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreateTacacsTmplResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_tacacs_tmpl(self, body, **kwargs):
        """
        删除TACACS模板
        ## 典型场景 ##    删除配置模板列表信息。 ## 接口功能 ##   Tacacs模板删除接口（包含Tacacs模板对应的名称、描述、认证服务器地址、端口等）。 ## 接口约束 ##    该接口基于租户下；如果模板被引用不可删除。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_tacacs_tmpl(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeleteTacacsTmplReuest body: tacacs服务器模板id列表。 (required)
        :return: DeleteTacacsTmplResponses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_tacacs_tmpl_with_http_info(body, **kwargs)
        else:
            (data) = self.delete_tacacs_tmpl_with_http_info(body, **kwargs)
            return data

    def delete_tacacs_tmpl_with_http_info(self, body, **kwargs):
        """
        删除TACACS模板
        ## 典型场景 ##    删除配置模板列表信息。 ## 接口功能 ##   Tacacs模板删除接口（包含Tacacs模板对应的名称、描述、认证服务器地址、端口等）。 ## 接口约束 ##    该接口基于租户下；如果模板被引用不可删除。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_tacacs_tmpl_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeleteTacacsTmplReuest body: tacacs服务器模板id列表。 (required)
        :return: DeleteTacacsTmplResponses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tacacs_tmpl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_tacacs_tmpl`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/profile/tacacs/batch-delete', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeleteTacacsTmplResponses',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edit_tacacs_tmpl(self, id, body, **kwargs):
        """
        修改TACACS模板
        ## 典型场景 ##    修改Tacacs模板。 ## 接口功能 ##   Tacacs模板修改接口（包含Tacacs模板对应的名称、描述、认证服务器地址、端口等）。 ## 接口约束 ##    该接口基于租户下；优先配置主服务器地址/端口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_tacacs_tmpl(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: tacacs服务器模板Id。 (required)
        :param UpdateTacacsTmplInfoDto body: tacacs服务器模板body。 (required)
        :return: EditTacacsTmplResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edit_tacacs_tmpl_with_http_info(id, body, **kwargs)
        else:
            (data) = self.edit_tacacs_tmpl_with_http_info(id, body, **kwargs)
            return data

    def edit_tacacs_tmpl_with_http_info(self, id, body, **kwargs):
        """
        修改TACACS模板
        ## 典型场景 ##    修改Tacacs模板。 ## 接口功能 ##   Tacacs模板修改接口（包含Tacacs模板对应的名称、描述、认证服务器地址、端口等）。 ## 接口约束 ##    该接口基于租户下；优先配置主服务器地址/端口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_tacacs_tmpl_with_http_info(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: tacacs服务器模板Id。 (required)
        :param UpdateTacacsTmplInfoDto body: tacacs服务器模板body。 (required)
        :return: EditTacacsTmplResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_tacacs_tmpl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `edit_tacacs_tmpl`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_tacacs_tmpl`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/profile/tacacs/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EditTacacsTmplResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tacacs_tmpl(self, **kwargs):
        """
        查询TACACS模板
        ## 典型场景 ##    查询配置模板列表信息。 ## 接口功能 ##   Tacacs模板查询接口（包含Tacacs模板对应的名称、描述、认证服务器地址、端口等）。 ## 接口约束 ##    该接口基于租户下；优先配置主服务器地址/端口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tacacs_tmpl(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: GetTacacsTmplResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tacacs_tmpl_with_http_info(**kwargs)
        else:
            (data) = self.get_tacacs_tmpl_with_http_info(**kwargs)
            return data

    def get_tacacs_tmpl_with_http_info(self, **kwargs):
        """
        查询TACACS模板
        ## 典型场景 ##    查询配置模板列表信息。 ## 接口功能 ##   Tacacs模板查询接口（包含Tacacs模板对应的名称、描述、认证服务器地址、端口等）。 ## 接口约束 ##    该接口基于租户下；优先配置主服务器地址/端口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tacacs_tmpl_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: GetTacacsTmplResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tacacs_tmpl" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/profile/tacacs/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetTacacsTmplResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
