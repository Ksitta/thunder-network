# coding: utf-8

"""
    设备上报日志记录查询

    查询设备上报日志。

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class LogManagerServiceNorthboundApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def query_log_data(self, page_size, site_id, begin_time, end_time, **kwargs):
        """
        查询设备上报日志记录
        ## 典型场景 ##   查询设备上报日志记录。 ## 接口功能 ##   查询设备上报日志记录。 ## 接口约束 ##   只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_log_data(page_size, site_id, begin_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_size: 当页大小。 (required)
        :param str site_id: 站点ID，UUID格式。 (required)
        :param int begin_time: 起始格林威治时间，起始与结束时间不可大于5天。 (required)
        :param int end_time: 结束时间格林威治时间，起始与结束时间不可大于5天。 (required)
        :param str start_query_row_key: 起始rowkey，首次查询可输入空值来查询当页数据，翻页查询时输入的值根据前一次返回值中的nextRowkey填入。
        :param str scene_name: 场景名称。取值范围：不填表示全部场景。 1、Station login and logout：终端上下线。 2、Login and logout of cloud managed device：云盒上下线。 3、Device operation：设备操作。 4、Wireless radio：无线射频。 5、Hardware fault：硬件故障。 
        :param str device_mac: 设备MAC地址，格式必须是xx-xx-xx-xx-xx-xx，支持大小写模糊。
        :param str station_mac: 终端MAC地址，格式必须是xx-xx-xx-xx-xx-xx，支持大小写模糊。 入参stationMac有值时，仅查询终端上下线场景范围内的日志。 
        :return: QueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_log_data_with_http_info(page_size, site_id, begin_time, end_time, **kwargs)
        else:
            (data) = self.query_log_data_with_http_info(page_size, site_id, begin_time, end_time, **kwargs)
            return data

    def query_log_data_with_http_info(self, page_size, site_id, begin_time, end_time, **kwargs):
        """
        查询设备上报日志记录
        ## 典型场景 ##   查询设备上报日志记录。 ## 接口功能 ##   查询设备上报日志记录。 ## 接口约束 ##   只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_log_data_with_http_info(page_size, site_id, begin_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_size: 当页大小。 (required)
        :param str site_id: 站点ID，UUID格式。 (required)
        :param int begin_time: 起始格林威治时间，起始与结束时间不可大于5天。 (required)
        :param int end_time: 结束时间格林威治时间，起始与结束时间不可大于5天。 (required)
        :param str start_query_row_key: 起始rowkey，首次查询可输入空值来查询当页数据，翻页查询时输入的值根据前一次返回值中的nextRowkey填入。
        :param str scene_name: 场景名称。取值范围：不填表示全部场景。 1、Station login and logout：终端上下线。 2、Login and logout of cloud managed device：云盒上下线。 3、Device operation：设备操作。 4、Wireless radio：无线射频。 5、Hardware fault：硬件故障。 
        :param str device_mac: 设备MAC地址，格式必须是xx-xx-xx-xx-xx-xx，支持大小写模糊。
        :param str station_mac: 终端MAC地址，格式必须是xx-xx-xx-xx-xx-xx，支持大小写模糊。 入参stationMac有值时，仅查询终端上下线场景范围内的日志。 
        :return: QueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'site_id', 'begin_time', 'end_time', 'start_query_row_key', 'scene_name', 'device_mac', 'station_mac']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_log_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `query_log_data`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `query_log_data`")
        # verify the required parameter 'begin_time' is set
        if ('begin_time' not in params) or (params['begin_time'] is None):
            raise ValueError("Missing the required parameter `begin_time` when calling `query_log_data`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `query_log_data`")

        if 'page_size' in params and params['page_size'] > 200:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_log_data`, must be a value less than or equal to `200`")
        if 'page_size' in params and params['page_size'] < 1:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_log_data`, must be a value greater than or equal to `1`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'site_id' in params:
            query_params.append(('siteId', params['site_id']))
        if 'start_query_row_key' in params:
            query_params.append(('startQueryRowKey', params['start_query_row_key']))
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))
        if 'scene_name' in params:
            query_params.append(('sceneName', params['scene_name']))
        if 'device_mac' in params:
            query_params.append(('deviceMac', params['device_mac']))
        if 'station_mac' in params:
            query_params.append(('stationMac', params['station_mac']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/devicelog', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
