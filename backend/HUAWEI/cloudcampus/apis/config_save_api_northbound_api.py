# coding: utf-8

"""
    配置保存

    配置保存接口说明。 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class ConfigSaveApiNorthboundApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def config_save(self, input, **kwargs):
        """
        保存配置
        ## 典型场景 ##   提供配置保存接口。<br> ## 接口功能 ##    配置保存。<br> ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。<br> 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.config_save(input, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigSaveDto input: 配置保存入参。 (required)
        :return: CommonDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.config_save_with_http_info(input, **kwargs)
        else:
            (data) = self.config_save_with_http_info(input, **kwargs)
            return data

    def config_save_with_http_info(self, input, **kwargs):
        """
        保存配置
        ## 典型场景 ##   提供配置保存接口。<br> ## 接口功能 ##    配置保存。<br> ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。<br> 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.config_save_with_http_info(input, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigSaveDto input: 配置保存入参。 (required)
        :return: CommonDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['input']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_save" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'input' is set
        if ('input' not in params) or (params['input'] is None):
            raise ValueError("Missing the required parameter `input` when calling `config_save`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'input' in params:
            body_params = params['input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/config/configsave', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CommonDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_config_save(self, site_id, **kwargs):
        """
        查询保存结果
        ## 典型场景 ##   提供查询配置保存接口。<br> ## 接口功能 ##    查询配置保存。<br>  ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。<br> 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_config_save(site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID，UUID格式。 (required)
        :param int page_index: 分页查询，起始值。
        :param int page_size: 分页查询，每页数量。
        :param list[str] ids: 设备ID列表。调用示例：GET /configsave/d623ead6-a2cc-4c3c-9039-dcc8fa898a11?ids=deviceId1&ids=deviceId2&ids=deviceId3。
        :return: ConfigSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_config_save_with_http_info(site_id, **kwargs)
        else:
            (data) = self.query_config_save_with_http_info(site_id, **kwargs)
            return data

    def query_config_save_with_http_info(self, site_id, **kwargs):
        """
        查询保存结果
        ## 典型场景 ##   提供查询配置保存接口。<br> ## 接口功能 ##    查询配置保存。<br>  ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。<br> 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_config_save_with_http_info(site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID，UUID格式。 (required)
        :param int page_index: 分页查询，起始值。
        :param int page_size: 分页查询，每页数量。
        :param list[str] ids: 设备ID列表。调用示例：GET /configsave/d623ead6-a2cc-4c3c-9039-dcc8fa898a11?ids=deviceId1&ids=deviceId2&ids=deviceId3。
        :return: ConfigSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'page_index', 'page_size', 'ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_config_save" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `query_config_save`")

        if 'page_index' in params and params['page_index'] > 100:
            raise ValueError("Invalid value for parameter `page_index` when calling `query_config_save`, must be a value less than or equal to `100`")
        if 'page_index' in params and params['page_index'] < 0:
            raise ValueError("Invalid value for parameter `page_index` when calling `query_config_save`, must be a value greater than or equal to `0`")
        if 'page_size' in params and params['page_size'] > 100:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_config_save`, must be a value less than or equal to `100`")
        if 'page_size' in params and params['page_size'] < 0:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_config_save`, must be a value greater than or equal to `0`")
        if 'ids' in params and len(params['ids']) > 20:
            raise ValueError("Invalid value for parameter `ids` when calling `query_config_save`, number of items must be less than or equal to `20`")
        if 'ids' in params and len(params['ids']) < 0:
            raise ValueError("Invalid value for parameter `ids` when calling `query_config_save`, number of items must be greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'ids' in params:
            query_params.append(('ids', params['ids']))
            collection_formats['ids'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/config/configsave/{siteId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigSaveResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
