# coding: utf-8

"""
    License管理

    公有云license管理接口。 场景：对租户license操作的第三方接口。 

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class LicenseServiceApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def import_active_code(self, id, import_active_code_dto, **kwargs):
        """
        导入激活码
        ## 典型场景 ##  用户为license导入激活码时使用。 ## 接口功能 ##  给license导入激活码，可以选择延期或者扩容方式，默认选择延期方式导入。 ## 接口约束 ##  该接口必须在用户会话建立后使用，本接口响应时间较长，最长300秒。本接口支持单次导入激活码数量上限为10个。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.import_active_code(id, import_active_code_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: license的ID。 (required)
        :param ImportActiveCodeDto import_active_code_dto: 导入激活码请求体。 (required)
        :return: ImportActiveCodeOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.import_active_code_with_http_info(id, import_active_code_dto, **kwargs)
        else:
            (data) = self.import_active_code_with_http_info(id, import_active_code_dto, **kwargs)
            return data

    def import_active_code_with_http_info(self, id, import_active_code_dto, **kwargs):
        """
        导入激活码
        ## 典型场景 ##  用户为license导入激活码时使用。 ## 接口功能 ##  给license导入激活码，可以选择延期或者扩容方式，默认选择延期方式导入。 ## 接口约束 ##  该接口必须在用户会话建立后使用，本接口响应时间较长，最长300秒。本接口支持单次导入激活码数量上限为10个。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.import_active_code_with_http_info(id, import_active_code_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: license的ID。 (required)
        :param ImportActiveCodeDto import_active_code_dto: 导入激活码请求体。 (required)
        :return: ImportActiveCodeOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'import_active_code_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_active_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `import_active_code`")
        # verify the required parameter 'import_active_code_dto' is set
        if ('import_active_code_dto' not in params) or (params['import_active_code_dto'] is None):
            raise ValueError("Missing the required parameter `import_active_code_dto` when calling `import_active_code`")

        if 'id' in params and len(params['id']) > 36:
            raise ValueError("Invalid value for parameter `id` when calling `import_active_code`, length must be less than or equal to `36`")
        if 'id' in params and len(params['id']) < 36:
            raise ValueError("Invalid value for parameter `id` when calling `import_active_code`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'import_active_code_dto' in params:
            body_params = params['import_active_code_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v3/license/package/activecode/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ImportActiveCodeOut',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
