# coding: utf-8

"""
    链路管理

    链路管理北向接口 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class NotificateServiceApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def cancel_it_notificate_message(self, openid, system_id, **kwargs):
        """
        取消订阅IT设备链路变更通知
        ## 典型场景 ##   需要取消IT设备链路变更通知时使用。 ## 接口功能 ##   删除IT设备链路变更通知，IT设备链路发生变更时，不再发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_it_notificate_message(openid, system_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str openid: 会话标识，用于Open API的鉴权。 (required)
        :param str system_id: 第三方系统标识（可为IP地址） (required)
        :param str desc: 第三方系统描述
        :return: SubscribeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cancel_it_notificate_message_with_http_info(openid, system_id, **kwargs)
        else:
            (data) = self.cancel_it_notificate_message_with_http_info(openid, system_id, **kwargs)
            return data

    def cancel_it_notificate_message_with_http_info(self, openid, system_id, **kwargs):
        """
        取消订阅IT设备链路变更通知
        ## 典型场景 ##   需要取消IT设备链路变更通知时使用。 ## 接口功能 ##   删除IT设备链路变更通知，IT设备链路发生变更时，不再发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_it_notificate_message_with_http_info(openid, system_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str openid: 会话标识，用于Open API的鉴权。 (required)
        :param str system_id: 第三方系统标识（可为IP地址） (required)
        :param str desc: 第三方系统描述
        :return: SubscribeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['openid', 'system_id', 'desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_it_notificate_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'openid' is set
        if ('openid' not in params) or (params['openid'] is None):
            raise ValueError("Missing the required parameter `openid` when calling `cancel_it_notificate_message`")
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params) or (params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `cancel_it_notificate_message`")

        if 'system_id' in params and len(params['system_id']) > 1024:
            raise ValueError("Invalid value for parameter `system_id` when calling `cancel_it_notificate_message`, length must be less than or equal to `1024`")
        if 'system_id' in params and len(params['system_id']) < 1:
            raise ValueError("Invalid value for parameter `system_id` when calling `cancel_it_notificate_message`, length must be greater than or equal to `1`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'system_id' in params:
            query_params.append(('systemID', params['system_id']))
        if 'desc' in params:
            query_params.append(('desc', params['desc']))

        header_params = {}
        if 'openid' in params:
            header_params['openid'] = params['openid']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/openapi/notification/it/link', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SubscribeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cancel_network_notificate_message(self, openid, system_id, **kwargs):
        """
        取消订阅网络链路变更通知
        ## 典型场景 ##   需要取消网络链路变更通知时使用。 ## 接口功能 ##   删除网络链路变更通知，网络链路发生变更时，不再发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_network_notificate_message(openid, system_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str openid: 会话标识，用于Open API的鉴权。 (required)
        :param str system_id: 第三方系统标识（可为IP地址） (required)
        :param str desc: 第三方系统描述
        :return: SubscribeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cancel_network_notificate_message_with_http_info(openid, system_id, **kwargs)
        else:
            (data) = self.cancel_network_notificate_message_with_http_info(openid, system_id, **kwargs)
            return data

    def cancel_network_notificate_message_with_http_info(self, openid, system_id, **kwargs):
        """
        取消订阅网络链路变更通知
        ## 典型场景 ##   需要取消网络链路变更通知时使用。 ## 接口功能 ##   删除网络链路变更通知，网络链路发生变更时，不再发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_network_notificate_message_with_http_info(openid, system_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str openid: 会话标识，用于Open API的鉴权。 (required)
        :param str system_id: 第三方系统标识（可为IP地址） (required)
        :param str desc: 第三方系统描述
        :return: SubscribeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['openid', 'system_id', 'desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_network_notificate_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'openid' is set
        if ('openid' not in params) or (params['openid'] is None):
            raise ValueError("Missing the required parameter `openid` when calling `cancel_network_notificate_message`")
        # verify the required parameter 'system_id' is set
        if ('system_id' not in params) or (params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `cancel_network_notificate_message`")

        if 'system_id' in params and len(params['system_id']) > 1024:
            raise ValueError("Invalid value for parameter `system_id` when calling `cancel_network_notificate_message`, length must be less than or equal to `1024`")
        if 'system_id' in params and len(params['system_id']) < 1:
            raise ValueError("Invalid value for parameter `system_id` when calling `cancel_network_notificate_message`, length must be greater than or equal to `1`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'system_id' in params:
            query_params.append(('systemID', params['system_id']))
        if 'desc' in params:
            query_params.append(('desc', params['desc']))

        header_params = {}
        if 'openid' in params:
            header_params['openid'] = params['openid']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/openapi/notification/network/link', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SubscribeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def do_get(self, openid, **kwargs):
        """
        查询网络链路列表信息
        ## 典型场景 ##   需要查询网络链路列表使用。 ## 接口功能 ##  查询网络链路信息，包括链路列表，符合查询条件的设备记录总数以及分页查询总页数。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.do_get(openid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str openid: 会话标识，用于Open API的鉴权。 (required)
        :param str anedn: 源网元DN
        :param str anename: 源网元名称
        :param str aneip: 源网元IP
        :param int anestate: 源网元状态取值： 0：未管理 1：在线 2：离线 3：未知 
        :param str aportdn: 源端口DN
        :param str aportname: 源端口名称
        :param str aportip: 源端口IP
        :param int aportadminstatus: 源端口管理状态： 1：up正常状态 2：down故障状态 3：testing测试状态 
        :param int aportoperstatus: 源端口运行状态： 1：up正常状态 2：down故障状态 3：testing测试状态 4：unknown未知状态 5：dormant休眠状态 6：notPresent不存在状态 7：lowerLayerDown下层状态down状态 
        :param str znedn: 宿网元DN
        :param str znename: 宿网元名称
        :param str zneip: 宿网元IP
        :param int znestate: 宿网元状态： 0：未管理 1：在线 2：离线 3：未知 
        :param str zportdn: 宿端口DN
        :param str zportname: 宿端口名称
        :param str zportip: 宿端口IP
        :param int zportadminstatus: 宿端口管理状态： 1：up正常状态 2：down故障状态 3：testing测试状态 
        :param int zportoperstatus: 宿端口运行状态： 1：up正常状态 2：down故障状态 3：testing测试状态 4：unknown未知状态 5：dormant休眠状态 6：notPresent不存在状态 7：lowerLayerDown下层状态down状态 
        :param str linkdn: 链路DN
        :param str linkname: 链路名称
        :param int linkstatus: 链路状态： 0：正常 1：未知 2：重要故障 3：紧急故障 4：离线 5：不管理 
        :param int linktype: 链路类型： 1：LLDP 2：Side-By-Side链路 3：MACARP 4：CDP 5：IP 6：由物理链路生成Eth-Trunk链路 99：手工 
        :param str speed: 单位：Mbit/s
        :param int start: 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。小于0使用缺省值。
        :param int size: 指定返回查询结果集总数。缺省值是20。（如果值小于0，将使用缺省值。）
        :param str orderby: 指定查询结果集采用的排序字段。缺省排序字段是linkdn。可指定的排序字段包括：linkdn，linkname，anedn，anename，aportdn，aportname，znedn，znename，zportdn，zportname，linktype，speed。指定多个排序字段时字段间用英文半角逗号“,”分隔。
        :param bool desc: 指定查询结果是否按照降序排序。只有指定orderby请求参数才生效
        :return: NorthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.do_get_with_http_info(openid, **kwargs)
        else:
            (data) = self.do_get_with_http_info(openid, **kwargs)
            return data

    def do_get_with_http_info(self, openid, **kwargs):
        """
        查询网络链路列表信息
        ## 典型场景 ##   需要查询网络链路列表使用。 ## 接口功能 ##  查询网络链路信息，包括链路列表，符合查询条件的设备记录总数以及分页查询总页数。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.do_get_with_http_info(openid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str openid: 会话标识，用于Open API的鉴权。 (required)
        :param str anedn: 源网元DN
        :param str anename: 源网元名称
        :param str aneip: 源网元IP
        :param int anestate: 源网元状态取值： 0：未管理 1：在线 2：离线 3：未知 
        :param str aportdn: 源端口DN
        :param str aportname: 源端口名称
        :param str aportip: 源端口IP
        :param int aportadminstatus: 源端口管理状态： 1：up正常状态 2：down故障状态 3：testing测试状态 
        :param int aportoperstatus: 源端口运行状态： 1：up正常状态 2：down故障状态 3：testing测试状态 4：unknown未知状态 5：dormant休眠状态 6：notPresent不存在状态 7：lowerLayerDown下层状态down状态 
        :param str znedn: 宿网元DN
        :param str znename: 宿网元名称
        :param str zneip: 宿网元IP
        :param int znestate: 宿网元状态： 0：未管理 1：在线 2：离线 3：未知 
        :param str zportdn: 宿端口DN
        :param str zportname: 宿端口名称
        :param str zportip: 宿端口IP
        :param int zportadminstatus: 宿端口管理状态： 1：up正常状态 2：down故障状态 3：testing测试状态 
        :param int zportoperstatus: 宿端口运行状态： 1：up正常状态 2：down故障状态 3：testing测试状态 4：unknown未知状态 5：dormant休眠状态 6：notPresent不存在状态 7：lowerLayerDown下层状态down状态 
        :param str linkdn: 链路DN
        :param str linkname: 链路名称
        :param int linkstatus: 链路状态： 0：正常 1：未知 2：重要故障 3：紧急故障 4：离线 5：不管理 
        :param int linktype: 链路类型： 1：LLDP 2：Side-By-Side链路 3：MACARP 4：CDP 5：IP 6：由物理链路生成Eth-Trunk链路 99：手工 
        :param str speed: 单位：Mbit/s
        :param int start: 指定从哪个起始记录位置开始返回查询结果集。缺省值是0。小于0使用缺省值。
        :param int size: 指定返回查询结果集总数。缺省值是20。（如果值小于0，将使用缺省值。）
        :param str orderby: 指定查询结果集采用的排序字段。缺省排序字段是linkdn。可指定的排序字段包括：linkdn，linkname，anedn，anename，aportdn，aportname，znedn，znename，zportdn，zportname，linktype，speed。指定多个排序字段时字段间用英文半角逗号“,”分隔。
        :param bool desc: 指定查询结果是否按照降序排序。只有指定orderby请求参数才生效
        :return: NorthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['openid', 'anedn', 'anename', 'aneip', 'anestate', 'aportdn', 'aportname', 'aportip', 'aportadminstatus', 'aportoperstatus', 'znedn', 'znename', 'zneip', 'znestate', 'zportdn', 'zportname', 'zportip', 'zportadminstatus', 'zportoperstatus', 'linkdn', 'linkname', 'linkstatus', 'linktype', 'speed', 'start', 'size', 'orderby', 'desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method do_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'openid' is set
        if ('openid' not in params) or (params['openid'] is None):
            raise ValueError("Missing the required parameter `openid` when calling `do_get`")

        if 'anedn' in params and len(params['anedn']) > 100:
            raise ValueError("Invalid value for parameter `anedn` when calling `do_get`, length must be less than or equal to `100`")
        if 'anedn' in params and len(params['anedn']) < 0:
            raise ValueError("Invalid value for parameter `anedn` when calling `do_get`, length must be greater than or equal to `0`")
        if 'anename' in params and len(params['anename']) > 255:
            raise ValueError("Invalid value for parameter `anename` when calling `do_get`, length must be less than or equal to `255`")
        if 'anename' in params and len(params['anename']) < 0:
            raise ValueError("Invalid value for parameter `anename` when calling `do_get`, length must be greater than or equal to `0`")
        if 'aneip' in params and len(params['aneip']) > 255:
            raise ValueError("Invalid value for parameter `aneip` when calling `do_get`, length must be less than or equal to `255`")
        if 'aneip' in params and len(params['aneip']) < 0:
            raise ValueError("Invalid value for parameter `aneip` when calling `do_get`, length must be greater than or equal to `0`")
        if 'aportdn' in params and len(params['aportdn']) > 100:
            raise ValueError("Invalid value for parameter `aportdn` when calling `do_get`, length must be less than or equal to `100`")
        if 'aportdn' in params and len(params['aportdn']) < 0:
            raise ValueError("Invalid value for parameter `aportdn` when calling `do_get`, length must be greater than or equal to `0`")
        if 'aportname' in params and len(params['aportname']) > 255:
            raise ValueError("Invalid value for parameter `aportname` when calling `do_get`, length must be less than or equal to `255`")
        if 'aportname' in params and len(params['aportname']) < 0:
            raise ValueError("Invalid value for parameter `aportname` when calling `do_get`, length must be greater than or equal to `0`")
        if 'aportip' in params and len(params['aportip']) > 64:
            raise ValueError("Invalid value for parameter `aportip` when calling `do_get`, length must be less than or equal to `64`")
        if 'aportip' in params and len(params['aportip']) < 0:
            raise ValueError("Invalid value for parameter `aportip` when calling `do_get`, length must be greater than or equal to `0`")
        if 'znedn' in params and len(params['znedn']) > 100:
            raise ValueError("Invalid value for parameter `znedn` when calling `do_get`, length must be less than or equal to `100`")
        if 'znedn' in params and len(params['znedn']) < 0:
            raise ValueError("Invalid value for parameter `znedn` when calling `do_get`, length must be greater than or equal to `0`")
        if 'znename' in params and len(params['znename']) > 255:
            raise ValueError("Invalid value for parameter `znename` when calling `do_get`, length must be less than or equal to `255`")
        if 'znename' in params and len(params['znename']) < 0:
            raise ValueError("Invalid value for parameter `znename` when calling `do_get`, length must be greater than or equal to `0`")
        if 'zneip' in params and len(params['zneip']) > 255:
            raise ValueError("Invalid value for parameter `zneip` when calling `do_get`, length must be less than or equal to `255`")
        if 'zneip' in params and len(params['zneip']) < 0:
            raise ValueError("Invalid value for parameter `zneip` when calling `do_get`, length must be greater than or equal to `0`")
        if 'zportdn' in params and len(params['zportdn']) > 100:
            raise ValueError("Invalid value for parameter `zportdn` when calling `do_get`, length must be less than or equal to `100`")
        if 'zportdn' in params and len(params['zportdn']) < 0:
            raise ValueError("Invalid value for parameter `zportdn` when calling `do_get`, length must be greater than or equal to `0`")
        if 'zportname' in params and len(params['zportname']) > 255:
            raise ValueError("Invalid value for parameter `zportname` when calling `do_get`, length must be less than or equal to `255`")
        if 'zportname' in params and len(params['zportname']) < 0:
            raise ValueError("Invalid value for parameter `zportname` when calling `do_get`, length must be greater than or equal to `0`")
        if 'zportip' in params and len(params['zportip']) > 64:
            raise ValueError("Invalid value for parameter `zportip` when calling `do_get`, length must be less than or equal to `64`")
        if 'zportip' in params and len(params['zportip']) < 0:
            raise ValueError("Invalid value for parameter `zportip` when calling `do_get`, length must be greater than or equal to `0`")
        if 'linkdn' in params and len(params['linkdn']) > 255:
            raise ValueError("Invalid value for parameter `linkdn` when calling `do_get`, length must be less than or equal to `255`")
        if 'linkdn' in params and len(params['linkdn']) < 0:
            raise ValueError("Invalid value for parameter `linkdn` when calling `do_get`, length must be greater than or equal to `0`")
        if 'linkname' in params and len(params['linkname']) > 1130:
            raise ValueError("Invalid value for parameter `linkname` when calling `do_get`, length must be less than or equal to `1130`")
        if 'linkname' in params and len(params['linkname']) < 0:
            raise ValueError("Invalid value for parameter `linkname` when calling `do_get`, length must be greater than or equal to `0`")
        if 'speed' in params and len(params['speed']) > 32:
            raise ValueError("Invalid value for parameter `speed` when calling `do_get`, length must be less than or equal to `32`")
        if 'speed' in params and len(params['speed']) < 0:
            raise ValueError("Invalid value for parameter `speed` when calling `do_get`, length must be greater than or equal to `0`")
        if 'orderby' in params and len(params['orderby']) > 10:
            raise ValueError("Invalid value for parameter `orderby` when calling `do_get`, length must be less than or equal to `10`")
        if 'orderby' in params and len(params['orderby']) < 0:
            raise ValueError("Invalid value for parameter `orderby` when calling `do_get`, length must be greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'anedn' in params:
            query_params.append(('anedn', params['anedn']))
        if 'anename' in params:
            query_params.append(('anename', params['anename']))
        if 'aneip' in params:
            query_params.append(('aneip', params['aneip']))
        if 'anestate' in params:
            query_params.append(('anestate', params['anestate']))
        if 'aportdn' in params:
            query_params.append(('aportdn', params['aportdn']))
        if 'aportname' in params:
            query_params.append(('aportname', params['aportname']))
        if 'aportip' in params:
            query_params.append(('aportip', params['aportip']))
        if 'aportadminstatus' in params:
            query_params.append(('aportadminstatus', params['aportadminstatus']))
        if 'aportoperstatus' in params:
            query_params.append(('aportoperstatus', params['aportoperstatus']))
        if 'znedn' in params:
            query_params.append(('znedn', params['znedn']))
        if 'znename' in params:
            query_params.append(('znename', params['znename']))
        if 'zneip' in params:
            query_params.append(('zneip', params['zneip']))
        if 'znestate' in params:
            query_params.append(('znestate', params['znestate']))
        if 'zportdn' in params:
            query_params.append(('zportdn', params['zportdn']))
        if 'zportname' in params:
            query_params.append(('zportname', params['zportname']))
        if 'zportip' in params:
            query_params.append(('zportip', params['zportip']))
        if 'zportadminstatus' in params:
            query_params.append(('zportadminstatus', params['zportadminstatus']))
        if 'zportoperstatus' in params:
            query_params.append(('zportoperstatus', params['zportoperstatus']))
        if 'linkdn' in params:
            query_params.append(('linkdn', params['linkdn']))
        if 'linkname' in params:
            query_params.append(('linkname', params['linkname']))
        if 'linkstatus' in params:
            query_params.append(('linkstatus', params['linkstatus']))
        if 'linktype' in params:
            query_params.append(('linktype', params['linktype']))
        if 'speed' in params:
            query_params.append(('speed', params['speed']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))
        if 'desc' in params:
            query_params.append(('desc', params['desc']))

        header_params = {}
        if 'openid' in params:
            header_params['openid'] = params['openid']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/openapi/network/link', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='NorthResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_it_links(self, openid, **kwargs):
        """
        查询IT设备链路信息
        ## 典型场景 ##   需要查询IT设备链路使用。 ## 接口功能 ##  查询IT设备链路信息，包括链路列表，符合查询条件的设备记录总数以及分页查询总页数。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_it_links(openid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str openid: 会话标识，用于OpenAPI的鉴权。 (required)
        :param str anedn: 源网元DN
        :param str znedn: 目的网元DN
        :param int start: 页查询的第几页，从1开始，默认取第1页。
        :param int size: 分页查询的每页记录数，支持1～100条，默认值20条。说明pageSize小于1或大于100时，使用默认值20。
        :return: ItQueryResonse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_it_links_with_http_info(openid, **kwargs)
        else:
            (data) = self.query_it_links_with_http_info(openid, **kwargs)
            return data

    def query_it_links_with_http_info(self, openid, **kwargs):
        """
        查询IT设备链路信息
        ## 典型场景 ##   需要查询IT设备链路使用。 ## 接口功能 ##  查询IT设备链路信息，包括链路列表，符合查询条件的设备记录总数以及分页查询总页数。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_it_links_with_http_info(openid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str openid: 会话标识，用于OpenAPI的鉴权。 (required)
        :param str anedn: 源网元DN
        :param str znedn: 目的网元DN
        :param int start: 页查询的第几页，从1开始，默认取第1页。
        :param int size: 分页查询的每页记录数，支持1～100条，默认值20条。说明pageSize小于1或大于100时，使用默认值20。
        :return: ItQueryResonse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['openid', 'anedn', 'znedn', 'start', 'size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_it_links" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'openid' is set
        if ('openid' not in params) or (params['openid'] is None):
            raise ValueError("Missing the required parameter `openid` when calling `query_it_links`")

        if 'anedn' in params and len(params['anedn']) > 100:
            raise ValueError("Invalid value for parameter `anedn` when calling `query_it_links`, length must be less than or equal to `100`")
        if 'anedn' in params and len(params['anedn']) < 0:
            raise ValueError("Invalid value for parameter `anedn` when calling `query_it_links`, length must be greater than or equal to `0`")
        if 'znedn' in params and len(params['znedn']) > 100:
            raise ValueError("Invalid value for parameter `znedn` when calling `query_it_links`, length must be less than or equal to `100`")
        if 'znedn' in params and len(params['znedn']) < 0:
            raise ValueError("Invalid value for parameter `znedn` when calling `query_it_links`, length must be greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'anedn' in params:
            query_params.append(('anedn', params['anedn']))
        if 'znedn' in params:
            query_params.append(('znedn', params['znedn']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'size' in params:
            query_params.append(('size', params['size']))

        header_params = {}
        if 'openid' in params:
            header_params['openid'] = params['openid']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/openapi/it/link', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ItQueryResonse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def suscrbie_it_link_change_message(self, openid, registry_info, **kwargs):
        """
        订阅IT设备链路变更通知
        ## 典型场景 ##   需要接受IT设备链路变更消息时使用。 ## 接口功能 ##   注册IT设备链路变更通知，注册时携带URL路径，IT设备链路发生变更时，网管以POST方式向该URL发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suscrbie_it_link_change_message(openid, registry_info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str openid: 会话标识，用于Open API的鉴权。 (required)
        :param RegistryInfo registry_info: (required)
        :return: SubscribeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.suscrbie_it_link_change_message_with_http_info(openid, registry_info, **kwargs)
        else:
            (data) = self.suscrbie_it_link_change_message_with_http_info(openid, registry_info, **kwargs)
            return data

    def suscrbie_it_link_change_message_with_http_info(self, openid, registry_info, **kwargs):
        """
        订阅IT设备链路变更通知
        ## 典型场景 ##   需要接受IT设备链路变更消息时使用。 ## 接口功能 ##   注册IT设备链路变更通知，注册时携带URL路径，IT设备链路发生变更时，网管以POST方式向该URL发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suscrbie_it_link_change_message_with_http_info(openid, registry_info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str openid: 会话标识，用于Open API的鉴权。 (required)
        :param RegistryInfo registry_info: (required)
        :return: SubscribeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['openid', 'registry_info']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suscrbie_it_link_change_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'openid' is set
        if ('openid' not in params) or (params['openid'] is None):
            raise ValueError("Missing the required parameter `openid` when calling `suscrbie_it_link_change_message`")
        # verify the required parameter 'registry_info' is set
        if ('registry_info' not in params) or (params['registry_info'] is None):
            raise ValueError("Missing the required parameter `registry_info` when calling `suscrbie_it_link_change_message`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'openid' in params:
            header_params['openid'] = params['openid']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'registry_info' in params:
            body_params = params['registry_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/openapi/notification/it/link', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SubscribeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def suscrbie_network_link_change_message(self, openid, registry_info, **kwargs):
        """
        订阅网络链路变更通知
        ## 典型场景 ##   需要接受网络链路变更消息时使用。 ## 接口功能 ##   注册网络链路变更通知，注册时携带URL路径，网络链路发生变更时，网管以POST方式向该URL发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suscrbie_network_link_change_message(openid, registry_info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str openid: 会话标识，用于Open API的鉴权。 (required)
        :param RegistryInfo registry_info: (required)
        :return: SubscribeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.suscrbie_network_link_change_message_with_http_info(openid, registry_info, **kwargs)
        else:
            (data) = self.suscrbie_network_link_change_message_with_http_info(openid, registry_info, **kwargs)
            return data

    def suscrbie_network_link_change_message_with_http_info(self, openid, registry_info, **kwargs):
        """
        订阅网络链路变更通知
        ## 典型场景 ##   需要接受网络链路变更消息时使用。 ## 接口功能 ##   注册网络链路变更通知，注册时携带URL路径，网络链路发生变更时，网管以POST方式向该URL发送通知消息。 ## 接口约束 ##   该接口支持北向用户访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suscrbie_network_link_change_message_with_http_info(openid, registry_info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str openid: 会话标识，用于Open API的鉴权。 (required)
        :param RegistryInfo registry_info: (required)
        :return: SubscribeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['openid', 'registry_info']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suscrbie_network_link_change_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'openid' is set
        if ('openid' not in params) or (params['openid'] is None):
            raise ValueError("Missing the required parameter `openid` when calling `suscrbie_network_link_change_message`")
        # verify the required parameter 'registry_info' is set
        if ('registry_info' not in params) or (params['registry_info'] is None):
            raise ValueError("Missing the required parameter `registry_info` when calling `suscrbie_network_link_change_message`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'openid' in params:
            header_params['openid'] = params['openid']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'registry_info' in params:
            body_params = params['registry_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/openapi/notification/network/link', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SubscribeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
