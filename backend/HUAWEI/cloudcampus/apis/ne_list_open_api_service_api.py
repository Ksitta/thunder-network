# coding: utf-8

"""
    网络设备管理

    提供北向查询网络设备服务。 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class NeListOpenApiServiceApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def query_ne_list(self, **kwargs):
        """
        查询列表信息
        ## 典型场景 ##  查询网络设备信息时使用。 ## 接口功能 ##  查询网络设备信息，包括设备网元id，网元dn，网元名称，网元别名，网元IP，网元状态， 网元具体类型，设备类型，厂商名称， 序列号。 ## 接口约束 ##  该接口的查询条件参数可以为空。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_ne_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nedn: 设备DN。
        :param str neid: 设备ID。
        :param str aliasname: 网管名称。
        :param str nename: 设备名称。
        :param str necategory: 设备分类。
        :param str netype: 设备类型。
        :param str nevendorname: 设备厂商信息(设备厂商ID)。
        :param str neesn: 设备序列号。
        :param str neip: 设备IP地址。
        :param str nemac: 设备MAC地址。
        :param str version: 设备版本。
        :param str nepatchversion: 补丁版本。
        :param str nesysoid: 设备sysoid。
        :param int nestate: 网络设备状态，可以是如下值之一： 0：未管理 1：在线 2：离线 3：未知 4：snmp不可达 5：错误 
        :param str lastpolltime: 上次同步时间。
        :param str createtime: 设备创建时间。
        :param str timezoneid: 设备时区。
        :param int neiptype: ip地址类型，可以是如下值之一： 0：IPv4 1：IPv6 
        :param str subnet: 所属子网。
        :param str negroupname: 所属分组名称。
        :param str neosversion: 软件版本。
        :param str necontact: 设备联系人。
        :param str neposition: 设备位置。
        :param str memo: 设备备注。
        :param str maintainunit: 维保单位。
        :param str putintoactiontime: 投入使用时间。
        :param str usefullife: 维保到期时间。
        :param str neruntime: 设备启动时间。
        :param str nedescribe: 设备描述。
        :param str asset_manager: 资产管理人。
        :param str asset_number: 资产编号。
        :param str asset_date: 购买日期。
        :param int start: 指定从哪个起始记录位置开始返回查询结果集，缺省值是0。 说明： 如果值小于0，将使用缺省值。 
        :param int size: 指定返回查询结果集总数。缺省值是20。 说明： 1、如果值小于0，将使用缺省值。 2、数据的size，最大建议10000条。 
        :param str orderby: 指定查询结果集采用的排序字段。缺省排序字段是nedn。 可指定的排序字段包括：nedn、nename、necategory、netype、neip、nesysoid、nestate。 
        :param bool desc: 指定查询结果是否按降序排序。缺省值是false。 说明： 此请求参数只有指定了“orderby”请求参数后才有效。 
        :param str fields: 指定查询结果所包含的列。需要查询的列名为fields参数的值，多个列名时可用英文逗号隔开。 说明： 此请求参数只有指定了“fields”请求参数后才有效，不指定默认返回所有字段。 
        :return: NeListOpenApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_ne_list_with_http_info(**kwargs)
        else:
            (data) = self.query_ne_list_with_http_info(**kwargs)
            return data

    def query_ne_list_with_http_info(self, **kwargs):
        """
        查询列表信息
        ## 典型场景 ##  查询网络设备信息时使用。 ## 接口功能 ##  查询网络设备信息，包括设备网元id，网元dn，网元名称，网元别名，网元IP，网元状态， 网元具体类型，设备类型，厂商名称， 序列号。 ## 接口约束 ##  该接口的查询条件参数可以为空。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_ne_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nedn: 设备DN。
        :param str neid: 设备ID。
        :param str aliasname: 网管名称。
        :param str nename: 设备名称。
        :param str necategory: 设备分类。
        :param str netype: 设备类型。
        :param str nevendorname: 设备厂商信息(设备厂商ID)。
        :param str neesn: 设备序列号。
        :param str neip: 设备IP地址。
        :param str nemac: 设备MAC地址。
        :param str version: 设备版本。
        :param str nepatchversion: 补丁版本。
        :param str nesysoid: 设备sysoid。
        :param int nestate: 网络设备状态，可以是如下值之一： 0：未管理 1：在线 2：离线 3：未知 4：snmp不可达 5：错误 
        :param str lastpolltime: 上次同步时间。
        :param str createtime: 设备创建时间。
        :param str timezoneid: 设备时区。
        :param int neiptype: ip地址类型，可以是如下值之一： 0：IPv4 1：IPv6 
        :param str subnet: 所属子网。
        :param str negroupname: 所属分组名称。
        :param str neosversion: 软件版本。
        :param str necontact: 设备联系人。
        :param str neposition: 设备位置。
        :param str memo: 设备备注。
        :param str maintainunit: 维保单位。
        :param str putintoactiontime: 投入使用时间。
        :param str usefullife: 维保到期时间。
        :param str neruntime: 设备启动时间。
        :param str nedescribe: 设备描述。
        :param str asset_manager: 资产管理人。
        :param str asset_number: 资产编号。
        :param str asset_date: 购买日期。
        :param int start: 指定从哪个起始记录位置开始返回查询结果集，缺省值是0。 说明： 如果值小于0，将使用缺省值。 
        :param int size: 指定返回查询结果集总数。缺省值是20。 说明： 1、如果值小于0，将使用缺省值。 2、数据的size，最大建议10000条。 
        :param str orderby: 指定查询结果集采用的排序字段。缺省排序字段是nedn。 可指定的排序字段包括：nedn、nename、necategory、netype、neip、nesysoid、nestate。 
        :param bool desc: 指定查询结果是否按降序排序。缺省值是false。 说明： 此请求参数只有指定了“orderby”请求参数后才有效。 
        :param str fields: 指定查询结果所包含的列。需要查询的列名为fields参数的值，多个列名时可用英文逗号隔开。 说明： 此请求参数只有指定了“fields”请求参数后才有效，不指定默认返回所有字段。 
        :return: NeListOpenApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nedn', 'neid', 'aliasname', 'nename', 'necategory', 'netype', 'nevendorname', 'neesn', 'neip', 'nemac', 'version', 'nepatchversion', 'nesysoid', 'nestate', 'lastpolltime', 'createtime', 'timezoneid', 'neiptype', 'subnet', 'negroupname', 'neosversion', 'necontact', 'neposition', 'memo', 'maintainunit', 'putintoactiontime', 'usefullife', 'neruntime', 'nedescribe', 'asset_manager', 'asset_number', 'asset_date', 'start', 'size', 'orderby', 'desc', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_ne_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'nedn' in params and len(params['nedn']) > 36:
            raise ValueError("Invalid value for parameter `nedn` when calling `query_ne_list`, length must be less than or equal to `36`")
        if 'nedn' in params and len(params['nedn']) < 36:
            raise ValueError("Invalid value for parameter `nedn` when calling `query_ne_list`, length must be greater than or equal to `36`")
        if 'neid' in params and len(params['neid']) > 36:
            raise ValueError("Invalid value for parameter `neid` when calling `query_ne_list`, length must be less than or equal to `36`")
        if 'neid' in params and len(params['neid']) < 36:
            raise ValueError("Invalid value for parameter `neid` when calling `query_ne_list`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nedn' in params:
            query_params.append(('nedn', params['nedn']))
        if 'neid' in params:
            query_params.append(('neid', params['neid']))
        if 'aliasname' in params:
            query_params.append(('aliasname', params['aliasname']))
        if 'nename' in params:
            query_params.append(('nename', params['nename']))
        if 'necategory' in params:
            query_params.append(('necategory', params['necategory']))
        if 'netype' in params:
            query_params.append(('netype', params['netype']))
        if 'nevendorname' in params:
            query_params.append(('nevendorname', params['nevendorname']))
        if 'neesn' in params:
            query_params.append(('neesn', params['neesn']))
        if 'neip' in params:
            query_params.append(('neip', params['neip']))
        if 'nemac' in params:
            query_params.append(('nemac', params['nemac']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'nepatchversion' in params:
            query_params.append(('nepatchversion', params['nepatchversion']))
        if 'nesysoid' in params:
            query_params.append(('nesysoid', params['nesysoid']))
        if 'nestate' in params:
            query_params.append(('nestate', params['nestate']))
        if 'lastpolltime' in params:
            query_params.append(('lastpolltime', params['lastpolltime']))
        if 'createtime' in params:
            query_params.append(('createtime', params['createtime']))
        if 'timezoneid' in params:
            query_params.append(('timezoneid', params['timezoneid']))
        if 'neiptype' in params:
            query_params.append(('neiptype', params['neiptype']))
        if 'subnet' in params:
            query_params.append(('subnet', params['subnet']))
        if 'negroupname' in params:
            query_params.append(('negroupname', params['negroupname']))
        if 'neosversion' in params:
            query_params.append(('neosversion', params['neosversion']))
        if 'necontact' in params:
            query_params.append(('necontact', params['necontact']))
        if 'neposition' in params:
            query_params.append(('neposition', params['neposition']))
        if 'memo' in params:
            query_params.append(('memo', params['memo']))
        if 'maintainunit' in params:
            query_params.append(('maintainunit', params['maintainunit']))
        if 'putintoactiontime' in params:
            query_params.append(('putintoactiontime', params['putintoactiontime']))
        if 'usefullife' in params:
            query_params.append(('usefullife', params['usefullife']))
        if 'neruntime' in params:
            query_params.append(('neruntime', params['neruntime']))
        if 'nedescribe' in params:
            query_params.append(('nedescribe', params['nedescribe']))
        if 'asset_manager' in params:
            query_params.append(('assetManager', params['asset_manager']))
        if 'asset_number' in params:
            query_params.append(('assetNumber', params['asset_number']))
        if 'asset_date' in params:
            query_params.append(('assetDate', params['asset_date']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))
        if 'desc' in params:
            query_params.append(('desc', params['desc']))
        if 'fields' in params:
            query_params.append(('fields', params['fields']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/rest/openapi/network/nedevice', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='NeListOpenApiResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
