# coding: utf-8

"""
    本地用户配置管理

    本地用户配置北向接口，主要特性： · 查询本地用户配置 · 修改本地用户配置 · 创建本地用户配置 

    OpenAPI spec version: 1.2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class NetWorkServiceLocalUserApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def create_localuser_info(self, site_id, body, **kwargs):
        """
        创建本地用户
        ## 典型场景 ##    提供创建配置参数的接口，创建本地用户接口。 ## 接口功能 ##    提供创建配置参数的接口，创建本地用户密码，接入方式（包括monitor和manager设备本地用户）等。 ## 接口约束 ##    该接口功能基于站点发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_localuser_info(site_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param CreateLocalUserInfoRequst body: 本地用户信息。 (required)
        :return: CreateLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_localuser_info_with_http_info(site_id, body, **kwargs)
        else:
            (data) = self.create_localuser_info_with_http_info(site_id, body, **kwargs)
            return data

    def create_localuser_info_with_http_info(self, site_id, body, **kwargs):
        """
        创建本地用户
        ## 典型场景 ##    提供创建配置参数的接口，创建本地用户接口。 ## 接口功能 ##    提供创建配置参数的接口，创建本地用户密码，接入方式（包括monitor和manager设备本地用户）等。 ## 接口约束 ##    该接口功能基于站点发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_localuser_info_with_http_info(site_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param CreateLocalUserInfoRequst body: 本地用户信息。 (required)
        :return: CreateLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_localuser_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `create_localuser_info`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_localuser_info`")


        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/localuser/sites/{siteId}/users', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreateLocalUserInfoResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_template_localuser_info(self, site_template_id, body, **kwargs):
        """
        创建站点模板的本地用户
        ## 典型场景 ##    提供创建配置参数的接口，创建站点模板的本地用户接口。 ## 接口功能 ##    提供创建配置参数的接口，创建站点模板的本地用户密码，接入方式（包括monitor和manager设备本地用户）等。 ## 接口约束 ##    该接口功能基于站点发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_template_localuser_info(site_template_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID。 (required)
        :param CreateLocalUserInfoRequst body: 本地用户信息。 (required)
        :return: CreateLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_template_localuser_info_with_http_info(site_template_id, body, **kwargs)
        else:
            (data) = self.create_template_localuser_info_with_http_info(site_template_id, body, **kwargs)
            return data

    def create_template_localuser_info_with_http_info(self, site_template_id, body, **kwargs):
        """
        创建站点模板的本地用户
        ## 典型场景 ##    提供创建配置参数的接口，创建站点模板的本地用户接口。 ## 接口功能 ##    提供创建配置参数的接口，创建站点模板的本地用户密码，接入方式（包括monitor和manager设备本地用户）等。 ## 接口约束 ##    该接口功能基于站点发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_template_localuser_info_with_http_info(site_template_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID。 (required)
        :param CreateLocalUserInfoRequst body: 本地用户信息。 (required)
        :return: CreateLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_template_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_localuser_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_template_id' is set
        if ('site_template_id' not in params) or (params['site_template_id'] is None):
            raise ValueError("Missing the required parameter `site_template_id` when calling `create_template_localuser_info`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template_localuser_info`")


        collection_formats = {}

        path_params = {}
        if 'site_template_id' in params:
            path_params['siteTemplateId'] = params['site_template_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/localuser/site-templates/{siteTemplateId}/users', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreateLocalUserInfoResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_localuser_info(self, site_id, username, **kwargs):
        """
        删除本地用户
        ## 典型场景 ##    提供删除配置参数的接口，删除本地用户接口。 ## 接口功能 ##    提供删除配置参数的接口，删除本地用户。 ## 接口约束 ##    该接口基于站点发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_localuser_info(site_id, username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param str username: 本地用户名，在URL中拼接用户名时，要对特殊字符转义。 (required)
        :return: DeleteLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_localuser_info_with_http_info(site_id, username, **kwargs)
        else:
            (data) = self.delete_localuser_info_with_http_info(site_id, username, **kwargs)
            return data

    def delete_localuser_info_with_http_info(self, site_id, username, **kwargs):
        """
        删除本地用户
        ## 典型场景 ##    提供删除配置参数的接口，删除本地用户接口。 ## 接口功能 ##    提供删除配置参数的接口，删除本地用户。 ## 接口约束 ##    该接口基于站点发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_localuser_info_with_http_info(site_id, username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param str username: 本地用户名，在URL中拼接用户名时，要对特殊字符转义。 (required)
        :return: DeleteLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'username']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_localuser_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `delete_localuser_info`")
        # verify the required parameter 'username' is set
        if ('username' not in params) or (params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `delete_localuser_info`")

        if 'username' in params and len(params['username']) > 64:
            raise ValueError("Invalid value for parameter `username` when calling `delete_localuser_info`, length must be less than or equal to `64`")

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']
        if 'username' in params:
            path_params['username'] = params['username']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/localuser/sites/{siteId}/users/{username}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeleteLocalUserInfoResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_template_localuser_info(self, site_template_id, username, **kwargs):
        """
        删除本地用户
        ## 典型场景 ##    提供删除配置参数的接口，删除本地用户接口。 ## 接口功能 ##    提供删除配置参数的接口，删除本地用户。 ## 接口约束 ##    该接口基于站点发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_template_localuser_info(site_template_id, username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID。 (required)
        :param str username: 本地用户名，在URL中拼接用户名时，要对特殊字符转义。 (required)
        :return: DeleteLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_template_localuser_info_with_http_info(site_template_id, username, **kwargs)
        else:
            (data) = self.delete_template_localuser_info_with_http_info(site_template_id, username, **kwargs)
            return data

    def delete_template_localuser_info_with_http_info(self, site_template_id, username, **kwargs):
        """
        删除本地用户
        ## 典型场景 ##    提供删除配置参数的接口，删除本地用户接口。 ## 接口功能 ##    提供删除配置参数的接口，删除本地用户。 ## 接口约束 ##    该接口基于站点发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_template_localuser_info_with_http_info(site_template_id, username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID。 (required)
        :param str username: 本地用户名，在URL中拼接用户名时，要对特殊字符转义。 (required)
        :return: DeleteLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_template_id', 'username']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_localuser_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_template_id' is set
        if ('site_template_id' not in params) or (params['site_template_id'] is None):
            raise ValueError("Missing the required parameter `site_template_id` when calling `delete_template_localuser_info`")
        # verify the required parameter 'username' is set
        if ('username' not in params) or (params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `delete_template_localuser_info`")

        if 'username' in params and len(params['username']) > 64:
            raise ValueError("Invalid value for parameter `username` when calling `delete_template_localuser_info`, length must be less than or equal to `64`")

        collection_formats = {}

        path_params = {}
        if 'site_template_id' in params:
            path_params['siteTemplateId'] = params['site_template_id']
        if 'username' in params:
            path_params['username'] = params['username']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/localuser/site-templates/{siteTemplateId}/users/{username}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeleteLocalUserInfoResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_localuser_info(self, site_id, **kwargs):
        """
        查询本地用户
        ## 典型场景 ##    提供查询配置参数的接口，查询本地用户接口。 ## 接口功能 ##    提供查询配置参数的接口，查询本地用户接口(包括monitor和manager设备本地用户)。 ## 接口约束 ##    该接口基于站点。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_localuser_info(site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :return: GetLocalUserInfosResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_localuser_info_with_http_info(site_id, **kwargs)
        else:
            (data) = self.get_localuser_info_with_http_info(site_id, **kwargs)
            return data

    def get_localuser_info_with_http_info(self, site_id, **kwargs):
        """
        查询本地用户
        ## 典型场景 ##    提供查询配置参数的接口，查询本地用户接口。 ## 接口功能 ##    提供查询配置参数的接口，查询本地用户接口(包括monitor和manager设备本地用户)。 ## 接口约束 ##    该接口基于站点。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_localuser_info_with_http_info(site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :return: GetLocalUserInfosResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_localuser_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_localuser_info`")


        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/localuser/sites/{siteId}/users', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetLocalUserInfosResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_template_localuser_info(self, site_template_id, **kwargs):
        """
        查询站点模板的本地用户
        ## 典型场景 ##    提供查询配置参数的接口，查询站点模板的本地用户接口。 ## 接口功能 ##    提供查询配置参数的接口，查询站点模板的本地用户接口(包括monitor和manager设备本地用户)。 ## 接口约束 ##    该接口基于站点。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_template_localuser_info(site_template_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID。 (required)
        :return: GetLocalUserInfosResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_template_localuser_info_with_http_info(site_template_id, **kwargs)
        else:
            (data) = self.get_template_localuser_info_with_http_info(site_template_id, **kwargs)
            return data

    def get_template_localuser_info_with_http_info(self, site_template_id, **kwargs):
        """
        查询站点模板的本地用户
        ## 典型场景 ##    提供查询配置参数的接口，查询站点模板的本地用户接口。 ## 接口功能 ##    提供查询配置参数的接口，查询站点模板的本地用户接口(包括monitor和manager设备本地用户)。 ## 接口约束 ##    该接口基于站点。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_template_localuser_info_with_http_info(site_template_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID。 (required)
        :return: GetLocalUserInfosResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_template_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_localuser_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_template_id' is set
        if ('site_template_id' not in params) or (params['site_template_id'] is None):
            raise ValueError("Missing the required parameter `site_template_id` when calling `get_template_localuser_info`")


        collection_formats = {}

        path_params = {}
        if 'site_template_id' in params:
            path_params['siteTemplateId'] = params['site_template_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/localuser/site-templates/{siteTemplateId}/users', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetLocalUserInfosResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def init_loginuser_info(self, body, **kwargs):
        """
        配置租户下设备admin账号的默认密码
        ## 典型场景 ##    提供配置租户下设备admin账号的默认密码的接口。 ## 接口功能 ##    提供配置租户下设备admin账号的默认密码的接口。 ## 接口约束 ##    该接口基于租户发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.init_loginuser_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param InitLocalUserInfoRequst body: 租户下设备admin账号的默认密码配置信息。 (required)
        :return: InitLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.init_loginuser_info_with_http_info(body, **kwargs)
        else:
            (data) = self.init_loginuser_info_with_http_info(body, **kwargs)
            return data

    def init_loginuser_info_with_http_info(self, body, **kwargs):
        """
        配置租户下设备admin账号的默认密码
        ## 典型场景 ##    提供配置租户下设备admin账号的默认密码的接口。 ## 接口功能 ##    提供配置租户下设备admin账号的默认密码的接口。 ## 接口约束 ##    该接口基于租户发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.init_loginuser_info_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param InitLocalUserInfoRequst body: 租户下设备admin账号的默认密码配置信息。 (required)
        :return: InitLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method init_loginuser_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `init_loginuser_info`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/localuser/users/admin', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InitLocalUserInfoResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_localuser_info(self, site_id, username, body, **kwargs):
        """
        修改本地用户
        ## 典型场景 ##    提供修改配置参数的接口，修改本地用户接口。 ## 接口功能 ##    提供修改配置参数的接口，修改本地用户密码，接入方式（包括monitor和manager设备本地用户）等。 ## 接口约束 ##    该接口基于租户发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_localuser_info(site_id, username, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param str username: 本地用户名，在URL中拼接用户名时，要对特殊字符转义。 (required)
        :param UpdateLocalUserInfoRequst body: 本地用户配置信息。 (required)
        :return: UpdateLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_localuser_info_with_http_info(site_id, username, body, **kwargs)
        else:
            (data) = self.update_localuser_info_with_http_info(site_id, username, body, **kwargs)
            return data

    def update_localuser_info_with_http_info(self, site_id, username, body, **kwargs):
        """
        修改本地用户
        ## 典型场景 ##    提供修改配置参数的接口，修改本地用户接口。 ## 接口功能 ##    提供修改配置参数的接口，修改本地用户密码，接入方式（包括monitor和manager设备本地用户）等。 ## 接口约束 ##    该接口基于租户发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_localuser_info_with_http_info(site_id, username, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param str username: 本地用户名，在URL中拼接用户名时，要对特殊字符转义。 (required)
        :param UpdateLocalUserInfoRequst body: 本地用户配置信息。 (required)
        :return: UpdateLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'username', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_localuser_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `update_localuser_info`")
        # verify the required parameter 'username' is set
        if ('username' not in params) or (params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `update_localuser_info`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_localuser_info`")

        if 'username' in params and len(params['username']) > 64:
            raise ValueError("Invalid value for parameter `username` when calling `update_localuser_info`, length must be less than or equal to `64`")

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']
        if 'username' in params:
            path_params['username'] = params['username']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/localuser/sites/{siteId}/users/{username}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdateLocalUserInfoResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_template_localuser_info(self, site_template_id, username, body, **kwargs):
        """
        修改站点模板的本地用户
        ## 典型场景 ##    提供修改配置参数的接口，修改站点模板的本地用户接口。 ## 接口功能 ##    提供修改配置参数的接口，修改站点模板的本地用户密码，接入方式（包括monitor和manager设备本地用户）等。 ## 接口约束 ##    该接口基于租户发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_template_localuser_info(site_template_id, username, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID。 (required)
        :param str username: 本地用户名，在URL中拼接用户名时，要对特殊字符转义。 (required)
        :param UpdateLocalUserInfoRequst body: 本地用户配置信息。 (required)
        :return: UpdateLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_template_localuser_info_with_http_info(site_template_id, username, body, **kwargs)
        else:
            (data) = self.update_template_localuser_info_with_http_info(site_template_id, username, body, **kwargs)
            return data

    def update_template_localuser_info_with_http_info(self, site_template_id, username, body, **kwargs):
        """
        修改站点模板的本地用户
        ## 典型场景 ##    提供修改配置参数的接口，修改站点模板的本地用户接口。 ## 接口功能 ##    提供修改配置参数的接口，修改站点模板的本地用户密码，接入方式（包括monitor和manager设备本地用户）等。 ## 接口约束 ##    该接口基于租户发布和管理。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_template_localuser_info_with_http_info(site_template_id, username, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID。 (required)
        :param str username: 本地用户名，在URL中拼接用户名时，要对特殊字符转义。 (required)
        :param UpdateLocalUserInfoRequst body: 本地用户配置信息。 (required)
        :return: UpdateLocalUserInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_template_id', 'username', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_localuser_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_template_id' is set
        if ('site_template_id' not in params) or (params['site_template_id'] is None):
            raise ValueError("Missing the required parameter `site_template_id` when calling `update_template_localuser_info`")
        # verify the required parameter 'username' is set
        if ('username' not in params) or (params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `update_template_localuser_info`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_template_localuser_info`")

        if 'username' in params and len(params['username']) > 64:
            raise ValueError("Invalid value for parameter `username` when calling `update_template_localuser_info`, length must be less than or equal to `64`")

        collection_formats = {}

        path_params = {}
        if 'site_template_id' in params:
            path_params['siteTemplateId'] = params['site_template_id']
        if 'username' in params:
            path_params['username'] = params['username']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/net/localuser/site-templates/{siteTemplateId}/users/{username}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdateLocalUserInfoResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
