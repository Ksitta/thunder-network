# coding: utf-8

"""
    站点模板管理

    站点模板第三方接口说明。 

    OpenAPI spec version: 1.2.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class SiteTemplateNorthboundApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def add_site_template(self, body, **kwargs):
        """
        创建站点模板
        ## 典型场景 ##  提供创建站点模板接口。 ## 接口功能 ##  创建站点模板。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_site_template(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateSiteTempDto body: 待创建的站点模板信息。 (required)
        :return: CreateSiteTempResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_site_template_with_http_info(body, **kwargs)
        else:
            (data) = self.add_site_template_with_http_info(body, **kwargs)
            return data

    def add_site_template_with_http_info(self, body, **kwargs):
        """
        创建站点模板
        ## 典型场景 ##  提供创建站点模板接口。 ## 接口功能 ##  创建站点模板。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_site_template_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateSiteTempDto body: 待创建的站点模板信息。 (required)
        :return: CreateSiteTempResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_site_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_site_template`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/site-templates', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreateSiteTempResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def bind_site_template(self, site_template_id, body, **kwargs):
        """
        绑定一个或多个站点到站点模板
        ## 典型场景 ##  提供绑定一个或多个站点到站点模板接口。 ## 接口功能 ##  绑定一个或多个站点到站点模板。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bind_site_template(site_template_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID，UUID格式。 (required)
        :param BindingSiteListDto body: 站点ID列表。 (required)
        :return: SiteTemplateAndSiteListResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bind_site_template_with_http_info(site_template_id, body, **kwargs)
        else:
            (data) = self.bind_site_template_with_http_info(site_template_id, body, **kwargs)
            return data

    def bind_site_template_with_http_info(self, site_template_id, body, **kwargs):
        """
        绑定一个或多个站点到站点模板
        ## 典型场景 ##  提供绑定一个或多个站点到站点模板接口。 ## 接口功能 ##  绑定一个或多个站点到站点模板。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bind_site_template_with_http_info(site_template_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID，UUID格式。 (required)
        :param BindingSiteListDto body: 站点ID列表。 (required)
        :return: SiteTemplateAndSiteListResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_template_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bind_site_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_template_id' is set
        if ('site_template_id' not in params) or (params['site_template_id'] is None):
            raise ValueError("Missing the required parameter `site_template_id` when calling `bind_site_template`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bind_site_template`")

        if 'site_template_id' in params and len(params['site_template_id']) > 36:
            raise ValueError("Invalid value for parameter `site_template_id` when calling `bind_site_template`, length must be less than or equal to `36`")
        if 'site_template_id' in params and len(params['site_template_id']) < 36:
            raise ValueError("Invalid value for parameter `site_template_id` when calling `bind_site_template`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}
        if 'site_template_id' in params:
            path_params['siteTemplateId'] = params['site_template_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/site-template-binding-relationship/{siteTemplateId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SiteTemplateAndSiteListResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_site_templates(self, body, **kwargs):
        """
        删除站点模板
        ## 典型场景 ##  提供删除站点模板接口。 ## 接口功能 ##  删除站点模板。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_site_templates(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeleteSiteTempDto body: 待删除的站点模板ID列表。 (required)
        :return: DeleteSiteTempResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_site_templates_with_http_info(body, **kwargs)
        else:
            (data) = self.delete_site_templates_with_http_info(body, **kwargs)
            return data

    def delete_site_templates_with_http_info(self, body, **kwargs):
        """
        删除站点模板
        ## 典型场景 ##  提供删除站点模板接口。 ## 接口功能 ##  删除站点模板。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_site_templates_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeleteSiteTempDto body: 待删除的站点模板ID列表。 (required)
        :return: DeleteSiteTempResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_site_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_site_templates`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/site-templates/batch-delete', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeleteSiteTempResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_binding_site_list(self, site_template_id, **kwargs):
        """
        根据站点模板ID查询绑定的站点
        ## 典型场景 ##  提供根据站点模板ID查询绑定的站点接口。 ## 接口功能 ##  根据站点模板ID查询绑定的站点。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_binding_site_list(site_template_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID，UUID格式。 (required)
        :param int page_size: 每页大小。
        :param int page_index: 页码。
        :param str sort: 排序字段，支持name。
        :return: GetSiteListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_binding_site_list_with_http_info(site_template_id, **kwargs)
        else:
            (data) = self.get_binding_site_list_with_http_info(site_template_id, **kwargs)
            return data

    def get_binding_site_list_with_http_info(self, site_template_id, **kwargs):
        """
        根据站点模板ID查询绑定的站点
        ## 典型场景 ##  提供根据站点模板ID查询绑定的站点接口。 ## 接口功能 ##  根据站点模板ID查询绑定的站点。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_binding_site_list_with_http_info(site_template_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID，UUID格式。 (required)
        :param int page_size: 每页大小。
        :param int page_index: 页码。
        :param str sort: 排序字段，支持name。
        :return: GetSiteListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_template_id', 'page_size', 'page_index', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_binding_site_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_template_id' is set
        if ('site_template_id' not in params) or (params['site_template_id'] is None):
            raise ValueError("Missing the required parameter `site_template_id` when calling `get_binding_site_list`")

        if 'site_template_id' in params and len(params['site_template_id']) > 36:
            raise ValueError("Invalid value for parameter `site_template_id` when calling `get_binding_site_list`, length must be less than or equal to `36`")
        if 'site_template_id' in params and len(params['site_template_id']) < 36:
            raise ValueError("Invalid value for parameter `site_template_id` when calling `get_binding_site_list`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}
        if 'site_template_id' in params:
            path_params['siteTemplateId'] = params['site_template_id']

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/site-template-binding-relationship/{siteTemplateId}/sites', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetSiteListDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_binding_site_template(self, site_id, **kwargs):
        """
        根据站点ID查询绑定的站点模板
        ## 典型场景 ##  提供根据站点ID查询绑定的站点模板接口。 ## 接口功能 ##  根据站点ID查询绑定的站点模板。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_binding_site_template(site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID，UUID格式。 (required)
        :return: GetSiteTempDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_binding_site_template_with_http_info(site_id, **kwargs)
        else:
            (data) = self.get_binding_site_template_with_http_info(site_id, **kwargs)
            return data

    def get_binding_site_template_with_http_info(self, site_id, **kwargs):
        """
        根据站点ID查询绑定的站点模板
        ## 典型场景 ##  提供根据站点ID查询绑定的站点模板接口。 ## 接口功能 ##  根据站点ID查询绑定的站点模板。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_binding_site_template_with_http_info(site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID，UUID格式。 (required)
        :return: GetSiteTempDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_binding_site_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_binding_site_template`")

        if 'site_id' in params and len(params['site_id']) > 36:
            raise ValueError("Invalid value for parameter `site_id` when calling `get_binding_site_template`, length must be less than or equal to `36`")
        if 'site_id' in params and len(params['site_id']) < 36:
            raise ValueError("Invalid value for parameter `site_id` when calling `get_binding_site_template`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/site-template-binding-relationship/{siteId}/site-template', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetSiteTempDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_site_templates(self, **kwargs):
        """
        查询站点模板
        ## 典型场景 ##  提供查询站点模板接口。 ## 接口功能 ##  查询站点模板。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_site_templates(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_size: 每页大小。
        :param int page_index: 页码。
        :param str sort: 排序字段，支持name和type，开头带有+表示升序，带有-表示降序，若不设置，默认以name升序返回。
        :return: GetSiteTempResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_site_templates_with_http_info(**kwargs)
        else:
            (data) = self.get_site_templates_with_http_info(**kwargs)
            return data

    def get_site_templates_with_http_info(self, **kwargs):
        """
        查询站点模板
        ## 典型场景 ##  提供查询站点模板接口。 ## 接口功能 ##  查询站点模板。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_site_templates_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_size: 每页大小。
        :param int page_index: 页码。
        :param str sort: 排序字段，支持name和type，开头带有+表示升序，带有-表示降序，若不设置，默认以name升序返回。
        :return: GetSiteTempResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'page_index', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_templates" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/site-templates', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetSiteTempResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def unbind_site_template(self, site_template_id, body, **kwargs):
        """
        站点模板解绑定一个或多个站点
        ## 典型场景 ##  提供站点模板解绑定一个或多个站点接口。 ## 接口功能 ##  站点模板解绑定一个或多个站点。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unbind_site_template(site_template_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID，UUID格式。 (required)
        :param BindingSiteListDto body: 站点ID列表。 (required)
        :return: SiteTemplateAndSiteListResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unbind_site_template_with_http_info(site_template_id, body, **kwargs)
        else:
            (data) = self.unbind_site_template_with_http_info(site_template_id, body, **kwargs)
            return data

    def unbind_site_template_with_http_info(self, site_template_id, body, **kwargs):
        """
        站点模板解绑定一个或多个站点
        ## 典型场景 ##  提供站点模板解绑定一个或多个站点接口。 ## 接口功能 ##  站点模板解绑定一个或多个站点。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unbind_site_template_with_http_info(site_template_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID，UUID格式。 (required)
        :param BindingSiteListDto body: 站点ID列表。 (required)
        :return: SiteTemplateAndSiteListResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_template_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unbind_site_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_template_id' is set
        if ('site_template_id' not in params) or (params['site_template_id'] is None):
            raise ValueError("Missing the required parameter `site_template_id` when calling `unbind_site_template`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `unbind_site_template`")

        if 'site_template_id' in params and len(params['site_template_id']) > 36:
            raise ValueError("Invalid value for parameter `site_template_id` when calling `unbind_site_template`, length must be less than or equal to `36`")
        if 'site_template_id' in params and len(params['site_template_id']) < 36:
            raise ValueError("Invalid value for parameter `site_template_id` when calling `unbind_site_template`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}
        if 'site_template_id' in params:
            path_params['siteTemplateId'] = params['site_template_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/site-template-binding-relationship/{siteTemplateId}/batch-delete', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SiteTemplateAndSiteListResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_site_template(self, site_template_id, body, **kwargs):
        """
        修改站点模板
        ## 典型场景 ##  提供修改站点模板接口。 ## 接口功能 ##  修改站点模板。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_site_template(site_template_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID，UUID格式。 (required)
        :param UpdateSiteTempDto body: 站点模板修改内容。 (required)
        :return: UpdateSiteTempResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_site_template_with_http_info(site_template_id, body, **kwargs)
        else:
            (data) = self.update_site_template_with_http_info(site_template_id, body, **kwargs)
            return data

    def update_site_template_with_http_info(self, site_template_id, body, **kwargs):
        """
        修改站点模板
        ## 典型场景 ##  提供修改站点模板接口。 ## 接口功能 ##  修改站点模板。 ## 接口约束 ##  该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_site_template_with_http_info(site_template_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_template_id: 站点模板ID，UUID格式。 (required)
        :param UpdateSiteTempDto body: 站点模板修改内容。 (required)
        :return: UpdateSiteTempResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_template_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_site_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_template_id' is set
        if ('site_template_id' not in params) or (params['site_template_id'] is None):
            raise ValueError("Missing the required parameter `site_template_id` when calling `update_site_template`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_site_template`")

        if 'site_template_id' in params and len(params['site_template_id']) > 36:
            raise ValueError("Invalid value for parameter `site_template_id` when calling `update_site_template`, length must be less than or equal to `36`")
        if 'site_template_id' in params and len(params['site_template_id']) < 36:
            raise ValueError("Invalid value for parameter `site_template_id` when calling `update_site_template`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}
        if 'site_template_id' in params:
            path_params['siteTemplateId'] = params['site_template_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/networkservice/networkconfig/site-templates/{siteTemplateId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdateSiteTempResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
