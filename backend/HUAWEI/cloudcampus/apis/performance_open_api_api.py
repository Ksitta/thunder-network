# coding: utf-8

"""
    设备基础性能数据信息查询

    · 查询设备网络速率历史数据 · 查询站点维度TopN设备或者全部设备的上行流量、下行流量 · 查询站点维度设备连接终端数历史数据 · 查询单设备连接终端数历史数据 · 查询租户维度下设备状态历史数据 · 查询基于站点的站点健康度和设备健康度 · 查询站点下TOP N SSID流量和最近在线用户数 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class PerformanceOpenApiApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def query_device_count_trend(self, mode, time_dimension, begin_time, end_time, **kwargs):
        """
        查询租户维度下设备状态历史数据列表
        ## 典型场景 ##    提供查询租户维度下设备状态历史数据             ## 接口功能 ##    查询租户维度下设备状态历史数据 ## 接口约束 ##    无。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_device_count_trend(mode, time_dimension, begin_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mode: 查询维度，tenant---租户。 (required)
        :param str time_dimension: 统计周期，day---天、week---周、month---月。 (required)
        :param int begin_time: 起始格林威治时间（时间精度对应到秒）。 (required)
        :param int end_time: 结束格林威治时间（时间精度对应到秒）。 (required)
        :return: DeviceCountTrendResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_device_count_trend_with_http_info(mode, time_dimension, begin_time, end_time, **kwargs)
        else:
            (data) = self.query_device_count_trend_with_http_info(mode, time_dimension, begin_time, end_time, **kwargs)
            return data

    def query_device_count_trend_with_http_info(self, mode, time_dimension, begin_time, end_time, **kwargs):
        """
        查询租户维度下设备状态历史数据列表
        ## 典型场景 ##    提供查询租户维度下设备状态历史数据             ## 接口功能 ##    查询租户维度下设备状态历史数据 ## 接口约束 ##    无。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_device_count_trend_with_http_info(mode, time_dimension, begin_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mode: 查询维度，tenant---租户。 (required)
        :param str time_dimension: 统计周期，day---天、week---周、month---月。 (required)
        :param int begin_time: 起始格林威治时间（时间精度对应到秒）。 (required)
        :param int end_time: 结束格林威治时间（时间精度对应到秒）。 (required)
        :return: DeviceCountTrendResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mode', 'time_dimension', 'begin_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_device_count_trend" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mode' is set
        if ('mode' not in params) or (params['mode'] is None):
            raise ValueError("Missing the required parameter `mode` when calling `query_device_count_trend`")
        # verify the required parameter 'time_dimension' is set
        if ('time_dimension' not in params) or (params['time_dimension'] is None):
            raise ValueError("Missing the required parameter `time_dimension` when calling `query_device_count_trend`")
        # verify the required parameter 'begin_time' is set
        if ('begin_time' not in params) or (params['begin_time'] is None):
            raise ValueError("Missing the required parameter `begin_time` when calling `query_device_count_trend`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `query_device_count_trend`")

        if 'begin_time' in params and params['begin_time'] > 2208959999:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_device_count_trend`, must be a value less than or equal to `2208959999`")
        if 'begin_time' in params and params['begin_time'] < 0:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_device_count_trend`, must be a value greater than or equal to `0`")
        if 'end_time' in params and params['end_time'] > 2208959999:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_device_count_trend`, must be a value less than or equal to `2208959999`")
        if 'end_time' in params and params['end_time'] < 0:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_device_count_trend`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mode' in params:
            query_params.append(('mode', params['mode']))
        if 'time_dimension' in params:
            query_params.append(('timeDimension', params['time_dimension']))
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/basicperformance/devicecounttrend', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceCountTrendResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_device_station_statistic(self, device_id, time_dimension, begin_time, end_time, **kwargs):
        """
        查询设备连接终端数历史数据
        ## 典型场景 ##    提供查询设备连接终端数历史数据的接口。 ## 接口功能 ##    支持查询设备连接终端数历史数据。 ## 接口约束 ##    无。   
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_device_station_statistic(device_id, time_dimension, begin_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID。 (required)
        :param str time_dimension: 统计周期，day---天、week---周、month---月、year---年。 (required)
        :param int begin_time: 起始格林威治时间（时间精度对应到秒）。 (required)
        :param int end_time: 结束格林威治时间（时间精度对应到秒）。 (required)
        :return: DeviceStationStatisticResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_device_station_statistic_with_http_info(device_id, time_dimension, begin_time, end_time, **kwargs)
        else:
            (data) = self.query_device_station_statistic_with_http_info(device_id, time_dimension, begin_time, end_time, **kwargs)
            return data

    def query_device_station_statistic_with_http_info(self, device_id, time_dimension, begin_time, end_time, **kwargs):
        """
        查询设备连接终端数历史数据
        ## 典型场景 ##    提供查询设备连接终端数历史数据的接口。 ## 接口功能 ##    支持查询设备连接终端数历史数据。 ## 接口约束 ##    无。   
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_device_station_statistic_with_http_info(device_id, time_dimension, begin_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID。 (required)
        :param str time_dimension: 统计周期，day---天、week---周、month---月、year---年。 (required)
        :param int begin_time: 起始格林威治时间（时间精度对应到秒）。 (required)
        :param int end_time: 结束格林威治时间（时间精度对应到秒）。 (required)
        :return: DeviceStationStatisticResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'time_dimension', 'begin_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_device_station_statistic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `query_device_station_statistic`")
        # verify the required parameter 'time_dimension' is set
        if ('time_dimension' not in params) or (params['time_dimension'] is None):
            raise ValueError("Missing the required parameter `time_dimension` when calling `query_device_station_statistic`")
        # verify the required parameter 'begin_time' is set
        if ('begin_time' not in params) or (params['begin_time'] is None):
            raise ValueError("Missing the required parameter `begin_time` when calling `query_device_station_statistic`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `query_device_station_statistic`")

        if 'begin_time' in params and params['begin_time'] > 2208959999:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_device_station_statistic`, must be a value less than or equal to `2208959999`")
        if 'begin_time' in params and params['begin_time'] < 0:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_device_station_statistic`, must be a value greater than or equal to `0`")
        if 'end_time' in params and params['end_time'] > 2208959999:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_device_station_statistic`, must be a value less than or equal to `2208959999`")
        if 'end_time' in params and params['end_time'] < 0:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_device_station_statistic`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']

        query_params = []
        if 'time_dimension' in params:
            query_params.append(('timeDimension', params['time_dimension']))
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/basicperformance/station/device/{deviceId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceStationStatisticResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_device_traffic(self, site_id, time_dimension, top, begin_time, end_time, **kwargs):
        """
        查询站点维度TopN设备或者全部设备的上行流量、下行流量
        ## 典型场景 ##    提供查询站点维度TopN设备或者全部设备的上行流量、下行流量的接口。           ## 接口功能 ##    支持查询站点维度TopN设备或者全部设备的上行流量、下行流量。 ## 接口约束 ##    无。   
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_device_traffic(site_id, time_dimension, top, begin_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param str time_dimension: 统计周期，day---天、week---周、month---月、year---年。 (required)
        :param int top: top数据个数，支持0、5、10、15、20。0代表查询全部设备的上下行流量。 (required)
        :param int begin_time: 起始格林威治时间（时间精度对应到秒）。 (required)
        :param int end_time: 结束格林威治时间（时间精度对应到秒）。 (required)
        :return: DeviceTrafficStatisticResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_device_traffic_with_http_info(site_id, time_dimension, top, begin_time, end_time, **kwargs)
        else:
            (data) = self.query_device_traffic_with_http_info(site_id, time_dimension, top, begin_time, end_time, **kwargs)
            return data

    def query_device_traffic_with_http_info(self, site_id, time_dimension, top, begin_time, end_time, **kwargs):
        """
        查询站点维度TopN设备或者全部设备的上行流量、下行流量
        ## 典型场景 ##    提供查询站点维度TopN设备或者全部设备的上行流量、下行流量的接口。           ## 接口功能 ##    支持查询站点维度TopN设备或者全部设备的上行流量、下行流量。 ## 接口约束 ##    无。   
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_device_traffic_with_http_info(site_id, time_dimension, top, begin_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param str time_dimension: 统计周期，day---天、week---周、month---月、year---年。 (required)
        :param int top: top数据个数，支持0、5、10、15、20。0代表查询全部设备的上下行流量。 (required)
        :param int begin_time: 起始格林威治时间（时间精度对应到秒）。 (required)
        :param int end_time: 结束格林威治时间（时间精度对应到秒）。 (required)
        :return: DeviceTrafficStatisticResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'time_dimension', 'top', 'begin_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_device_traffic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `query_device_traffic`")
        # verify the required parameter 'time_dimension' is set
        if ('time_dimension' not in params) or (params['time_dimension'] is None):
            raise ValueError("Missing the required parameter `time_dimension` when calling `query_device_traffic`")
        # verify the required parameter 'top' is set
        if ('top' not in params) or (params['top'] is None):
            raise ValueError("Missing the required parameter `top` when calling `query_device_traffic`")
        # verify the required parameter 'begin_time' is set
        if ('begin_time' not in params) or (params['begin_time'] is None):
            raise ValueError("Missing the required parameter `begin_time` when calling `query_device_traffic`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `query_device_traffic`")

        if 'begin_time' in params and params['begin_time'] > 2208959999:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_device_traffic`, must be a value less than or equal to `2208959999`")
        if 'begin_time' in params and params['begin_time'] < 0:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_device_traffic`, must be a value greater than or equal to `0`")
        if 'end_time' in params and params['end_time'] > 2208959999:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_device_traffic`, must be a value less than or equal to `2208959999`")
        if 'end_time' in params and params['end_time'] < 0:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_device_traffic`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []
        if 'time_dimension' in params:
            query_params.append(('timeDimension', params['time_dimension']))
        if 'top' in params:
            query_params.append(('top', params['top']))
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/basicperformance/devicetraffic/statistic/site/{siteId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceTrafficStatisticResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_network_traffic(self, mode, id, time_dimension, begin_time, end_time, **kwargs):
        """
        查询设备网络速率历史数据
        ## 典型场景 ##    提供查询设备网络速率历史数据的接口。           ## 接口功能 ##    查询设备网络速率历史数据。 ## 接口约束 ##    无。   
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_network_traffic(mode, id, time_dimension, begin_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mode: 查询维度，device---设备、site---站点。 (required)
        :param str id: mode为device时该ID为设备ID，mode为site时，该ID为站点ID。 (required)
        :param str time_dimension: 统计周期，day---天、week---周、month---月。 (required)
        :param int begin_time: 起始格林威治时间（时间精度对应到秒）。 (required)
        :param int end_time: 结束格林威治时间（时间精度对应到秒）。 (required)
        :return: NetworkTrafficResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_network_traffic_with_http_info(mode, id, time_dimension, begin_time, end_time, **kwargs)
        else:
            (data) = self.query_network_traffic_with_http_info(mode, id, time_dimension, begin_time, end_time, **kwargs)
            return data

    def query_network_traffic_with_http_info(self, mode, id, time_dimension, begin_time, end_time, **kwargs):
        """
        查询设备网络速率历史数据
        ## 典型场景 ##    提供查询设备网络速率历史数据的接口。           ## 接口功能 ##    查询设备网络速率历史数据。 ## 接口约束 ##    无。   
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_network_traffic_with_http_info(mode, id, time_dimension, begin_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mode: 查询维度，device---设备、site---站点。 (required)
        :param str id: mode为device时该ID为设备ID，mode为site时，该ID为站点ID。 (required)
        :param str time_dimension: 统计周期，day---天、week---周、month---月。 (required)
        :param int begin_time: 起始格林威治时间（时间精度对应到秒）。 (required)
        :param int end_time: 结束格林威治时间（时间精度对应到秒）。 (required)
        :return: NetworkTrafficResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mode', 'id', 'time_dimension', 'begin_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_network_traffic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mode' is set
        if ('mode' not in params) or (params['mode'] is None):
            raise ValueError("Missing the required parameter `mode` when calling `query_network_traffic`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `query_network_traffic`")
        # verify the required parameter 'time_dimension' is set
        if ('time_dimension' not in params) or (params['time_dimension'] is None):
            raise ValueError("Missing the required parameter `time_dimension` when calling `query_network_traffic`")
        # verify the required parameter 'begin_time' is set
        if ('begin_time' not in params) or (params['begin_time'] is None):
            raise ValueError("Missing the required parameter `begin_time` when calling `query_network_traffic`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `query_network_traffic`")

        if 'begin_time' in params and params['begin_time'] > 2208959999:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_network_traffic`, must be a value less than or equal to `2208959999`")
        if 'begin_time' in params and params['begin_time'] < 0:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_network_traffic`, must be a value greater than or equal to `0`")
        if 'end_time' in params and params['end_time'] > 2208959999:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_network_traffic`, must be a value less than or equal to `2208959999`")
        if 'end_time' in params and params['end_time'] < 0:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_network_traffic`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mode' in params:
            query_params.append(('mode', params['mode']))
        if 'id' in params:
            query_params.append(('id', params['id']))
        if 'time_dimension' in params:
            query_params.append(('timeDimension', params['time_dimension']))
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/basicperformance/networktraffic', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='NetworkTrafficResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_site_health_list(self, site_id, **kwargs):
        """
        基于站点的站点健康度查询
        ## 典型场景 ##    根据设备健康度和射频健康度来计算站点健康度。 ## 接口功能 ##    查询基于站点的站点健康度。 ## 接口约束 ##    该接口支持租户下北向管理员（用户角色为“Open Api Operator”）访问，必须在用户会话建立后使用。     
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_site_health_list(site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :return: SiteHealthOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_site_health_list_with_http_info(site_id, **kwargs)
        else:
            (data) = self.query_site_health_list_with_http_info(site_id, **kwargs)
            return data

    def query_site_health_list_with_http_info(self, site_id, **kwargs):
        """
        基于站点的站点健康度查询
        ## 典型场景 ##    根据设备健康度和射频健康度来计算站点健康度。 ## 接口功能 ##    查询基于站点的站点健康度。 ## 接口约束 ##    该接口支持租户下北向管理员（用户角色为“Open Api Operator”）访问，必须在用户会话建立后使用。     
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_site_health_list_with_http_info(site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :return: SiteHealthOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_site_health_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `query_site_health_list`")


        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/basicperformance/siteshealth/{siteId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SiteHealthOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_site_station_statistic(self, site_id, time_dimension, begin_time, end_time, device_type, **kwargs):
        """
        查询站点维度设备连接终端数历史数据
        ## 典型场景 ##    提供查询站点维度设备连接终端数历史数据的接口。           ## 接口功能 ##    支持查询站点维度设备连接终端数历史数据。 ## 接口约束 ##    无。   
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_site_station_statistic(site_id, time_dimension, begin_time, end_time, device_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param str time_dimension: 统计周期，day---天、week---周、month---月、year---年。 (required)
        :param int begin_time: 起始格林威治时间（时间精度对应到秒）。 (required)
        :param int end_time: 结束格林威治时间（时间精度对应到秒）。 (required)
        :param str device_type: 查询过滤的设备类型，AP---AP设备、FW---FW设备、AC---AC（Fit AP）设备、ALL---所有设备。 (required)
        :return: SiteStationStatisticResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_site_station_statistic_with_http_info(site_id, time_dimension, begin_time, end_time, device_type, **kwargs)
        else:
            (data) = self.query_site_station_statistic_with_http_info(site_id, time_dimension, begin_time, end_time, device_type, **kwargs)
            return data

    def query_site_station_statistic_with_http_info(self, site_id, time_dimension, begin_time, end_time, device_type, **kwargs):
        """
        查询站点维度设备连接终端数历史数据
        ## 典型场景 ##    提供查询站点维度设备连接终端数历史数据的接口。           ## 接口功能 ##    支持查询站点维度设备连接终端数历史数据。 ## 接口约束 ##    无。   
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_site_station_statistic_with_http_info(site_id, time_dimension, begin_time, end_time, device_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param str time_dimension: 统计周期，day---天、week---周、month---月、year---年。 (required)
        :param int begin_time: 起始格林威治时间（时间精度对应到秒）。 (required)
        :param int end_time: 结束格林威治时间（时间精度对应到秒）。 (required)
        :param str device_type: 查询过滤的设备类型，AP---AP设备、FW---FW设备、AC---AC（Fit AP）设备、ALL---所有设备。 (required)
        :return: SiteStationStatisticResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'time_dimension', 'begin_time', 'end_time', 'device_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_site_station_statistic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `query_site_station_statistic`")
        # verify the required parameter 'time_dimension' is set
        if ('time_dimension' not in params) or (params['time_dimension'] is None):
            raise ValueError("Missing the required parameter `time_dimension` when calling `query_site_station_statistic`")
        # verify the required parameter 'begin_time' is set
        if ('begin_time' not in params) or (params['begin_time'] is None):
            raise ValueError("Missing the required parameter `begin_time` when calling `query_site_station_statistic`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `query_site_station_statistic`")
        # verify the required parameter 'device_type' is set
        if ('device_type' not in params) or (params['device_type'] is None):
            raise ValueError("Missing the required parameter `device_type` when calling `query_site_station_statistic`")

        if 'begin_time' in params and params['begin_time'] > 2208959999:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_site_station_statistic`, must be a value less than or equal to `2208959999`")
        if 'begin_time' in params and params['begin_time'] < 0:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_site_station_statistic`, must be a value greater than or equal to `0`")
        if 'end_time' in params and params['end_time'] > 2208959999:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_site_station_statistic`, must be a value less than or equal to `2208959999`")
        if 'end_time' in params and params['end_time'] < 0:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_site_station_statistic`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []
        if 'time_dimension' in params:
            query_params.append(('timeDimension', params['time_dimension']))
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/basicperformance/station/sites/{siteId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SiteStationStatisticResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_top_nssid_traffic(self, site_id, begin_time, end_time, time_granularity, top, device_type, **kwargs):
        """
        查询TOP N SSID流量和最近在线用户数
        ## 典型场景 ##    提供站点下TOP N SSID流量和最近在线用户数的查询。 ## 接口功能 ##    查询站点下TOP N SSID流量和最近在线用户数。 ## 接口约束 ##    该接口支持租户下北向管理员（用户角色为“Open Api Operator”）访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_top_nssid_traffic(site_id, begin_time, end_time, time_granularity, top, device_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param int begin_time: 起始格林威治时间(毫秒)。 (required)
        :param int end_time: 结束格林威治时间(毫秒)。 (required)
        :param str time_granularity: 统计周期，day---天、week---周、month---月、year---年。 (required)
        :param str top: top数据个数，取值范围：5、10、15、20。5 - 代表TOP 5、10 - 代表TOP 10、15 - 代表TOP 15、20 - 代表TOP 20。 (required)
        :param str device_type: 设备类型，取值范围：0、1、6。0-代表全部设备，1-代表AP，6-代表WAC。 (required)
        :return: TopNSSIDTrafficListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_top_nssid_traffic_with_http_info(site_id, begin_time, end_time, time_granularity, top, device_type, **kwargs)
        else:
            (data) = self.query_top_nssid_traffic_with_http_info(site_id, begin_time, end_time, time_granularity, top, device_type, **kwargs)
            return data

    def query_top_nssid_traffic_with_http_info(self, site_id, begin_time, end_time, time_granularity, top, device_type, **kwargs):
        """
        查询TOP N SSID流量和最近在线用户数
        ## 典型场景 ##    提供站点下TOP N SSID流量和最近在线用户数的查询。 ## 接口功能 ##    查询站点下TOP N SSID流量和最近在线用户数。 ## 接口约束 ##    该接口支持租户下北向管理员（用户角色为“Open Api Operator”）访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_top_nssid_traffic_with_http_info(site_id, begin_time, end_time, time_granularity, top, device_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param int begin_time: 起始格林威治时间(毫秒)。 (required)
        :param int end_time: 结束格林威治时间(毫秒)。 (required)
        :param str time_granularity: 统计周期，day---天、week---周、month---月、year---年。 (required)
        :param str top: top数据个数，取值范围：5、10、15、20。5 - 代表TOP 5、10 - 代表TOP 10、15 - 代表TOP 15、20 - 代表TOP 20。 (required)
        :param str device_type: 设备类型，取值范围：0、1、6。0-代表全部设备，1-代表AP，6-代表WAC。 (required)
        :return: TopNSSIDTrafficListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'begin_time', 'end_time', 'time_granularity', 'top', 'device_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_top_nssid_traffic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `query_top_nssid_traffic`")
        # verify the required parameter 'begin_time' is set
        if ('begin_time' not in params) or (params['begin_time'] is None):
            raise ValueError("Missing the required parameter `begin_time` when calling `query_top_nssid_traffic`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `query_top_nssid_traffic`")
        # verify the required parameter 'time_granularity' is set
        if ('time_granularity' not in params) or (params['time_granularity'] is None):
            raise ValueError("Missing the required parameter `time_granularity` when calling `query_top_nssid_traffic`")
        # verify the required parameter 'top' is set
        if ('top' not in params) or (params['top'] is None):
            raise ValueError("Missing the required parameter `top` when calling `query_top_nssid_traffic`")
        # verify the required parameter 'device_type' is set
        if ('device_type' not in params) or (params['device_type'] is None):
            raise ValueError("Missing the required parameter `device_type` when calling `query_top_nssid_traffic`")

        if 'begin_time' in params and params['begin_time'] > 9223372036854775807:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_top_nssid_traffic`, must be a value less than or equal to `9223372036854775807`")
        if 'begin_time' in params and params['begin_time'] < 0:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_top_nssid_traffic`, must be a value greater than or equal to `0`")
        if 'end_time' in params and params['end_time'] > 9223372036854775807:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_top_nssid_traffic`, must be a value less than or equal to `9223372036854775807`")
        if 'end_time' in params and params['end_time'] < 0:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_top_nssid_traffic`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))
        if 'time_granularity' in params:
            query_params.append(('timeGranularity', params['time_granularity']))
        if 'top' in params:
            query_params.append(('top', params['top']))
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/basicperformance/topnssidtraffic/{siteId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TopNSSIDTrafficListDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def single_device_performance_detail(self, device_id, **kwargs):
        """
        查询单设备的性能数据
        ## 典型场景 ##  查询单个设备基本信息、总流量以及最近一次设备上报的终端连接数、CPU利用率、上行速率、下行速率。           ## 接口功能 ##  单个设备基本信息、总流量以及最近一次设备上报的终端连接数、CPU利用率、上行速率、下行速率。 ## 接口约束 ##  无。   
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.single_device_performance_detail(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID。 (required)
        :return: DevicePerformanceResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.single_device_performance_detail_with_http_info(device_id, **kwargs)
        else:
            (data) = self.single_device_performance_detail_with_http_info(device_id, **kwargs)
            return data

    def single_device_performance_detail_with_http_info(self, device_id, **kwargs):
        """
        查询单设备的性能数据
        ## 典型场景 ##  查询单个设备基本信息、总流量以及最近一次设备上报的终端连接数、CPU利用率、上行速率、下行速率。           ## 接口功能 ##  单个设备基本信息、总流量以及最近一次设备上报的终端连接数、CPU利用率、上行速率、下行速率。 ## 接口约束 ##  无。   
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.single_device_performance_detail_with_http_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID。 (required)
        :return: DevicePerformanceResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method single_device_performance_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `single_device_performance_detail`")


        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/basicperformance/device/{deviceId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DevicePerformanceResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
