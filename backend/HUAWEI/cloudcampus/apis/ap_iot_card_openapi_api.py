# coding: utf-8

"""
    AP网口IOT插卡管理

    AP网口IOT插卡查询及操作接口。 场景：对AP网口IOT插卡查询及操作的第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class ApIotCardOpenapiApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def card_operation(self, request_dto, **kwargs):
        """
        操作AP网口IOT插卡
        ## 典型场景 ##   操作插卡。 ## 接口功能 ##   对插卡进行重启、重置网络配置等操作。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.card_operation(request_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param IotCardOperationDto request_dto: IOT插卡信息。 (required)
        :return: CardOperationOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.card_operation_with_http_info(request_dto, **kwargs)
        else:
            (data) = self.card_operation_with_http_info(request_dto, **kwargs)
            return data

    def card_operation_with_http_info(self, request_dto, **kwargs):
        """
        操作AP网口IOT插卡
        ## 典型场景 ##   操作插卡。 ## 接口功能 ##   对插卡进行重启、重置网络配置等操作。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.card_operation_with_http_info(request_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param IotCardOperationDto request_dto: IOT插卡信息。 (required)
        :return: CardOperationOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method card_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_dto' is set
        if ('request_dto' not in params) or (params['request_dto'] is None):
            raise ValueError("Missing the required parameter `request_dto` when calling `card_operation`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_dto' in params:
            body_params = params['request_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/apiot/card/operation', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CardOperationOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def exec_iot_command(self, ap_iot_open_comman_in, **kwargs):
        """
        给IOT插卡下命令
        ## 典型场景 ##   给IOT插卡下命令。 ## 接口功能 ##   对单个或者多个插卡进行下发CMD命令等操作。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.exec_iot_command(ap_iot_open_comman_in, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OpenApIotCommandIn ap_iot_open_comman_in: IOT命令下发结构体 (required)
        :return: OpenApIotCommandOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.exec_iot_command_with_http_info(ap_iot_open_comman_in, **kwargs)
        else:
            (data) = self.exec_iot_command_with_http_info(ap_iot_open_comman_in, **kwargs)
            return data

    def exec_iot_command_with_http_info(self, ap_iot_open_comman_in, **kwargs):
        """
        给IOT插卡下命令
        ## 典型场景 ##   给IOT插卡下命令。 ## 接口功能 ##   对单个或者多个插卡进行下发CMD命令等操作。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.exec_iot_command_with_http_info(ap_iot_open_comman_in, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OpenApIotCommandIn ap_iot_open_comman_in: IOT命令下发结构体 (required)
        :return: OpenApIotCommandOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ap_iot_open_comman_in']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exec_iot_command" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ap_iot_open_comman_in' is set
        if ('ap_iot_open_comman_in' not in params) or (params['ap_iot_open_comman_in'] is None):
            raise ValueError("Missing the required parameter `ap_iot_open_comman_in` when calling `exec_iot_command`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ap_iot_open_comman_in' in params:
            body_params = params['ap_iot_open_comman_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/apiot/cmd', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OpenApIotCommandOut',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_ethernet_card_list(self, site_id, **kwargs):
        """
        查询AP网口IOT插卡
        ## 典型场景 ##   查询AP网口IOT插卡列表。 ## 接口功能 ##   查询AP网口IOT插卡列表。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_ethernet_card_list(site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID，UUID格式。 (required)
        :param str keyword: 搜索关键字。匹配字段：设备ESN，是否必填：否。
        :param int page_size: 每页展示数量。是否必填：否。
        :param int page_index: 页面索引。是否必填：否。
        :return: EthernetCardOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_ethernet_card_list_with_http_info(site_id, **kwargs)
        else:
            (data) = self.query_ethernet_card_list_with_http_info(site_id, **kwargs)
            return data

    def query_ethernet_card_list_with_http_info(self, site_id, **kwargs):
        """
        查询AP网口IOT插卡
        ## 典型场景 ##   查询AP网口IOT插卡列表。 ## 接口功能 ##   查询AP网口IOT插卡列表。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_ethernet_card_list_with_http_info(site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID，UUID格式。 (required)
        :param str keyword: 搜索关键字。匹配字段：设备ESN，是否必填：否。
        :param int page_size: 每页展示数量。是否必填：否。
        :param int page_index: 页面索引。是否必填：否。
        :return: EthernetCardOutputDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'keyword', 'page_size', 'page_index']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_ethernet_card_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `query_ethernet_card_list`")

        if 'keyword' in params and len(params['keyword']) > 64:
            raise ValueError("Invalid value for parameter `keyword` when calling `query_ethernet_card_list`, length must be less than or equal to `64`")
        if 'keyword' in params and len(params['keyword']) < 0:
            raise ValueError("Invalid value for parameter `keyword` when calling `query_ethernet_card_list`, length must be greater than or equal to `0`")
        if 'page_size' in params and params['page_size'] > 2147483647:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_ethernet_card_list`, must be a value less than or equal to `2147483647`")
        if 'page_size' in params and params['page_size'] < 0:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_ethernet_card_list`, must be a value greater than or equal to `0`")
        if 'page_index' in params and params['page_index'] > 2147483647:
            raise ValueError("Invalid value for parameter `page_index` when calling `query_ethernet_card_list`, must be a value less than or equal to `2147483647`")
        if 'page_index' in params and params['page_index'] < 0:
            raise ValueError("Invalid value for parameter `page_index` when calling `query_ethernet_card_list`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []
        if 'keyword' in params:
            query_params.append(('keyword', params['keyword']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/apiot/ethernetcardlist/sites/{siteId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EthernetCardOutputDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_iot_command_result(self, site_id, page_size, page_index, **kwargs):
        """
        查询AP IOT命令下发的状态
        ## 典型场景 ##   查询AP IOT命令下发的状态。 ## 接口功能 ##   查询AP IOT命令下发的状态，只返回最新一次下发结果。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_iot_command_result(site_id, page_size, page_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID，UUID格式。 (required)
        :param int page_size: 每页展示数量。 (required)
        :param int page_index: 页面索引。 (required)
        :param str keyword: 搜索关键字。模糊匹配字段：设备名称、设备ESN。
        :return: QueryCmdResultOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_iot_command_result_with_http_info(site_id, page_size, page_index, **kwargs)
        else:
            (data) = self.query_iot_command_result_with_http_info(site_id, page_size, page_index, **kwargs)
            return data

    def query_iot_command_result_with_http_info(self, site_id, page_size, page_index, **kwargs):
        """
        查询AP IOT命令下发的状态
        ## 典型场景 ##   查询AP IOT命令下发的状态。 ## 接口功能 ##   查询AP IOT命令下发的状态，只返回最新一次下发结果。 ## 接口约束 ##   该接口支持租户下北向接口管理访问，必须在用户会话建立后使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_iot_command_result_with_http_info(site_id, page_size, page_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID，UUID格式。 (required)
        :param int page_size: 每页展示数量。 (required)
        :param int page_index: 页面索引。 (required)
        :param str keyword: 搜索关键字。模糊匹配字段：设备名称、设备ESN。
        :return: QueryCmdResultOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'page_size', 'page_index', 'keyword']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_iot_command_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `query_iot_command_result`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `query_iot_command_result`")
        # verify the required parameter 'page_index' is set
        if ('page_index' not in params) or (params['page_index'] is None):
            raise ValueError("Missing the required parameter `page_index` when calling `query_iot_command_result`")

        if 'page_size' in params and params['page_size'] > 100:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_iot_command_result`, must be a value less than or equal to `100`")
        if 'page_size' in params and params['page_size'] < 10:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_iot_command_result`, must be a value greater than or equal to `10`")
        if 'page_index' in params and params['page_index'] > 2147483647:
            raise ValueError("Invalid value for parameter `page_index` when calling `query_iot_command_result`, must be a value less than or equal to `2147483647`")
        if 'page_index' in params and params['page_index'] < 1:
            raise ValueError("Invalid value for parameter `page_index` when calling `query_iot_command_result`, must be a value greater than or equal to `1`")
        if 'keyword' in params and len(params['keyword']) > 64:
            raise ValueError("Invalid value for parameter `keyword` when calling `query_iot_command_result`, length must be less than or equal to `64`")
        if 'keyword' in params and len(params['keyword']) < 0:
            raise ValueError("Invalid value for parameter `keyword` when calling `query_iot_command_result`, length must be greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []
        if 'keyword' in params:
            query_params.append(('keyword', params['keyword']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/oamservice/apiot/cmd/result/{siteId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryCmdResultOut',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
