# coding: utf-8

"""
    终端用户列表信息查询

    · 站点维度终端用户列表查询 · 站点维度TopN终端流量数据查询 · 设备维度下终端用户信息查询 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class StationOpenApiApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def query_device_station_info(self, device_id, page_index, page_size, **kwargs):
        """
        查询设备维度下终端用户信息
        ## 典型场景 ##    设备维度下终端用户信息查询接口。 ## 接口功能 ##    基于单设备查询用户列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_device_station_info(device_id, page_index, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID。 (required)
        :param int page_index: 分页查询的页码。 (required)
        :param int page_size: 分页查询每页数量。 (required)
        :param str status: 用户在线状态，online---在线、offline---离线，不填代表查询全部状态。
        :param str terminal_mac: 终端MAC，需要符合mac地址的格式，例如B0:06:00:0A:69:F5，需要区分大小写字母。
        :param str terminal_ip: 终端IP，需要符合IP地址的格式，例如192.168.1.2。
        :param str ssid: WiFi名。
        :param str sort_key: 排序列，所有支持accessTime/accessType/account/ap/authType/channel/cumulativeTraffic/downwardSpeed/dualFrequency/frequencyBand/hostName/mode/onlineStatus/onlineTime/packageLossRate/retransRate/rssi/sendPackageSpeed/signalNoiseRatio/ssid/stickyTags/terminalIP/terminalMac/timeStamp/upwardSpeed/vlan均支持排序。如：+accessTime:按accesstime升序，-accessTime:按accessTime降序。
        :param str account: 用户名。
        :return: StationDataResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_device_station_info_with_http_info(device_id, page_index, page_size, **kwargs)
        else:
            (data) = self.query_device_station_info_with_http_info(device_id, page_index, page_size, **kwargs)
            return data

    def query_device_station_info_with_http_info(self, device_id, page_index, page_size, **kwargs):
        """
        查询设备维度下终端用户信息
        ## 典型场景 ##    设备维度下终端用户信息查询接口。 ## 接口功能 ##    基于单设备查询用户列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_device_station_info_with_http_info(device_id, page_index, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: 设备ID。 (required)
        :param int page_index: 分页查询的页码。 (required)
        :param int page_size: 分页查询每页数量。 (required)
        :param str status: 用户在线状态，online---在线、offline---离线，不填代表查询全部状态。
        :param str terminal_mac: 终端MAC，需要符合mac地址的格式，例如B0:06:00:0A:69:F5，需要区分大小写字母。
        :param str terminal_ip: 终端IP，需要符合IP地址的格式，例如192.168.1.2。
        :param str ssid: WiFi名。
        :param str sort_key: 排序列，所有支持accessTime/accessType/account/ap/authType/channel/cumulativeTraffic/downwardSpeed/dualFrequency/frequencyBand/hostName/mode/onlineStatus/onlineTime/packageLossRate/retransRate/rssi/sendPackageSpeed/signalNoiseRatio/ssid/stickyTags/terminalIP/terminalMac/timeStamp/upwardSpeed/vlan均支持排序。如：+accessTime:按accesstime升序，-accessTime:按accessTime降序。
        :param str account: 用户名。
        :return: StationDataResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'page_index', 'page_size', 'status', 'terminal_mac', 'terminal_ip', 'ssid', 'sort_key', 'account']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_device_station_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `query_device_station_info`")
        # verify the required parameter 'page_index' is set
        if ('page_index' not in params) or (params['page_index'] is None):
            raise ValueError("Missing the required parameter `page_index` when calling `query_device_station_info`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `query_device_station_info`")

        if 'page_index' in params and params['page_index'] > 65535:
            raise ValueError("Invalid value for parameter `page_index` when calling `query_device_station_info`, must be a value less than or equal to `65535`")
        if 'page_index' in params and params['page_index'] < 1:
            raise ValueError("Invalid value for parameter `page_index` when calling `query_device_station_info`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 100:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_device_station_info`, must be a value less than or equal to `100`")
        if 'page_size' in params and params['page_size'] < 20:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_device_station_info`, must be a value greater than or equal to `20`")
        if 'terminal_mac' in params and len(params['terminal_mac']) > 256:
            raise ValueError("Invalid value for parameter `terminal_mac` when calling `query_device_station_info`, length must be less than or equal to `256`")
        if 'terminal_mac' in params and len(params['terminal_mac']) < 0:
            raise ValueError("Invalid value for parameter `terminal_mac` when calling `query_device_station_info`, length must be greater than or equal to `0`")
        if 'terminal_ip' in params and len(params['terminal_ip']) > 256:
            raise ValueError("Invalid value for parameter `terminal_ip` when calling `query_device_station_info`, length must be less than or equal to `256`")
        if 'terminal_ip' in params and len(params['terminal_ip']) < 0:
            raise ValueError("Invalid value for parameter `terminal_ip` when calling `query_device_station_info`, length must be greater than or equal to `0`")
        if 'ssid' in params and len(params['ssid']) > 256:
            raise ValueError("Invalid value for parameter `ssid` when calling `query_device_station_info`, length must be less than or equal to `256`")
        if 'ssid' in params and len(params['ssid']) < 0:
            raise ValueError("Invalid value for parameter `ssid` when calling `query_device_station_info`, length must be greater than or equal to `0`")
        if 'sort_key' in params and len(params['sort_key']) > 256:
            raise ValueError("Invalid value for parameter `sort_key` when calling `query_device_station_info`, length must be less than or equal to `256`")
        if 'sort_key' in params and len(params['sort_key']) < 0:
            raise ValueError("Invalid value for parameter `sort_key` when calling `query_device_station_info`, length must be greater than or equal to `0`")
        if 'account' in params and len(params['account']) > 256:
            raise ValueError("Invalid value for parameter `account` when calling `query_device_station_info`, length must be less than or equal to `256`")
        if 'account' in params and len(params['account']) < 0:
            raise ValueError("Invalid value for parameter `account` when calling `query_device_station_info`, length must be greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'status' in params:
            query_params.append(('status', params['status']))
        if 'terminal_mac' in params:
            query_params.append(('terminalMac', params['terminal_mac']))
        if 'terminal_ip' in params:
            query_params.append(('terminalIP', params['terminal_ip']))
        if 'ssid' in params:
            query_params.append(('ssid', params['ssid']))
        if 'sort_key' in params:
            query_params.append(('sortKey', params['sort_key']))
        if 'account' in params:
            query_params.append(('account', params['account']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/station/client/device/{deviceId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StationDataResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_site_station_info(self, site_id, page_index, page_size, **kwargs):
        """
        查询站点维度下终端用户信息
        ## 典型场景 ##    提供站点维度查询终端用户信息列表的接口。 ## 接口功能 ##    基于站点查询终端用户列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_site_station_info(site_id, page_index, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param int page_index: 分页查询的页码。 (required)
        :param int page_size: 分页查询每页数量。 (required)
        :param str status: 用户在线状态，online---在线、offline---离线，不填代表查询全部状态。
        :param str terminal_mac: 终端MAC，需要符合MAC地址的格式，例如B0:06:00:0A:69:F5，需要区分大小写字母。
        :param str terminal_ip: 终端IP，需要符合IP地址的格式，例如192.168.1.2。
        :param str ssid: SSID名称。
        :param str sort_key: 排序字段名称以及排序方式。支持按如下字段之一排序：accessTime/accessType/account/deviceName/authType/channel/cumulativeTraffic/downwardSpeed/dualFrequency/frequencyBand/hostName/mode/onlineStatus/onlineTime/packageLossRate/retransRate/rssi/sendPackageSpeed/signalNoiseRatio/ssid/stickyTags/terminalIP/terminalMac/timeStamp/upwardSpeed/vlan。如：+accessTime:按accesstime升序，-accessTime:按accessTime降序。
        :param str account: 用户名称。
        :return: StationDataResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_site_station_info_with_http_info(site_id, page_index, page_size, **kwargs)
        else:
            (data) = self.query_site_station_info_with_http_info(site_id, page_index, page_size, **kwargs)
            return data

    def query_site_station_info_with_http_info(self, site_id, page_index, page_size, **kwargs):
        """
        查询站点维度下终端用户信息
        ## 典型场景 ##    提供站点维度查询终端用户信息列表的接口。 ## 接口功能 ##    基于站点查询终端用户列表。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_site_station_info_with_http_info(site_id, page_index, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param int page_index: 分页查询的页码。 (required)
        :param int page_size: 分页查询每页数量。 (required)
        :param str status: 用户在线状态，online---在线、offline---离线，不填代表查询全部状态。
        :param str terminal_mac: 终端MAC，需要符合MAC地址的格式，例如B0:06:00:0A:69:F5，需要区分大小写字母。
        :param str terminal_ip: 终端IP，需要符合IP地址的格式，例如192.168.1.2。
        :param str ssid: SSID名称。
        :param str sort_key: 排序字段名称以及排序方式。支持按如下字段之一排序：accessTime/accessType/account/deviceName/authType/channel/cumulativeTraffic/downwardSpeed/dualFrequency/frequencyBand/hostName/mode/onlineStatus/onlineTime/packageLossRate/retransRate/rssi/sendPackageSpeed/signalNoiseRatio/ssid/stickyTags/terminalIP/terminalMac/timeStamp/upwardSpeed/vlan。如：+accessTime:按accesstime升序，-accessTime:按accessTime降序。
        :param str account: 用户名称。
        :return: StationDataResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'page_index', 'page_size', 'status', 'terminal_mac', 'terminal_ip', 'ssid', 'sort_key', 'account']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_site_station_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `query_site_station_info`")
        # verify the required parameter 'page_index' is set
        if ('page_index' not in params) or (params['page_index'] is None):
            raise ValueError("Missing the required parameter `page_index` when calling `query_site_station_info`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `query_site_station_info`")

        if 'page_index' in params and params['page_index'] > 65535:
            raise ValueError("Invalid value for parameter `page_index` when calling `query_site_station_info`, must be a value less than or equal to `65535`")
        if 'page_index' in params and params['page_index'] < 1:
            raise ValueError("Invalid value for parameter `page_index` when calling `query_site_station_info`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 100:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_site_station_info`, must be a value less than or equal to `100`")
        if 'page_size' in params and params['page_size'] < 20:
            raise ValueError("Invalid value for parameter `page_size` when calling `query_site_station_info`, must be a value greater than or equal to `20`")
        if 'terminal_mac' in params and len(params['terminal_mac']) > 256:
            raise ValueError("Invalid value for parameter `terminal_mac` when calling `query_site_station_info`, length must be less than or equal to `256`")
        if 'terminal_mac' in params and len(params['terminal_mac']) < 0:
            raise ValueError("Invalid value for parameter `terminal_mac` when calling `query_site_station_info`, length must be greater than or equal to `0`")
        if 'terminal_ip' in params and len(params['terminal_ip']) > 256:
            raise ValueError("Invalid value for parameter `terminal_ip` when calling `query_site_station_info`, length must be less than or equal to `256`")
        if 'ssid' in params and len(params['ssid']) > 256:
            raise ValueError("Invalid value for parameter `ssid` when calling `query_site_station_info`, length must be less than or equal to `256`")
        if 'ssid' in params and len(params['ssid']) < 1:
            raise ValueError("Invalid value for parameter `ssid` when calling `query_site_station_info`, length must be greater than or equal to `1`")
        if 'sort_key' in params and len(params['sort_key']) > 256:
            raise ValueError("Invalid value for parameter `sort_key` when calling `query_site_station_info`, length must be less than or equal to `256`")
        if 'sort_key' in params and len(params['sort_key']) < 0:
            raise ValueError("Invalid value for parameter `sort_key` when calling `query_site_station_info`, length must be greater than or equal to `0`")
        if 'account' in params and len(params['account']) > 256:
            raise ValueError("Invalid value for parameter `account` when calling `query_site_station_info`, length must be less than or equal to `256`")
        if 'account' in params and len(params['account']) < 0:
            raise ValueError("Invalid value for parameter `account` when calling `query_site_station_info`, length must be greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))
        if 'terminal_mac' in params:
            query_params.append(('terminalMac', params['terminal_mac']))
        if 'terminal_ip' in params:
            query_params.append(('terminalIP', params['terminal_ip']))
        if 'ssid' in params:
            query_params.append(('ssid', params['ssid']))
        if 'sort_key' in params:
            query_params.append(('sortKey', params['sort_key']))
        if 'account' in params:
            query_params.append(('account', params['account']))
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/station/client/site/{siteId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StationDataResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_traffic_statistic_info(self, site_id, device_type, time_dimension, top, begin_time, end_time, **kwargs):
        """
        查询站点维度下TopN终端流量数据
        ## 典型场景 ##    提供查询指定站点的按照终端流量大小的Top N终端数据。 ## 接口功能 ##    基于站点查询TopN终端流量数据。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_traffic_statistic_info(site_id, device_type, time_dimension, top, begin_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param str device_type: 查询过滤的设备类型，AP---AP设备、FW---FW设备、AC---AC（Fit AP）设备、ALL---所有设备。 (required)
        :param str time_dimension: 统计周期，day---天、week---周、month---月、year---年。 (required)
        :param int top: top数据个数，支持0、5、10、15、20。0代表查询所有终端流量。 (required)
        :param int begin_time: 起始格林威治时间（时间精度对应到秒）。 (required)
        :param int end_time: 结束格林威治时间（时间精度对应到秒）。 (required)
        :return: TrafficStatisticDataResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_traffic_statistic_info_with_http_info(site_id, device_type, time_dimension, top, begin_time, end_time, **kwargs)
        else:
            (data) = self.query_traffic_statistic_info_with_http_info(site_id, device_type, time_dimension, top, begin_time, end_time, **kwargs)
            return data

    def query_traffic_statistic_info_with_http_info(self, site_id, device_type, time_dimension, top, begin_time, end_time, **kwargs):
        """
        查询站点维度下TopN终端流量数据
        ## 典型场景 ##    提供查询指定站点的按照终端流量大小的Top N终端数据。 ## 接口功能 ##    基于站点查询TopN终端流量数据。 ## 接口约束 ##    只有租户管理员获取token并建立会话后才能调用该接口。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_traffic_statistic_info_with_http_info(site_id, device_type, time_dimension, top, begin_time, end_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: 站点ID。 (required)
        :param str device_type: 查询过滤的设备类型，AP---AP设备、FW---FW设备、AC---AC（Fit AP）设备、ALL---所有设备。 (required)
        :param str time_dimension: 统计周期，day---天、week---周、month---月、year---年。 (required)
        :param int top: top数据个数，支持0、5、10、15、20。0代表查询所有终端流量。 (required)
        :param int begin_time: 起始格林威治时间（时间精度对应到秒）。 (required)
        :param int end_time: 结束格林威治时间（时间精度对应到秒）。 (required)
        :return: TrafficStatisticDataResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'device_type', 'time_dimension', 'top', 'begin_time', 'end_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_traffic_statistic_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `query_traffic_statistic_info`")
        # verify the required parameter 'device_type' is set
        if ('device_type' not in params) or (params['device_type'] is None):
            raise ValueError("Missing the required parameter `device_type` when calling `query_traffic_statistic_info`")
        # verify the required parameter 'time_dimension' is set
        if ('time_dimension' not in params) or (params['time_dimension'] is None):
            raise ValueError("Missing the required parameter `time_dimension` when calling `query_traffic_statistic_info`")
        # verify the required parameter 'top' is set
        if ('top' not in params) or (params['top'] is None):
            raise ValueError("Missing the required parameter `top` when calling `query_traffic_statistic_info`")
        # verify the required parameter 'begin_time' is set
        if ('begin_time' not in params) or (params['begin_time'] is None):
            raise ValueError("Missing the required parameter `begin_time` when calling `query_traffic_statistic_info`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `query_traffic_statistic_info`")

        if 'begin_time' in params and params['begin_time'] > 2208959999:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_traffic_statistic_info`, must be a value less than or equal to `2208959999`")
        if 'begin_time' in params and params['begin_time'] < 0:
            raise ValueError("Invalid value for parameter `begin_time` when calling `query_traffic_statistic_info`, must be a value greater than or equal to `0`")
        if 'end_time' in params and params['end_time'] > 2208959999:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_traffic_statistic_info`, must be a value less than or equal to `2208959999`")
        if 'end_time' in params and params['end_time'] < 0:
            raise ValueError("Invalid value for parameter `end_time` when calling `query_traffic_statistic_info`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = []
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))
        if 'time_dimension' in params:
            query_params.append(('timeDimension', params['time_dimension']))
        if 'top' in params:
            query_params.append(('top', params['top']))
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/controller/campus/v1/performanceservice/station/traffic/statistic/site/{siteId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TrafficStatisticDataResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
