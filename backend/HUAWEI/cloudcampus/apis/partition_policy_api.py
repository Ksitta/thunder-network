# coding: utf-8

"""
    CIS服务接口

    CIS操作接口说明： 1、创建CIS隔离 2、创建CIS阻断 3、撤销CIS阻断/隔离 4、阻断隔离应用状态查询 5、CIS策略命中率查询 

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient
from .gettoken_api import GetTokenApi


class PartitionPolicyApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        # config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            print('api_client cannot be None.')
            # if not config.api_client:
            #     config.api_client = ApiClient()
            # self.api_client = config.api_client

    def delete_threat_defense(self, block_id, **kwargs):
        """
        撤销CIS阻断/隔离
        ## 操作场景 ##   威胁解除，撤销阻断/隔离。 ## 接口功能 ##   撤销CIS阻断/隔离。 ## 接口约束 ##   拥有北向管理员角色的用户才有权限使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_threat_defense(block_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str block_id: CIS阻断/隔离ID，UUID格式。 (required)
        :return: CisResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_threat_defense_with_http_info(block_id, **kwargs)
        else:
            (data) = self.delete_threat_defense_with_http_info(block_id, **kwargs)
            return data

    def delete_threat_defense_with_http_info(self, block_id, **kwargs):
        """
        撤销CIS阻断/隔离
        ## 操作场景 ##   威胁解除，撤销阻断/隔离。 ## 接口功能 ##   撤销CIS阻断/隔离。 ## 接口约束 ##   拥有北向管理员角色的用户才有权限使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_threat_defense_with_http_info(block_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str block_id: CIS阻断/隔离ID，UUID格式。 (required)
        :return: CisResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['block_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_threat_defense" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'block_id' is set
        if ('block_id' not in params) or (params['block_id'] is None):
            raise ValueError("Missing the required parameter `block_id` when calling `delete_threat_defense`")

        if 'block_id' in params and len(params['block_id']) > 36:
            raise ValueError("Invalid value for parameter `block_id` when calling `delete_threat_defense`, length must be less than or equal to `36`")
        if 'block_id' in params and len(params['block_id']) < 36:
            raise ValueError("Invalid value for parameter `block_id` when calling `delete_threat_defense`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}
        if 'block_id' in params:
            path_params['blockId'] = params['block_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/secm/public/services/fwaas/v1/threatdefense/{blockId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CisResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def interdiction(self, interdiction_dto, **kwargs):
        """
        创建CIS阻断策略
        ## 操作场景 ##   向防火墙/交换机下发阻断策略，阻断攻击源。 ## 接口功能 ##   创建CIS阻断策略。 ## 接口约束 ##   拥有北向管理员角色的用户才有权限使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.interdiction(interdiction_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param InterdictionDTO interdiction_dto: 创建CIS阻断输入。 (required)
        :return: CisResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.interdiction_with_http_info(interdiction_dto, **kwargs)
        else:
            (data) = self.interdiction_with_http_info(interdiction_dto, **kwargs)
            return data

    def interdiction_with_http_info(self, interdiction_dto, **kwargs):
        """
        创建CIS阻断策略
        ## 操作场景 ##   向防火墙/交换机下发阻断策略，阻断攻击源。 ## 接口功能 ##   创建CIS阻断策略。 ## 接口约束 ##   拥有北向管理员角色的用户才有权限使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.interdiction_with_http_info(interdiction_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param InterdictionDTO interdiction_dto: 创建CIS阻断输入。 (required)
        :return: CisResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interdiction_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method interdiction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interdiction_dto' is set
        if ('interdiction_dto' not in params) or (params['interdiction_dto'] is None):
            raise ValueError("Missing the required parameter `interdiction_dto` when calling `interdiction`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'interdiction_dto' in params:
            body_params = params['interdiction_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/secm/public/services/fwaas/v1/threatdefense/interdiction', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CisResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def isolate_vm(self, isolation_dto, **kwargs):
        """
        创建CIS隔离策略
        ## 操作场景 ##   向防火墙/交换机下发创建隔离策略，隔离攻击源。 ## 接口功能 ##   创建CIS隔离策略。 ## 接口约束 ##   拥有北向管理员角色的用户才有权限使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.isolate_vm(isolation_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param IsolationDTO isolation_dto: 创建CIS隔离输入。 (required)
        :return: CisResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.isolate_vm_with_http_info(isolation_dto, **kwargs)
        else:
            (data) = self.isolate_vm_with_http_info(isolation_dto, **kwargs)
            return data

    def isolate_vm_with_http_info(self, isolation_dto, **kwargs):
        """
        创建CIS隔离策略
        ## 操作场景 ##   向防火墙/交换机下发创建隔离策略，隔离攻击源。 ## 接口功能 ##   创建CIS隔离策略。 ## 接口约束 ##   拥有北向管理员角色的用户才有权限使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.isolate_vm_with_http_info(isolation_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param IsolationDTO isolation_dto: 创建CIS隔离输入。 (required)
        :return: CisResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['isolation_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method isolate_vm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'isolation_dto' is set
        if ('isolation_dto' not in params) or (params['isolation_dto'] is None):
            raise ValueError("Missing the required parameter `isolation_dto` when calling `isolate_vm`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'isolation_dto' in params:
            body_params = params['isolation_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/secm/public/services/fwaas/v1/threatdefense/isolation', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CisResponseDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_hits(self, policy_hits_dto, **kwargs):
        """
        CIS策略命中率查询
        ## 操作场景 ##   查询设定时间内CIS策略的命中率。 ## 接口功能 ##   CIS策略命中率查询。 ## 接口约束 ##   拥有北向管理员角色的用户才有权限使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_hits(policy_hits_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PolicyHitsDTO policy_hits_dto: CIS策略命中率查询输入。 (required)
        :return: QueryHitsResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_hits_with_http_info(policy_hits_dto, **kwargs)
        else:
            (data) = self.query_hits_with_http_info(policy_hits_dto, **kwargs)
            return data

    def query_hits_with_http_info(self, policy_hits_dto, **kwargs):
        """
        CIS策略命中率查询
        ## 操作场景 ##   查询设定时间内CIS策略的命中率。 ## 接口功能 ##   CIS策略命中率查询。 ## 接口约束 ##   拥有北向管理员角色的用户才有权限使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_hits_with_http_info(policy_hits_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PolicyHitsDTO policy_hits_dto: CIS策略命中率查询输入。 (required)
        :return: QueryHitsResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_hits_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_hits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_hits_dto' is set
        if ('policy_hits_dto' not in params) or (params['policy_hits_dto'] is None):
            raise ValueError("Missing the required parameter `policy_hits_dto` when calling `query_hits`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'policy_hits_dto' in params:
            body_params = params['policy_hits_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/secm/public/services/fwaas/v1/threatdefense/policyhits', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryHitsResponseDTO',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_status(self, block_id, **kwargs):
        """
        查询阻断/隔离应用状态
        ## 操作场景 ##   查询阻断隔离策略的下发状态。 ## 接口功能 ##   阻断隔离应用状态查询。 ## 接口约束 ##   拥有北向管理员角色的用户才有权限使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_status(block_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str block_id: CIS阻断/隔离ID，UUID格式。 (required)
        :return: QueryStatusResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_status_with_http_info(block_id, **kwargs)
        else:
            (data) = self.query_status_with_http_info(block_id, **kwargs)
            return data

    def query_status_with_http_info(self, block_id, **kwargs):
        """
        查询阻断/隔离应用状态
        ## 操作场景 ##   查询阻断隔离策略的下发状态。 ## 接口功能 ##   阻断隔离应用状态查询。 ## 接口约束 ##   拥有北向管理员角色的用户才有权限使用。 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_status_with_http_info(block_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str block_id: CIS阻断/隔离ID，UUID格式。 (required)
        :return: QueryStatusResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['block_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'block_id' is set
        if ('block_id' not in params) or (params['block_id'] is None):
            raise ValueError("Missing the required parameter `block_id` when calling `query_status`")

        if 'block_id' in params and len(params['block_id']) > 36:
            raise ValueError("Invalid value for parameter `block_id` when calling `query_status`, length must be less than or equal to `36`")
        if 'block_id' in params and len(params['block_id']) < 36:
            raise ValueError("Invalid value for parameter `block_id` when calling `query_status`, length must be greater than or equal to `36`")

        collection_formats = {}

        path_params = {}
        if 'block_id' in params:
            path_params['blockId'] = params['block_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/secm/public/services/fwaas/v1/threatdefense/status/{blockId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryStatusResponseDTO',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
