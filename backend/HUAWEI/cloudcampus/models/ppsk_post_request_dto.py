# coding: utf-8

"""
    PPSK帐号配置

    PPSK帐号管理北向接口，主要包括： · 创建PPSK帐号 · 修改PPSK帐号 · 删除PPSK帐号 · 查询PPSK帐号 

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PPSKPostRequestDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'psk': 'str',
        'vlan': 'int',
        'description': 'str',
        'acc_dev_num': 'int',
        'mac_address': 'str',
        'ssid_name': 'str',
        'account': 'str'
    }

    attribute_map = {
        'psk': 'psk',
        'vlan': 'vlan',
        'description': 'description',
        'acc_dev_num': 'accDevNum',
        'mac_address': 'macAddress',
        'ssid_name': 'ssidName',
        'account': 'account'
    }

    def __init__(self, psk=None, vlan=None, description=None, acc_dev_num=None, mac_address=None, ssid_name=None, account=None):
        """
        PPSKPostRequestDto - a model defined in Swagger
        """

        self._psk = None
        self._vlan = None
        self._description = None
        self._acc_dev_num = None
        self._mac_address = None
        self._ssid_name = None
        self._account = None

        if psk is not None:
          self.psk = psk
        if vlan is not None:
          self.vlan = vlan
        if description is not None:
          self.description = description
        if acc_dev_num is not None:
          self.acc_dev_num = acc_dev_num
        if mac_address is not None:
          self.mac_address = mac_address
        if ssid_name is not None:
          self.ssid_name = ssid_name
        if account is not None:
          self.account = account

    @property
    def psk(self):
        """
        Gets the psk of this PPSKPostRequestDto.
        接入密钥。

        :return: The psk of this PPSKPostRequestDto.
        :rtype: str
        """
        return self._psk

    @psk.setter
    def psk(self, psk):
        """
        Sets the psk of this PPSKPostRequestDto.
        接入密钥。

        :param psk: The psk of this PPSKPostRequestDto.
        :type: str
        """
        if psk is not None and len(psk) > 63:
            raise ValueError("Invalid value for `psk`, length must be less than or equal to `63`")
        if psk is not None and len(psk) < 8:
            raise ValueError("Invalid value for `psk`, length must be greater than or equal to `8`")

        self._psk = psk

    @property
    def vlan(self):
        """
        Gets the vlan of this PPSKPostRequestDto.
        绑定VLAN，值为0表示不绑定VLAN。

        :return: The vlan of this PPSKPostRequestDto.
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """
        Sets the vlan of this PPSKPostRequestDto.
        绑定VLAN，值为0表示不绑定VLAN。

        :param vlan: The vlan of this PPSKPostRequestDto.
        :type: int
        """
        if vlan is not None and vlan > 4094:
            raise ValueError("Invalid value for `vlan`, must be a value less than or equal to `4094`")
        if vlan is not None and vlan < 0:
            raise ValueError("Invalid value for `vlan`, must be a value greater than or equal to `0`")

        self._vlan = vlan

    @property
    def description(self):
        """
        Gets the description of this PPSKPostRequestDto.
        描述。

        :return: The description of this PPSKPostRequestDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PPSKPostRequestDto.
        描述。

        :param description: The description of this PPSKPostRequestDto.
        :type: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def acc_dev_num(self):
        """
        Gets the acc_dev_num of this PPSKPostRequestDto.
        接入终端数，值为0表示不限制接入终端数。

        :return: The acc_dev_num of this PPSKPostRequestDto.
        :rtype: int
        """
        return self._acc_dev_num

    @acc_dev_num.setter
    def acc_dev_num(self, acc_dev_num):
        """
        Sets the acc_dev_num of this PPSKPostRequestDto.
        接入终端数，值为0表示不限制接入终端数。

        :param acc_dev_num: The acc_dev_num of this PPSKPostRequestDto.
        :type: int
        """
        if acc_dev_num is not None and acc_dev_num > 16:
            raise ValueError("Invalid value for `acc_dev_num`, must be a value less than or equal to `16`")
        if acc_dev_num is not None and acc_dev_num < 0:
            raise ValueError("Invalid value for `acc_dev_num`, must be a value greater than or equal to `0`")

        self._acc_dev_num = acc_dev_num

    @property
    def mac_address(self):
        """
        Gets the mac_address of this PPSKPostRequestDto.
        帐号绑定的MAC地址。

        :return: The mac_address of this PPSKPostRequestDto.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this PPSKPostRequestDto.
        帐号绑定的MAC地址。

        :param mac_address: The mac_address of this PPSKPostRequestDto.
        :type: str
        """

        self._mac_address = mac_address

    @property
    def ssid_name(self):
        """
        Gets the ssid_name of this PPSKPostRequestDto.
        SSID名称。

        :return: The ssid_name of this PPSKPostRequestDto.
        :rtype: str
        """
        return self._ssid_name

    @ssid_name.setter
    def ssid_name(self, ssid_name):
        """
        Sets the ssid_name of this PPSKPostRequestDto.
        SSID名称。

        :param ssid_name: The ssid_name of this PPSKPostRequestDto.
        :type: str
        """
        if ssid_name is not None and len(ssid_name) > 32:
            raise ValueError("Invalid value for `ssid_name`, length must be less than or equal to `32`")
        if ssid_name is not None and len(ssid_name) < 1:
            raise ValueError("Invalid value for `ssid_name`, length must be greater than or equal to `1`")

        self._ssid_name = ssid_name

    @property
    def account(self):
        """
        Gets the account of this PPSKPostRequestDto.
        PPSK帐号名称。

        :return: The account of this PPSKPostRequestDto.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this PPSKPostRequestDto.
        PPSK帐号名称。

        :param account: The account of this PPSKPostRequestDto.
        :type: str
        """
        if account is not None and len(account) > 64:
            raise ValueError("Invalid value for `account`, length must be less than or equal to `64`")
        if account is not None and len(account) < 1:
            raise ValueError("Invalid value for `account`, length must be greater than or equal to `1`")

        self._account = account

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PPSKPostRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
