# coding: utf-8

"""
    设备升级

    · 查询设备文件 · 创建站点升级 · 查询站点升级 · 查询设备升级 · 取消设备升级 · 删除站点升级 · 重新升级设备 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DownloadPolicyDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'day': 'str',
        'daytime': 'str',
        'time_zone_off_set': 'str'
    }

    attribute_map = {
        'type': 'type',
        'day': 'day',
        'daytime': 'daytime',
        'time_zone_off_set': 'timeZoneOffSet'
    }

    def __init__(self, type=None, day=None, daytime=None, time_zone_off_set=None):
        """
        DownloadPolicyDto - a model defined in Swagger
        """

        self._type = None
        self._day = None
        self._daytime = None
        self._time_zone_off_set = None

        if type is not None:
          self.type = type
        if day is not None:
          self.day = day
        if daytime is not None:
          self.daytime = daytime
        if time_zone_off_set is not None:
          self.time_zone_off_set = time_zone_off_set

    @property
    def type(self):
        """
        Gets the type of this DownloadPolicyDto.
        下载策略，immediately（立即下载），weektime（周期下载）二者之一。 如果是立即下载场景，type填写immediately，其余字段不用填写； 如果是周期下载场景，type填写weektime，day，daytime和timeZoneOffSet会生效。 

        :return: The type of this DownloadPolicyDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this DownloadPolicyDto.
        下载策略，immediately（立即下载），weektime（周期下载）二者之一。 如果是立即下载场景，type填写immediately，其余字段不用填写； 如果是周期下载场景，type填写weektime，day，daytime和timeZoneOffSet会生效。 

        :param type: The type of this DownloadPolicyDto.
        :type: str
        """
        if type is not None and len(type) > 256:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `256`")
        if type is not None and len(type) < 0:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `0`")

        self._type = type

    @property
    def day(self):
        """
        Gets the day of this DownloadPolicyDto.
        周几。

        :return: The day of this DownloadPolicyDto.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """
        Sets the day of this DownloadPolicyDto.
        周几。

        :param day: The day of this DownloadPolicyDto.
        :type: str
        """
        if day is not None and len(day) > 256:
            raise ValueError("Invalid value for `day`, length must be less than or equal to `256`")
        if day is not None and len(day) < 0:
            raise ValueError("Invalid value for `day`, length must be greater than or equal to `0`")

        self._day = day

    @property
    def daytime(self):
        """
        Gets the daytime of this DownloadPolicyDto.
        按周下载，配置下载时间，格式为hh:mm:ss。

        :return: The daytime of this DownloadPolicyDto.
        :rtype: str
        """
        return self._daytime

    @daytime.setter
    def daytime(self, daytime):
        """
        Sets the daytime of this DownloadPolicyDto.
        按周下载，配置下载时间，格式为hh:mm:ss。

        :param daytime: The daytime of this DownloadPolicyDto.
        :type: str
        """
        if daytime is not None and len(daytime) > 256:
            raise ValueError("Invalid value for `daytime`, length must be less than or equal to `256`")
        if daytime is not None and len(daytime) < 0:
            raise ValueError("Invalid value for `daytime`, length must be greater than or equal to `0`")

        self._daytime = daytime

    @property
    def time_zone_off_set(self):
        """
        Gets the time_zone_off_set of this DownloadPolicyDto.
        时区，UTC+08:00。

        :return: The time_zone_off_set of this DownloadPolicyDto.
        :rtype: str
        """
        return self._time_zone_off_set

    @time_zone_off_set.setter
    def time_zone_off_set(self, time_zone_off_set):
        """
        Sets the time_zone_off_set of this DownloadPolicyDto.
        时区，UTC+08:00。

        :param time_zone_off_set: The time_zone_off_set of this DownloadPolicyDto.
        :type: str
        """
        if time_zone_off_set is not None and len(time_zone_off_set) > 256:
            raise ValueError("Invalid value for `time_zone_off_set`, length must be less than or equal to `256`")
        if time_zone_off_set is not None and len(time_zone_off_set) < 0:
            raise ValueError("Invalid value for `time_zone_off_set`, length must be greater than or equal to `0`")

        self._time_zone_off_set = time_zone_off_set

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DownloadPolicyDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
