# coding: utf-8

"""
    设备基础性能数据信息查询

    · 查询设备网络速率历史数据 · 查询站点维度TopN设备或者全部设备的上行流量、下行流量 · 查询站点维度设备连接终端数历史数据 · 查询单设备连接终端数历史数据 · 查询租户维度下设备状态历史数据 · 查询基于站点的站点健康度和设备健康度 · 查询站点下TOP N SSID流量和最近在线用户数 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceCountTrend(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'int',
        'device_online_count': 'int',
        'device_offline_count': 'int',
        'device_unregistered_count': 'int'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'device_online_count': 'deviceOnlineCount',
        'device_offline_count': 'deviceOfflineCount',
        'device_unregistered_count': 'deviceUnregisteredCount'
    }

    def __init__(self, timestamp=None, device_online_count=None, device_offline_count=None, device_unregistered_count=None):
        """
        DeviceCountTrend - a model defined in Swagger
        """

        self._timestamp = None
        self._device_online_count = None
        self._device_offline_count = None
        self._device_unregistered_count = None

        if timestamp is not None:
          self.timestamp = timestamp
        if device_online_count is not None:
          self.device_online_count = device_online_count
        if device_offline_count is not None:
          self.device_offline_count = device_offline_count
        if device_unregistered_count is not None:
          self.device_unregistered_count = device_unregistered_count

    @property
    def timestamp(self):
        """
        Gets the timestamp of this DeviceCountTrend.
        格林威治时间。

        :return: The timestamp of this DeviceCountTrend.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this DeviceCountTrend.
        格林威治时间。

        :param timestamp: The timestamp of this DeviceCountTrend.
        :type: int
        """

        self._timestamp = timestamp

    @property
    def device_online_count(self):
        """
        Gets the device_online_count of this DeviceCountTrend.
        在线设备数量。

        :return: The device_online_count of this DeviceCountTrend.
        :rtype: int
        """
        return self._device_online_count

    @device_online_count.setter
    def device_online_count(self, device_online_count):
        """
        Sets the device_online_count of this DeviceCountTrend.
        在线设备数量。

        :param device_online_count: The device_online_count of this DeviceCountTrend.
        :type: int
        """
        if device_online_count is not None and device_online_count > 2147483647:
            raise ValueError("Invalid value for `device_online_count`, must be a value less than or equal to `2147483647`")
        if device_online_count is not None and device_online_count < 0:
            raise ValueError("Invalid value for `device_online_count`, must be a value greater than or equal to `0`")

        self._device_online_count = device_online_count

    @property
    def device_offline_count(self):
        """
        Gets the device_offline_count of this DeviceCountTrend.
        离线设备数量。

        :return: The device_offline_count of this DeviceCountTrend.
        :rtype: int
        """
        return self._device_offline_count

    @device_offline_count.setter
    def device_offline_count(self, device_offline_count):
        """
        Sets the device_offline_count of this DeviceCountTrend.
        离线设备数量。

        :param device_offline_count: The device_offline_count of this DeviceCountTrend.
        :type: int
        """
        if device_offline_count is not None and device_offline_count > 2147483647:
            raise ValueError("Invalid value for `device_offline_count`, must be a value less than or equal to `2147483647`")
        if device_offline_count is not None and device_offline_count < 0:
            raise ValueError("Invalid value for `device_offline_count`, must be a value greater than or equal to `0`")

        self._device_offline_count = device_offline_count

    @property
    def device_unregistered_count(self):
        """
        Gets the device_unregistered_count of this DeviceCountTrend.
        未注册设备数量。

        :return: The device_unregistered_count of this DeviceCountTrend.
        :rtype: int
        """
        return self._device_unregistered_count

    @device_unregistered_count.setter
    def device_unregistered_count(self, device_unregistered_count):
        """
        Sets the device_unregistered_count of this DeviceCountTrend.
        未注册设备数量。

        :param device_unregistered_count: The device_unregistered_count of this DeviceCountTrend.
        :type: int
        """
        if device_unregistered_count is not None and device_unregistered_count > 2147483647:
            raise ValueError("Invalid value for `device_unregistered_count`, must be a value less than or equal to `2147483647`")
        if device_unregistered_count is not None and device_unregistered_count < 0:
            raise ValueError("Invalid value for `device_unregistered_count`, must be a value greater than or equal to `0`")

        self._device_unregistered_count = device_unregistered_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceCountTrend):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
