# coding: utf-8

"""
    实体资源北向接口

    实体资源条件查询。 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SubSlotResData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nedn': 'str',
        'ne_name': 'str',
        'framedn': 'str',
        'slotdn': 'str',
        'slotname': 'str',
        'subslotdn': 'str',
        'frameno': 'int',
        'slotno': 'int',
        'subslotindex': 'int',
        'subslotno': 'int',
        'descr': 'str',
        'subslotname': 'str',
        'vendortype': 'str',
        'physicalclass': 'int',
        'hardversion': 'str',
        'firmversion': 'str',
        'softversion': 'str',
        'adminstatus': 'int',
        'operstatus': 'int',
        'modelname': 'str',
        'serialnum': 'str',
        'mfgname': 'str'
    }

    attribute_map = {
        'nedn': 'nedn',
        'ne_name': 'neName',
        'framedn': 'framedn',
        'slotdn': 'slotdn',
        'slotname': 'slotname',
        'subslotdn': 'subslotdn',
        'frameno': 'frameno',
        'slotno': 'slotno',
        'subslotindex': 'subslotindex',
        'subslotno': 'subslotno',
        'descr': 'descr',
        'subslotname': 'subslotname',
        'vendortype': 'vendortype',
        'physicalclass': 'physicalclass',
        'hardversion': 'hardversion',
        'firmversion': 'firmversion',
        'softversion': 'softversion',
        'adminstatus': 'adminstatus',
        'operstatus': 'operstatus',
        'modelname': 'modelname',
        'serialnum': 'serialnum',
        'mfgname': 'mfgname'
    }

    def __init__(self, nedn=None, ne_name=None, framedn=None, slotdn=None, slotname=None, subslotdn=None, frameno=None, slotno=None, subslotindex=None, subslotno=None, descr=None, subslotname=None, vendortype=None, physicalclass=None, hardversion=None, firmversion=None, softversion=None, adminstatus=None, operstatus=None, modelname=None, serialnum=None, mfgname=None):
        """
        SubSlotResData - a model defined in Swagger
        """

        self._nedn = None
        self._ne_name = None
        self._framedn = None
        self._slotdn = None
        self._slotname = None
        self._subslotdn = None
        self._frameno = None
        self._slotno = None
        self._subslotindex = None
        self._subslotno = None
        self._descr = None
        self._subslotname = None
        self._vendortype = None
        self._physicalclass = None
        self._hardversion = None
        self._firmversion = None
        self._softversion = None
        self._adminstatus = None
        self._operstatus = None
        self._modelname = None
        self._serialnum = None
        self._mfgname = None

        if nedn is not None:
          self.nedn = nedn
        if ne_name is not None:
          self.ne_name = ne_name
        if framedn is not None:
          self.framedn = framedn
        if slotdn is not None:
          self.slotdn = slotdn
        if slotname is not None:
          self.slotname = slotname
        if subslotdn is not None:
          self.subslotdn = subslotdn
        if frameno is not None:
          self.frameno = frameno
        if slotno is not None:
          self.slotno = slotno
        if subslotindex is not None:
          self.subslotindex = subslotindex
        if subslotno is not None:
          self.subslotno = subslotno
        if descr is not None:
          self.descr = descr
        if subslotname is not None:
          self.subslotname = subslotname
        if vendortype is not None:
          self.vendortype = vendortype
        if physicalclass is not None:
          self.physicalclass = physicalclass
        if hardversion is not None:
          self.hardversion = hardversion
        if firmversion is not None:
          self.firmversion = firmversion
        if softversion is not None:
          self.softversion = softversion
        if adminstatus is not None:
          self.adminstatus = adminstatus
        if operstatus is not None:
          self.operstatus = operstatus
        if modelname is not None:
          self.modelname = modelname
        if serialnum is not None:
          self.serialnum = serialnum
        if mfgname is not None:
          self.mfgname = mfgname

    @property
    def nedn(self):
        """
        Gets the nedn of this SubSlotResData.
        设备dn。

        :return: The nedn of this SubSlotResData.
        :rtype: str
        """
        return self._nedn

    @nedn.setter
    def nedn(self, nedn):
        """
        Sets the nedn of this SubSlotResData.
        设备dn。

        :param nedn: The nedn of this SubSlotResData.
        :type: str
        """

        self._nedn = nedn

    @property
    def ne_name(self):
        """
        Gets the ne_name of this SubSlotResData.
        设备名称。

        :return: The ne_name of this SubSlotResData.
        :rtype: str
        """
        return self._ne_name

    @ne_name.setter
    def ne_name(self, ne_name):
        """
        Sets the ne_name of this SubSlotResData.
        设备名称。

        :param ne_name: The ne_name of this SubSlotResData.
        :type: str
        """

        self._ne_name = ne_name

    @property
    def framedn(self):
        """
        Gets the framedn of this SubSlotResData.
        机框dn。

        :return: The framedn of this SubSlotResData.
        :rtype: str
        """
        return self._framedn

    @framedn.setter
    def framedn(self, framedn):
        """
        Sets the framedn of this SubSlotResData.
        机框dn。

        :param framedn: The framedn of this SubSlotResData.
        :type: str
        """

        self._framedn = framedn

    @property
    def slotdn(self):
        """
        Gets the slotdn of this SubSlotResData.
        单板dn。

        :return: The slotdn of this SubSlotResData.
        :rtype: str
        """
        return self._slotdn

    @slotdn.setter
    def slotdn(self, slotdn):
        """
        Sets the slotdn of this SubSlotResData.
        单板dn。

        :param slotdn: The slotdn of this SubSlotResData.
        :type: str
        """

        self._slotdn = slotdn

    @property
    def slotname(self):
        """
        Gets the slotname of this SubSlotResData.
        单板名称。

        :return: The slotname of this SubSlotResData.
        :rtype: str
        """
        return self._slotname

    @slotname.setter
    def slotname(self, slotname):
        """
        Sets the slotname of this SubSlotResData.
        单板名称。

        :param slotname: The slotname of this SubSlotResData.
        :type: str
        """

        self._slotname = slotname

    @property
    def subslotdn(self):
        """
        Gets the subslotdn of this SubSlotResData.
        子卡dn。

        :return: The subslotdn of this SubSlotResData.
        :rtype: str
        """
        return self._subslotdn

    @subslotdn.setter
    def subslotdn(self, subslotdn):
        """
        Sets the subslotdn of this SubSlotResData.
        子卡dn。

        :param subslotdn: The subslotdn of this SubSlotResData.
        :type: str
        """

        self._subslotdn = subslotdn

    @property
    def frameno(self):
        """
        Gets the frameno of this SubSlotResData.
        机框序号。

        :return: The frameno of this SubSlotResData.
        :rtype: int
        """
        return self._frameno

    @frameno.setter
    def frameno(self, frameno):
        """
        Sets the frameno of this SubSlotResData.
        机框序号。

        :param frameno: The frameno of this SubSlotResData.
        :type: int
        """

        self._frameno = frameno

    @property
    def slotno(self):
        """
        Gets the slotno of this SubSlotResData.
        单板序号。

        :return: The slotno of this SubSlotResData.
        :rtype: int
        """
        return self._slotno

    @slotno.setter
    def slotno(self, slotno):
        """
        Sets the slotno of this SubSlotResData.
        单板序号。

        :param slotno: The slotno of this SubSlotResData.
        :type: int
        """

        self._slotno = slotno

    @property
    def subslotindex(self):
        """
        Gets the subslotindex of this SubSlotResData.
        子卡索引。

        :return: The subslotindex of this SubSlotResData.
        :rtype: int
        """
        return self._subslotindex

    @subslotindex.setter
    def subslotindex(self, subslotindex):
        """
        Sets the subslotindex of this SubSlotResData.
        子卡索引。

        :param subslotindex: The subslotindex of this SubSlotResData.
        :type: int
        """

        self._subslotindex = subslotindex

    @property
    def subslotno(self):
        """
        Gets the subslotno of this SubSlotResData.
        子卡序号。

        :return: The subslotno of this SubSlotResData.
        :rtype: int
        """
        return self._subslotno

    @subslotno.setter
    def subslotno(self, subslotno):
        """
        Sets the subslotno of this SubSlotResData.
        子卡序号。

        :param subslotno: The subslotno of this SubSlotResData.
        :type: int
        """

        self._subslotno = subslotno

    @property
    def descr(self):
        """
        Gets the descr of this SubSlotResData.
        子卡描述。

        :return: The descr of this SubSlotResData.
        :rtype: str
        """
        return self._descr

    @descr.setter
    def descr(self, descr):
        """
        Sets the descr of this SubSlotResData.
        子卡描述。

        :param descr: The descr of this SubSlotResData.
        :type: str
        """

        self._descr = descr

    @property
    def subslotname(self):
        """
        Gets the subslotname of this SubSlotResData.
        子卡名称。

        :return: The subslotname of this SubSlotResData.
        :rtype: str
        """
        return self._subslotname

    @subslotname.setter
    def subslotname(self, subslotname):
        """
        Sets the subslotname of this SubSlotResData.
        子卡名称。

        :param subslotname: The subslotname of this SubSlotResData.
        :type: str
        """

        self._subslotname = subslotname

    @property
    def vendortype(self):
        """
        Gets the vendortype of this SubSlotResData.
        厂商类型。

        :return: The vendortype of this SubSlotResData.
        :rtype: str
        """
        return self._vendortype

    @vendortype.setter
    def vendortype(self, vendortype):
        """
        Sets the vendortype of this SubSlotResData.
        厂商类型。

        :param vendortype: The vendortype of this SubSlotResData.
        :type: str
        """

        self._vendortype = vendortype

    @property
    def physicalclass(self):
        """
        Gets the physicalclass of this SubSlotResData.
        设备上实体大类型： 3：框 4：背板 5：子槽 6：电源 7：风扇 9：板 10：端口 

        :return: The physicalclass of this SubSlotResData.
        :rtype: int
        """
        return self._physicalclass

    @physicalclass.setter
    def physicalclass(self, physicalclass):
        """
        Sets the physicalclass of this SubSlotResData.
        设备上实体大类型： 3：框 4：背板 5：子槽 6：电源 7：风扇 9：板 10：端口 

        :param physicalclass: The physicalclass of this SubSlotResData.
        :type: int
        """

        self._physicalclass = physicalclass

    @property
    def hardversion(self):
        """
        Gets the hardversion of this SubSlotResData.
        硬件版本。

        :return: The hardversion of this SubSlotResData.
        :rtype: str
        """
        return self._hardversion

    @hardversion.setter
    def hardversion(self, hardversion):
        """
        Sets the hardversion of this SubSlotResData.
        硬件版本。

        :param hardversion: The hardversion of this SubSlotResData.
        :type: str
        """

        self._hardversion = hardversion

    @property
    def firmversion(self):
        """
        Gets the firmversion of this SubSlotResData.
        firm版本。

        :return: The firmversion of this SubSlotResData.
        :rtype: str
        """
        return self._firmversion

    @firmversion.setter
    def firmversion(self, firmversion):
        """
        Sets the firmversion of this SubSlotResData.
        firm版本。

        :param firmversion: The firmversion of this SubSlotResData.
        :type: str
        """

        self._firmversion = firmversion

    @property
    def softversion(self):
        """
        Gets the softversion of this SubSlotResData.
        软件版本。

        :return: The softversion of this SubSlotResData.
        :rtype: str
        """
        return self._softversion

    @softversion.setter
    def softversion(self, softversion):
        """
        Sets the softversion of this SubSlotResData.
        软件版本。

        :param softversion: The softversion of this SubSlotResData.
        :type: str
        """

        self._softversion = softversion

    @property
    def adminstatus(self):
        """
        Gets the adminstatus of this SubSlotResData.
        管理状态： 4、11：正常 2、3、12：错误 13：LoopBack 

        :return: The adminstatus of this SubSlotResData.
        :rtype: int
        """
        return self._adminstatus

    @adminstatus.setter
    def adminstatus(self, adminstatus):
        """
        Sets the adminstatus of this SubSlotResData.
        管理状态： 4、11：正常 2、3、12：错误 13：LoopBack 

        :param adminstatus: The adminstatus of this SubSlotResData.
        :type: int
        """

        self._adminstatus = adminstatus

    @property
    def operstatus(self):
        """
        Gets the operstatus of this SubSlotResData.
        操作状态： 3、11、13、15、16：正常 2、12、17：错误 4：离线 其他：未知 

        :return: The operstatus of this SubSlotResData.
        :rtype: int
        """
        return self._operstatus

    @operstatus.setter
    def operstatus(self, operstatus):
        """
        Sets the operstatus of this SubSlotResData.
        操作状态： 3、11、13、15、16：正常 2、12、17：错误 4：离线 其他：未知 

        :param operstatus: The operstatus of this SubSlotResData.
        :type: int
        """

        self._operstatus = operstatus

    @property
    def modelname(self):
        """
        Gets the modelname of this SubSlotResData.
        模块名称。

        :return: The modelname of this SubSlotResData.
        :rtype: str
        """
        return self._modelname

    @modelname.setter
    def modelname(self, modelname):
        """
        Sets the modelname of this SubSlotResData.
        模块名称。

        :param modelname: The modelname of this SubSlotResData.
        :type: str
        """

        self._modelname = modelname

    @property
    def serialnum(self):
        """
        Gets the serialnum of this SubSlotResData.
        序列号。

        :return: The serialnum of this SubSlotResData.
        :rtype: str
        """
        return self._serialnum

    @serialnum.setter
    def serialnum(self, serialnum):
        """
        Sets the serialnum of this SubSlotResData.
        序列号。

        :param serialnum: The serialnum of this SubSlotResData.
        :type: str
        """

        self._serialnum = serialnum

    @property
    def mfgname(self):
        """
        Gets the mfgname of this SubSlotResData.
        组件名称，物理固件的制造厂商。

        :return: The mfgname of this SubSlotResData.
        :rtype: str
        """
        return self._mfgname

    @mfgname.setter
    def mfgname(self, mfgname):
        """
        Sets the mfgname of this SubSlotResData.
        组件名称，物理固件的制造厂商。

        :param mfgname: The mfgname of this SubSlotResData.
        :type: str
        """

        self._mfgname = mfgname

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SubSlotResData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
