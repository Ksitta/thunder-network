# coding: utf-8

"""
    框式交换机板卡信息操作

    框式上云相关操作接口： 场景：对框式交换机信息查询操作的第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FanInfoDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'online_state': 'str',
        'register_state': 'str',
        'running_state': 'str',
        'speed': 'int',
        'mode': 'str',
        'air_flow': 'str'
    }

    attribute_map = {
        'id': 'id',
        'online_state': 'onlineState',
        'register_state': 'registerState',
        'running_state': 'runningState',
        'speed': 'speed',
        'mode': 'mode',
        'air_flow': 'airFlow'
    }

    def __init__(self, id=None, online_state=None, register_state=None, running_state=None, speed=None, mode=None, air_flow=None):
        """
        FanInfoDto - a model defined in Swagger
        """

        self._id = None
        self._online_state = None
        self._register_state = None
        self._running_state = None
        self._speed = None
        self._mode = None
        self._air_flow = None

        if id is not None:
          self.id = id
        if online_state is not None:
          self.online_state = online_state
        if register_state is not None:
          self.register_state = register_state
        if running_state is not None:
          self.running_state = running_state
        if speed is not None:
          self.speed = speed
        if mode is not None:
          self.mode = mode
        if air_flow is not None:
          self.air_flow = air_flow

    @property
    def id(self):
        """
        Gets the id of this FanInfoDto.
        风扇ID。

        :return: The id of this FanInfoDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FanInfoDto.
        风扇ID。

        :param id: The id of this FanInfoDto.
        :type: str
        """
        if id is not None and len(id) > 32:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `32`")

        self._id = id

    @property
    def online_state(self):
        """
        Gets the online_state of this FanInfoDto.
        风扇在线状态。取值范围：0（代表present在位），1（代表absent不在位）。

        :return: The online_state of this FanInfoDto.
        :rtype: str
        """
        return self._online_state

    @online_state.setter
    def online_state(self, online_state):
        """
        Sets the online_state of this FanInfoDto.
        风扇在线状态。取值范围：0（代表present在位），1（代表absent不在位）。

        :param online_state: The online_state of this FanInfoDto.
        :type: str
        """
        if online_state is not None and len(online_state) > 64:
            raise ValueError("Invalid value for `online_state`, length must be less than or equal to `64`")
        if online_state is not None and len(online_state) < 0:
            raise ValueError("Invalid value for `online_state`, length must be greater than or equal to `0`")

        self._online_state = online_state

    @property
    def register_state(self):
        """
        Gets the register_state of this FanInfoDto.
        风扇注册状态。取值范围：0（代表unregisted未注册），1（代表registed已注册）。

        :return: The register_state of this FanInfoDto.
        :rtype: str
        """
        return self._register_state

    @register_state.setter
    def register_state(self, register_state):
        """
        Sets the register_state of this FanInfoDto.
        风扇注册状态。取值范围：0（代表unregisted未注册），1（代表registed已注册）。

        :param register_state: The register_state of this FanInfoDto.
        :type: str
        """
        if register_state is not None and len(register_state) > 64:
            raise ValueError("Invalid value for `register_state`, length must be less than or equal to `64`")
        if register_state is not None and len(register_state) < 0:
            raise ValueError("Invalid value for `register_state`, length must be greater than or equal to `0`")

        self._register_state = register_state

    @property
    def running_state(self):
        """
        Gets the running_state of this FanInfoDto.
        风扇运行状态 。取值范围：0（代表unknown未知），1（代表normal正常），2（代表abnormal不正常）。

        :return: The running_state of this FanInfoDto.
        :rtype: str
        """
        return self._running_state

    @running_state.setter
    def running_state(self, running_state):
        """
        Sets the running_state of this FanInfoDto.
        风扇运行状态 。取值范围：0（代表unknown未知），1（代表normal正常），2（代表abnormal不正常）。

        :param running_state: The running_state of this FanInfoDto.
        :type: str
        """
        if running_state is not None and len(running_state) > 64:
            raise ValueError("Invalid value for `running_state`, length must be less than or equal to `64`")
        if running_state is not None and len(running_state) < 0:
            raise ValueError("Invalid value for `running_state`, length must be greater than or equal to `0`")

        self._running_state = running_state

    @property
    def speed(self):
        """
        Gets the speed of this FanInfoDto.
        风扇转速，转速与全速的百分比，取值范围1-100。

        :return: The speed of this FanInfoDto.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """
        Sets the speed of this FanInfoDto.
        风扇转速，转速与全速的百分比，取值范围1-100。

        :param speed: The speed of this FanInfoDto.
        :type: int
        """

        self._speed = speed

    @property
    def mode(self):
        """
        Gets the mode of this FanInfoDto.
        风扇模式，取值范围：1（代表AUTO：自动调节转速）；2（代表MANUAL：固定转速）；0（代表UNKNOW：风扇不在位）。

        :return: The mode of this FanInfoDto.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this FanInfoDto.
        风扇模式，取值范围：1（代表AUTO：自动调节转速）；2（代表MANUAL：固定转速）；0（代表UNKNOW：风扇不在位）。

        :param mode: The mode of this FanInfoDto.
        :type: str
        """
        if mode is not None and len(mode) > 64:
            raise ValueError("Invalid value for `mode`, length must be less than or equal to `64`")
        if mode is not None and len(mode) < 0:
            raise ValueError("Invalid value for `mode`, length must be greater than or equal to `0`")

        self._mode = mode

    @property
    def air_flow(self):
        """
        Gets the air_flow of this FanInfoDto.
        风扇的风向，取值范围：Back-to-Side（表示风由后面向两侧吹）；Side-to-Back（表示风由两侧向后面吹）；Side-to-Side（表示风由一侧往另外一侧吹）；-（风扇不在位）。

        :return: The air_flow of this FanInfoDto.
        :rtype: str
        """
        return self._air_flow

    @air_flow.setter
    def air_flow(self, air_flow):
        """
        Sets the air_flow of this FanInfoDto.
        风扇的风向，取值范围：Back-to-Side（表示风由后面向两侧吹）；Side-to-Back（表示风由两侧向后面吹）；Side-to-Side（表示风由一侧往另外一侧吹）；-（风扇不在位）。

        :param air_flow: The air_flow of this FanInfoDto.
        :type: str
        """
        if air_flow is not None and len(air_flow) > 32:
            raise ValueError("Invalid value for `air_flow`, length must be less than or equal to `32`")
        if air_flow is not None and len(air_flow) < 0:
            raise ValueError("Invalid value for `air_flow`, length must be greater than or equal to `0`")

        self._air_flow = air_flow

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FanInfoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
