# coding: utf-8

"""
    运维ping/trace探测

    ping/trace探测第三方接口。 · 创建ping探测任务 · 查询ping探测结果 · 创建trace探测任务 · 查询trace探测结果 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PingReplySingle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sequence': 'int',
        'data_byte': 'int',
        'ttl_or_hoplimit': 'int',
        'rtt': 'int',
        'result': 'int'
    }

    attribute_map = {
        'sequence': 'sequence',
        'data_byte': 'dataByte',
        'ttl_or_hoplimit': 'ttlOrHoplimit',
        'rtt': 'rtt',
        'result': 'result'
    }

    def __init__(self, sequence=None, data_byte=None, ttl_or_hoplimit=None, rtt=None, result=None):
        """
        PingReplySingle - a model defined in Swagger
        """

        self._sequence = None
        self._data_byte = None
        self._ttl_or_hoplimit = None
        self._rtt = None
        self._result = None

        if sequence is not None:
          self.sequence = sequence
        if data_byte is not None:
          self.data_byte = data_byte
        if ttl_or_hoplimit is not None:
          self.ttl_or_hoplimit = ttl_or_hoplimit
        if rtt is not None:
          self.rtt = rtt
        if result is not None:
          self.result = result

    @property
    def sequence(self):
        """
        Gets the sequence of this PingReplySingle.
        探测序号。

        :return: The sequence of this PingReplySingle.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """
        Sets the sequence of this PingReplySingle.
        探测序号。

        :param sequence: The sequence of this PingReplySingle.
        :type: int
        """

        self._sequence = sequence

    @property
    def data_byte(self):
        """
        Gets the data_byte of this PingReplySingle.
        响应报文的长度，单位：字节。

        :return: The data_byte of this PingReplySingle.
        :rtype: int
        """
        return self._data_byte

    @data_byte.setter
    def data_byte(self, data_byte):
        """
        Sets the data_byte of this PingReplySingle.
        响应报文的长度，单位：字节。

        :param data_byte: The data_byte of this PingReplySingle.
        :type: int
        """

        self._data_byte = data_byte

    @property
    def ttl_or_hoplimit(self):
        """
        Gets the ttl_or_hoplimit of this PingReplySingle.
        生存时间值，单位：毫秒。

        :return: The ttl_or_hoplimit of this PingReplySingle.
        :rtype: int
        """
        return self._ttl_or_hoplimit

    @ttl_or_hoplimit.setter
    def ttl_or_hoplimit(self, ttl_or_hoplimit):
        """
        Sets the ttl_or_hoplimit of this PingReplySingle.
        生存时间值，单位：毫秒。

        :param ttl_or_hoplimit: The ttl_or_hoplimit of this PingReplySingle.
        :type: int
        """

        self._ttl_or_hoplimit = ttl_or_hoplimit

    @property
    def rtt(self):
        """
        Gets the rtt of this PingReplySingle.
        响应时间，单位：毫秒。

        :return: The rtt of this PingReplySingle.
        :rtype: int
        """
        return self._rtt

    @rtt.setter
    def rtt(self, rtt):
        """
        Sets the rtt of this PingReplySingle.
        响应时间，单位：毫秒。

        :param rtt: The rtt of this PingReplySingle.
        :type: int
        """

        self._rtt = rtt

    @property
    def result(self):
        """
        Gets the result of this PingReplySingle.
        探测状态。 0 --- 成功 1 --- 执行中 2 --- 超时 

        :return: The result of this PingReplySingle.
        :rtype: int
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this PingReplySingle.
        探测状态。 0 --- 成功 1 --- 执行中 2 --- 超时 

        :param result: The result of this PingReplySingle.
        :type: int
        """

        self._result = result

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PingReplySingle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
