# coding: utf-8

"""
    交换机有线认证模板配置

    交换机有线认证模板，主要包括： · 创建站点下交换机有线认证模板配置 · 查询站点下交换机有线认证模板配置 · 修改站点下交换机有线认证模板配置 · 删除站点下交换机有线认证模板配置 · 修改站点交换机有线认证部分模板配置 · 增量绑站点交换机有线认证模板配置定 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PortalContent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_type_selection': 'str',
        'fast_push_enable': 'bool',
        'portal_page_id': 'str',
        'wechat_enable': 'bool',
        'anonymous_enable': 'bool',
        'pass_code_enable': 'bool',
        'social_media_enable': 'bool',
        'normal_enable': 'bool',
        'register_enable': 'bool',
        'register_expire_unit': 'str',
        'register_expire': 'int',
        'user_register_max_access_number': 'int',
        'user_group_id': 'str',
        'user_group_name': 'str',
        'free_auth_mode': 'str',
        'auth_expire': 'int',
        'auth_expire_unit': 'str',
        'sms_auth_enable': 'bool',
        'sms_user_expire': 'int',
        'sms_user_expire_unit': 'str',
        'sms_user_max_access_number': 'int',
        'sms_password_expire': 'int',
        'sms_password_expire_unit': 'str',
        'sms_user_group_id': 'str',
        'sms_user_group_name': 'str',
        'accounting_enable': 'bool',
        'accounting_expire': 'int',
        'accounting_expire_unit': 'str',
        'ip_v6_auth_enable': 'bool',
        'escape_strategy': 'str'
    }

    attribute_map = {
        'auth_type_selection': 'authTypeSelection',
        'fast_push_enable': 'fastPushEnable',
        'portal_page_id': 'portalPageId',
        'wechat_enable': 'wechatEnable',
        'anonymous_enable': 'anonymousEnable',
        'pass_code_enable': 'passCodeEnable',
        'social_media_enable': 'socialMediaEnable',
        'normal_enable': 'normalEnable',
        'register_enable': 'registerEnable',
        'register_expire_unit': 'registerExpireUnit',
        'register_expire': 'registerExpire',
        'user_register_max_access_number': 'userRegisterMaxAccessNumber',
        'user_group_id': 'userGroupId',
        'user_group_name': 'userGroupName',
        'free_auth_mode': 'freeAuthMode',
        'auth_expire': 'authExpire',
        'auth_expire_unit': 'authExpireUnit',
        'sms_auth_enable': 'smsAuthEnable',
        'sms_user_expire': 'smsUserExpire',
        'sms_user_expire_unit': 'smsUserExpireUnit',
        'sms_user_max_access_number': 'smsUserMaxAccessNumber',
        'sms_password_expire': 'smsPasswordExpire',
        'sms_password_expire_unit': 'smsPasswordExpireUnit',
        'sms_user_group_id': 'smsUserGroupId',
        'sms_user_group_name': 'smsUserGroupName',
        'accounting_enable': 'accountingEnable',
        'accounting_expire': 'accountingExpire',
        'accounting_expire_unit': 'accountingExpireUnit',
        'ip_v6_auth_enable': 'ipV6AuthEnable',
        'escape_strategy': 'escapeStrategy'
    }

    def __init__(self, auth_type_selection=None, fast_push_enable=None, portal_page_id=None, wechat_enable=None, anonymous_enable=None, pass_code_enable=None, social_media_enable=None, normal_enable=None, register_enable=None, register_expire_unit=None, register_expire=None, user_register_max_access_number=None, user_group_id=None, user_group_name=None, free_auth_mode=None, auth_expire=None, auth_expire_unit=None, sms_auth_enable=None, sms_user_expire=None, sms_user_expire_unit=None, sms_user_max_access_number=None, sms_password_expire=None, sms_password_expire_unit=None, sms_user_group_id=None, sms_user_group_name=None, accounting_enable=None, accounting_expire=None, accounting_expire_unit=None, ip_v6_auth_enable=None, escape_strategy=None):
        """
        PortalContent - a model defined in Swagger
        """

        self._auth_type_selection = None
        self._fast_push_enable = None
        self._portal_page_id = None
        self._wechat_enable = None
        self._anonymous_enable = None
        self._pass_code_enable = None
        self._social_media_enable = None
        self._normal_enable = None
        self._register_enable = None
        self._register_expire_unit = None
        self._register_expire = None
        self._user_register_max_access_number = None
        self._user_group_id = None
        self._user_group_name = None
        self._free_auth_mode = None
        self._auth_expire = None
        self._auth_expire_unit = None
        self._sms_auth_enable = None
        self._sms_user_expire = None
        self._sms_user_expire_unit = None
        self._sms_user_max_access_number = None
        self._sms_password_expire = None
        self._sms_password_expire_unit = None
        self._sms_user_group_id = None
        self._sms_user_group_name = None
        self._accounting_enable = None
        self._accounting_expire = None
        self._accounting_expire_unit = None
        self._ip_v6_auth_enable = None
        self._escape_strategy = None

        if auth_type_selection is not None:
          self.auth_type_selection = auth_type_selection
        if fast_push_enable is not None:
          self.fast_push_enable = fast_push_enable
        if portal_page_id is not None:
          self.portal_page_id = portal_page_id
        if wechat_enable is not None:
          self.wechat_enable = wechat_enable
        if anonymous_enable is not None:
          self.anonymous_enable = anonymous_enable
        if pass_code_enable is not None:
          self.pass_code_enable = pass_code_enable
        if social_media_enable is not None:
          self.social_media_enable = social_media_enable
        if normal_enable is not None:
          self.normal_enable = normal_enable
        if register_enable is not None:
          self.register_enable = register_enable
        if register_expire_unit is not None:
          self.register_expire_unit = register_expire_unit
        if register_expire is not None:
          self.register_expire = register_expire
        if user_register_max_access_number is not None:
          self.user_register_max_access_number = user_register_max_access_number
        if user_group_id is not None:
          self.user_group_id = user_group_id
        if user_group_name is not None:
          self.user_group_name = user_group_name
        if free_auth_mode is not None:
          self.free_auth_mode = free_auth_mode
        if auth_expire is not None:
          self.auth_expire = auth_expire
        if auth_expire_unit is not None:
          self.auth_expire_unit = auth_expire_unit
        if sms_auth_enable is not None:
          self.sms_auth_enable = sms_auth_enable
        if sms_user_expire is not None:
          self.sms_user_expire = sms_user_expire
        if sms_user_expire_unit is not None:
          self.sms_user_expire_unit = sms_user_expire_unit
        if sms_user_max_access_number is not None:
          self.sms_user_max_access_number = sms_user_max_access_number
        if sms_password_expire is not None:
          self.sms_password_expire = sms_password_expire
        if sms_password_expire_unit is not None:
          self.sms_password_expire_unit = sms_password_expire_unit
        if sms_user_group_id is not None:
          self.sms_user_group_id = sms_user_group_id
        if sms_user_group_name is not None:
          self.sms_user_group_name = sms_user_group_name
        if accounting_enable is not None:
          self.accounting_enable = accounting_enable
        if accounting_expire is not None:
          self.accounting_expire = accounting_expire
        if accounting_expire_unit is not None:
          self.accounting_expire_unit = accounting_expire_unit
        if ip_v6_auth_enable is not None:
          self.ip_v6_auth_enable = ip_v6_auth_enable
        if escape_strategy is not None:
          self.escape_strategy = escape_strategy

    @property
    def auth_type_selection(self):
        """
        Gets the auth_type_selection of this PortalContent.
        Portal认证类型。目前只支持portalController。

        :return: The auth_type_selection of this PortalContent.
        :rtype: str
        """
        return self._auth_type_selection

    @auth_type_selection.setter
    def auth_type_selection(self, auth_type_selection):
        """
        Sets the auth_type_selection of this PortalContent.
        Portal认证类型。目前只支持portalController。

        :param auth_type_selection: The auth_type_selection of this PortalContent.
        :type: str
        """

        self._auth_type_selection = auth_type_selection

    @property
    def fast_push_enable(self):
        """
        Gets the fast_push_enable of this PortalContent.
        使能快速推送。

        :return: The fast_push_enable of this PortalContent.
        :rtype: bool
        """
        return self._fast_push_enable

    @fast_push_enable.setter
    def fast_push_enable(self, fast_push_enable):
        """
        Sets the fast_push_enable of this PortalContent.
        使能快速推送。

        :param fast_push_enable: The fast_push_enable of this PortalContent.
        :type: bool
        """

        self._fast_push_enable = fast_push_enable

    @property
    def portal_page_id(self):
        """
        Gets the portal_page_id of this PortalContent.
        页面推送模板ID。当fastPushEnable为true时，portalPageId必填。

        :return: The portal_page_id of this PortalContent.
        :rtype: str
        """
        return self._portal_page_id

    @portal_page_id.setter
    def portal_page_id(self, portal_page_id):
        """
        Sets the portal_page_id of this PortalContent.
        页面推送模板ID。当fastPushEnable为true时，portalPageId必填。

        :param portal_page_id: The portal_page_id of this PortalContent.
        :type: str
        """
        if portal_page_id is not None and len(portal_page_id) > 36:
            raise ValueError("Invalid value for `portal_page_id`, length must be less than or equal to `36`")
        if portal_page_id is not None and len(portal_page_id) < 36:
            raise ValueError("Invalid value for `portal_page_id`, length must be greater than or equal to `36`")

        self._portal_page_id = portal_page_id

    @property
    def wechat_enable(self):
        """
        Gets the wechat_enable of this PortalContent.
        使能微信认证。当fastPushEnable为false时，wechatEnable生效。若fastPushEnable为true，则必须先配置微信认证参数。

        :return: The wechat_enable of this PortalContent.
        :rtype: bool
        """
        return self._wechat_enable

    @wechat_enable.setter
    def wechat_enable(self, wechat_enable):
        """
        Sets the wechat_enable of this PortalContent.
        使能微信认证。当fastPushEnable为false时，wechatEnable生效。若fastPushEnable为true，则必须先配置微信认证参数。

        :param wechat_enable: The wechat_enable of this PortalContent.
        :type: bool
        """

        self._wechat_enable = wechat_enable

    @property
    def anonymous_enable(self):
        """
        Gets the anonymous_enable of this PortalContent.
        使能匿名认证。当fastPushEnable为false时，anonymousEnable生效。

        :return: The anonymous_enable of this PortalContent.
        :rtype: bool
        """
        return self._anonymous_enable

    @anonymous_enable.setter
    def anonymous_enable(self, anonymous_enable):
        """
        Sets the anonymous_enable of this PortalContent.
        使能匿名认证。当fastPushEnable为false时，anonymousEnable生效。

        :param anonymous_enable: The anonymous_enable of this PortalContent.
        :type: bool
        """

        self._anonymous_enable = anonymous_enable

    @property
    def pass_code_enable(self):
        """
        Gets the pass_code_enable of this PortalContent.
        使能passCode认证。当fastPushEnable为false时，passCodeEnable生效。

        :return: The pass_code_enable of this PortalContent.
        :rtype: bool
        """
        return self._pass_code_enable

    @pass_code_enable.setter
    def pass_code_enable(self, pass_code_enable):
        """
        Sets the pass_code_enable of this PortalContent.
        使能passCode认证。当fastPushEnable为false时，passCodeEnable生效。

        :param pass_code_enable: The pass_code_enable of this PortalContent.
        :type: bool
        """

        self._pass_code_enable = pass_code_enable

    @property
    def social_media_enable(self):
        """
        Gets the social_media_enable of this PortalContent.
        使能facebook认证。若值为true，则必须先配置facebook认证参数。当fastPushEnable为false时，socialMediaEnable生效。

        :return: The social_media_enable of this PortalContent.
        :rtype: bool
        """
        return self._social_media_enable

    @social_media_enable.setter
    def social_media_enable(self, social_media_enable):
        """
        Sets the social_media_enable of this PortalContent.
        使能facebook认证。若值为true，则必须先配置facebook认证参数。当fastPushEnable为false时，socialMediaEnable生效。

        :param social_media_enable: The social_media_enable of this PortalContent.
        :type: bool
        """

        self._social_media_enable = social_media_enable

    @property
    def normal_enable(self):
        """
        Gets the normal_enable of this PortalContent.
        使能用户名密码认证。当fastPushEnable为false时，normalEnable生效。

        :return: The normal_enable of this PortalContent.
        :rtype: bool
        """
        return self._normal_enable

    @normal_enable.setter
    def normal_enable(self, normal_enable):
        """
        Sets the normal_enable of this PortalContent.
        使能用户名密码认证。当fastPushEnable为false时，normalEnable生效。

        :param normal_enable: The normal_enable of this PortalContent.
        :type: bool
        """

        self._normal_enable = normal_enable

    @property
    def register_enable(self):
        """
        Gets the register_enable of this PortalContent.
        用户自注册使能。当normalEnable为true时，registerEnable生效。

        :return: The register_enable of this PortalContent.
        :rtype: bool
        """
        return self._register_enable

    @register_enable.setter
    def register_enable(self, register_enable):
        """
        Sets the register_enable of this PortalContent.
        用户自注册使能。当normalEnable为true时，registerEnable生效。

        :param register_enable: The register_enable of this PortalContent.
        :type: bool
        """

        self._register_enable = register_enable

    @property
    def register_expire_unit(self):
        """
        Gets the register_expire_unit of this PortalContent.
        用户注册有效期单位。当registerEnable为true时，registerExpireUnit生效。

        :return: The register_expire_unit of this PortalContent.
        :rtype: str
        """
        return self._register_expire_unit

    @register_expire_unit.setter
    def register_expire_unit(self, register_expire_unit):
        """
        Sets the register_expire_unit of this PortalContent.
        用户注册有效期单位。当registerEnable为true时，registerExpireUnit生效。

        :param register_expire_unit: The register_expire_unit of this PortalContent.
        :type: str
        """

        self._register_expire_unit = register_expire_unit

    @property
    def register_expire(self):
        """
        Gets the register_expire of this PortalContent.
        用户注册有效期。当registerEnable为true时，registerExpire生效。当registerExpireUnit为minute时，registerExpire取值范围为1~59。当registerExpireUnit为hour时，registerExpire取值范围为1~23。当registerExpireUnit为day时，registerExpire取值范围为1~365。

        :return: The register_expire of this PortalContent.
        :rtype: int
        """
        return self._register_expire

    @register_expire.setter
    def register_expire(self, register_expire):
        """
        Sets the register_expire of this PortalContent.
        用户注册有效期。当registerEnable为true时，registerExpire生效。当registerExpireUnit为minute时，registerExpire取值范围为1~59。当registerExpireUnit为hour时，registerExpire取值范围为1~23。当registerExpireUnit为day时，registerExpire取值范围为1~365。

        :param register_expire: The register_expire of this PortalContent.
        :type: int
        """

        self._register_expire = register_expire

    @property
    def user_register_max_access_number(self):
        """
        Gets the user_register_max_access_number of this PortalContent.
        用户最大接入数。当registerEnable为true时，userRegisterMaxAccessNumber生效。

        :return: The user_register_max_access_number of this PortalContent.
        :rtype: int
        """
        return self._user_register_max_access_number

    @user_register_max_access_number.setter
    def user_register_max_access_number(self, user_register_max_access_number):
        """
        Sets the user_register_max_access_number of this PortalContent.
        用户最大接入数。当registerEnable为true时，userRegisterMaxAccessNumber生效。

        :param user_register_max_access_number: The user_register_max_access_number of this PortalContent.
        :type: int
        """
        if user_register_max_access_number is not None and user_register_max_access_number > 16:
            raise ValueError("Invalid value for `user_register_max_access_number`, must be a value less than or equal to `16`")
        if user_register_max_access_number is not None and user_register_max_access_number < 0:
            raise ValueError("Invalid value for `user_register_max_access_number`, must be a value greater than or equal to `0`")

        self._user_register_max_access_number = user_register_max_access_number

    @property
    def user_group_id(self):
        """
        Gets the user_group_id of this PortalContent.
        用户名密码认证的自注册用户注册后所属的用户组ID，UUID格式。当registerEnable为true时，userGroupId生效。

        :return: The user_group_id of this PortalContent.
        :rtype: str
        """
        return self._user_group_id

    @user_group_id.setter
    def user_group_id(self, user_group_id):
        """
        Sets the user_group_id of this PortalContent.
        用户名密码认证的自注册用户注册后所属的用户组ID，UUID格式。当registerEnable为true时，userGroupId生效。

        :param user_group_id: The user_group_id of this PortalContent.
        :type: str
        """
        if user_group_id is not None and len(user_group_id) > 36:
            raise ValueError("Invalid value for `user_group_id`, length must be less than or equal to `36`")
        if user_group_id is not None and len(user_group_id) < 36:
            raise ValueError("Invalid value for `user_group_id`, length must be greater than or equal to `36`")

        self._user_group_id = user_group_id

    @property
    def user_group_name(self):
        """
        Gets the user_group_name of this PortalContent.
        用户名密码认证的自注册用户注册后所属的用户组名称。当registerEnable为true时，userGroupName生效。

        :return: The user_group_name of this PortalContent.
        :rtype: str
        """
        return self._user_group_name

    @user_group_name.setter
    def user_group_name(self, user_group_name):
        """
        Sets the user_group_name of this PortalContent.
        用户名密码认证的自注册用户注册后所属的用户组名称。当registerEnable为true时，userGroupName生效。

        :param user_group_name: The user_group_name of this PortalContent.
        :type: str
        """
        if user_group_name is not None and len(user_group_name) > 36:
            raise ValueError("Invalid value for `user_group_name`, length must be less than or equal to `36`")
        if user_group_name is not None and len(user_group_name) < 1:
            raise ValueError("Invalid value for `user_group_name`, length must be greater than or equal to `1`")

        self._user_group_name = user_group_name

    @property
    def free_auth_mode(self):
        """
        Gets the free_auth_mode of this PortalContent.
        有效期内免认证方式。mac表示开启免认证，reAuth则表示不开启免认证。

        :return: The free_auth_mode of this PortalContent.
        :rtype: str
        """
        return self._free_auth_mode

    @free_auth_mode.setter
    def free_auth_mode(self, free_auth_mode):
        """
        Sets the free_auth_mode of this PortalContent.
        有效期内免认证方式。mac表示开启免认证，reAuth则表示不开启免认证。

        :param free_auth_mode: The free_auth_mode of this PortalContent.
        :type: str
        """

        self._free_auth_mode = free_auth_mode

    @property
    def auth_expire(self):
        """
        Gets the auth_expire of this PortalContent.
        Portal认证有效期，当freeAuthMode为mac时，authExpire必填。当authExpireUnit为minute时，authExpire取值范围为1~59。当authExpireUnit为hour时，authExpire取值范围为1~23。当authExpireUnit为day时，authExpire取值范围为1~365。

        :return: The auth_expire of this PortalContent.
        :rtype: int
        """
        return self._auth_expire

    @auth_expire.setter
    def auth_expire(self, auth_expire):
        """
        Sets the auth_expire of this PortalContent.
        Portal认证有效期，当freeAuthMode为mac时，authExpire必填。当authExpireUnit为minute时，authExpire取值范围为1~59。当authExpireUnit为hour时，authExpire取值范围为1~23。当authExpireUnit为day时，authExpire取值范围为1~365。

        :param auth_expire: The auth_expire of this PortalContent.
        :type: int
        """

        self._auth_expire = auth_expire

    @property
    def auth_expire_unit(self):
        """
        Gets the auth_expire_unit of this PortalContent.
        Portal认证有效期单位，当freeAuthMode为mac时，authExpireUnit必填。只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。

        :return: The auth_expire_unit of this PortalContent.
        :rtype: str
        """
        return self._auth_expire_unit

    @auth_expire_unit.setter
    def auth_expire_unit(self, auth_expire_unit):
        """
        Sets the auth_expire_unit of this PortalContent.
        Portal认证有效期单位，当freeAuthMode为mac时，authExpireUnit必填。只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。

        :param auth_expire_unit: The auth_expire_unit of this PortalContent.
        :type: str
        """

        self._auth_expire_unit = auth_expire_unit

    @property
    def sms_auth_enable(self):
        """
        Gets the sms_auth_enable of this PortalContent.
        是否启用短信认证。若smsAuthEnable值为true，则必须配置短信服务器。当fastPushEnable为false时，smsAuthEnable生效。

        :return: The sms_auth_enable of this PortalContent.
        :rtype: bool
        """
        return self._sms_auth_enable

    @sms_auth_enable.setter
    def sms_auth_enable(self, sms_auth_enable):
        """
        Sets the sms_auth_enable of this PortalContent.
        是否启用短信认证。若smsAuthEnable值为true，则必须配置短信服务器。当fastPushEnable为false时，smsAuthEnable生效。

        :param sms_auth_enable: The sms_auth_enable of this PortalContent.
        :type: bool
        """

        self._sms_auth_enable = sms_auth_enable

    @property
    def sms_user_expire(self):
        """
        Gets the sms_user_expire of this PortalContent.
        短信认证用户有效期，当smsAuthEnable为true时，smsUserExpire生效。当smsUserExpireUnit为minute时，smsUserExpire取值范围为1~59。当smsUserExpireUnit为hour时，smsUserExpire取值范围为1~23。当smsUserExpireUnit为day时，smsUserExpire取值范围为1~365。

        :return: The sms_user_expire of this PortalContent.
        :rtype: int
        """
        return self._sms_user_expire

    @sms_user_expire.setter
    def sms_user_expire(self, sms_user_expire):
        """
        Sets the sms_user_expire of this PortalContent.
        短信认证用户有效期，当smsAuthEnable为true时，smsUserExpire生效。当smsUserExpireUnit为minute时，smsUserExpire取值范围为1~59。当smsUserExpireUnit为hour时，smsUserExpire取值范围为1~23。当smsUserExpireUnit为day时，smsUserExpire取值范围为1~365。

        :param sms_user_expire: The sms_user_expire of this PortalContent.
        :type: int
        """

        self._sms_user_expire = sms_user_expire

    @property
    def sms_user_expire_unit(self):
        """
        Gets the sms_user_expire_unit of this PortalContent.
        短信认证用户有效期单位只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。当smsAuthEnable为true时，smsUserExpireUnit生效。

        :return: The sms_user_expire_unit of this PortalContent.
        :rtype: str
        """
        return self._sms_user_expire_unit

    @sms_user_expire_unit.setter
    def sms_user_expire_unit(self, sms_user_expire_unit):
        """
        Sets the sms_user_expire_unit of this PortalContent.
        短信认证用户有效期单位只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。当smsAuthEnable为true时，smsUserExpireUnit生效。

        :param sms_user_expire_unit: The sms_user_expire_unit of this PortalContent.
        :type: str
        """

        self._sms_user_expire_unit = sms_user_expire_unit

    @property
    def sms_user_max_access_number(self):
        """
        Gets the sms_user_max_access_number of this PortalContent.
        短信认证用户最大接入数。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。

        :return: The sms_user_max_access_number of this PortalContent.
        :rtype: int
        """
        return self._sms_user_max_access_number

    @sms_user_max_access_number.setter
    def sms_user_max_access_number(self, sms_user_max_access_number):
        """
        Sets the sms_user_max_access_number of this PortalContent.
        短信认证用户最大接入数。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。

        :param sms_user_max_access_number: The sms_user_max_access_number of this PortalContent.
        :type: int
        """
        if sms_user_max_access_number is not None and sms_user_max_access_number > 16:
            raise ValueError("Invalid value for `sms_user_max_access_number`, must be a value less than or equal to `16`")
        if sms_user_max_access_number is not None and sms_user_max_access_number < 1:
            raise ValueError("Invalid value for `sms_user_max_access_number`, must be a value greater than or equal to `1`")

        self._sms_user_max_access_number = sms_user_max_access_number

    @property
    def sms_password_expire(self):
        """
        Gets the sms_password_expire of this PortalContent.
        密码有效期。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。当smsPasswordExpireUnit为minute时，smsPasswordExpire取值范围为1~59。当smsPasswordExpireUnit为hour时，smsPasswordExpire取值范围为1~23。当smsPasswordExpireUnit为day时，smsPasswordExpire取值范围为1~365。

        :return: The sms_password_expire of this PortalContent.
        :rtype: int
        """
        return self._sms_password_expire

    @sms_password_expire.setter
    def sms_password_expire(self, sms_password_expire):
        """
        Sets the sms_password_expire of this PortalContent.
        密码有效期。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。当smsPasswordExpireUnit为minute时，smsPasswordExpire取值范围为1~59。当smsPasswordExpireUnit为hour时，smsPasswordExpire取值范围为1~23。当smsPasswordExpireUnit为day时，smsPasswordExpire取值范围为1~365。

        :param sms_password_expire: The sms_password_expire of this PortalContent.
        :type: int
        """

        self._sms_password_expire = sms_password_expire

    @property
    def sms_password_expire_unit(self):
        """
        Gets the sms_password_expire_unit of this PortalContent.
        密码有效期单位。只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。

        :return: The sms_password_expire_unit of this PortalContent.
        :rtype: str
        """
        return self._sms_password_expire_unit

    @sms_password_expire_unit.setter
    def sms_password_expire_unit(self, sms_password_expire_unit):
        """
        Sets the sms_password_expire_unit of this PortalContent.
        密码有效期单位。只能为day、hour、minute中的一个，大小写不敏感，前后空格忽略，且不能含有全角字符。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。

        :param sms_password_expire_unit: The sms_password_expire_unit of this PortalContent.
        :type: str
        """

        self._sms_password_expire_unit = sms_password_expire_unit

    @property
    def sms_user_group_id(self):
        """
        Gets the sms_user_group_id of this PortalContent.
        短信认证用户所属组ID，UUID格式。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。

        :return: The sms_user_group_id of this PortalContent.
        :rtype: str
        """
        return self._sms_user_group_id

    @sms_user_group_id.setter
    def sms_user_group_id(self, sms_user_group_id):
        """
        Sets the sms_user_group_id of this PortalContent.
        短信认证用户所属组ID，UUID格式。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。

        :param sms_user_group_id: The sms_user_group_id of this PortalContent.
        :type: str
        """
        if sms_user_group_id is not None and len(sms_user_group_id) > 36:
            raise ValueError("Invalid value for `sms_user_group_id`, length must be less than or equal to `36`")
        if sms_user_group_id is not None and len(sms_user_group_id) < 36:
            raise ValueError("Invalid value for `sms_user_group_id`, length must be greater than or equal to `36`")

        self._sms_user_group_id = sms_user_group_id

    @property
    def sms_user_group_name(self):
        """
        Gets the sms_user_group_name of this PortalContent.
        短信认证用户所属组名。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。

        :return: The sms_user_group_name of this PortalContent.
        :rtype: str
        """
        return self._sms_user_group_name

    @sms_user_group_name.setter
    def sms_user_group_name(self, sms_user_group_name):
        """
        Sets the sms_user_group_name of this PortalContent.
        短信认证用户所属组名。当smsAuthEnable为true时，smsUserMaxAccessNumber生效。

        :param sms_user_group_name: The sms_user_group_name of this PortalContent.
        :type: str
        """
        if sms_user_group_name is not None and len(sms_user_group_name) > 36:
            raise ValueError("Invalid value for `sms_user_group_name`, length must be less than or equal to `36`")
        if sms_user_group_name is not None and len(sms_user_group_name) < 1:
            raise ValueError("Invalid value for `sms_user_group_name`, length must be greater than or equal to `1`")

        self._sms_user_group_name = sms_user_group_name

    @property
    def accounting_enable(self):
        """
        Gets the accounting_enable of this PortalContent.
        使能实时计费。

        :return: The accounting_enable of this PortalContent.
        :rtype: bool
        """
        return self._accounting_enable

    @accounting_enable.setter
    def accounting_enable(self, accounting_enable):
        """
        Sets the accounting_enable of this PortalContent.
        使能实时计费。

        :param accounting_enable: The accounting_enable of this PortalContent.
        :type: bool
        """

        self._accounting_enable = accounting_enable

    @property
    def accounting_expire(self):
        """
        Gets the accounting_expire of this PortalContent.
        实时计费上报周期。当accountingExpireUnit为minute时，范围为1~65535。 accountingEnable为true时，accountingExpire生效。

        :return: The accounting_expire of this PortalContent.
        :rtype: int
        """
        return self._accounting_expire

    @accounting_expire.setter
    def accounting_expire(self, accounting_expire):
        """
        Sets the accounting_expire of this PortalContent.
        实时计费上报周期。当accountingExpireUnit为minute时，范围为1~65535。 accountingEnable为true时，accountingExpire生效。

        :param accounting_expire: The accounting_expire of this PortalContent.
        :type: int
        """
        if accounting_expire is not None and accounting_expire > 65535:
            raise ValueError("Invalid value for `accounting_expire`, must be a value less than or equal to `65535`")
        if accounting_expire is not None and accounting_expire < 0:
            raise ValueError("Invalid value for `accounting_expire`, must be a value greater than or equal to `0`")

        self._accounting_expire = accounting_expire

    @property
    def accounting_expire_unit(self):
        """
        Gets the accounting_expire_unit of this PortalContent.
        实时计费上报周期单位，只能为minute，大小写不敏感，前后空格忽略，且不能含有全角字符。accountingEnable为true时，accountingExpireUnit生效。

        :return: The accounting_expire_unit of this PortalContent.
        :rtype: str
        """
        return self._accounting_expire_unit

    @accounting_expire_unit.setter
    def accounting_expire_unit(self, accounting_expire_unit):
        """
        Sets the accounting_expire_unit of this PortalContent.
        实时计费上报周期单位，只能为minute，大小写不敏感，前后空格忽略，且不能含有全角字符。accountingEnable为true时，accountingExpireUnit生效。

        :param accounting_expire_unit: The accounting_expire_unit of this PortalContent.
        :type: str
        """

        self._accounting_expire_unit = accounting_expire_unit

    @property
    def ip_v6_auth_enable(self):
        """
        Gets the ip_v6_auth_enable of this PortalContent.
        IPV6是否开启。

        :return: The ip_v6_auth_enable of this PortalContent.
        :rtype: bool
        """
        return self._ip_v6_auth_enable

    @ip_v6_auth_enable.setter
    def ip_v6_auth_enable(self, ip_v6_auth_enable):
        """
        Sets the ip_v6_auth_enable of this PortalContent.
        IPV6是否开启。

        :param ip_v6_auth_enable: The ip_v6_auth_enable of this PortalContent.
        :type: bool
        """

        self._ip_v6_auth_enable = ip_v6_auth_enable

    @property
    def escape_strategy(self):
        """
        Gets the escape_strategy of this PortalContent.
        逃生策略。noNew：允许已认证用户继续使用网络，新用户不允许接入。默认值。noAuth：允许已认证用户继续使用网络，新用户需要输入PPSK密钥。注意：此时PPSK用户数控制MCA自动绑定功失效。 

        :return: The escape_strategy of this PortalContent.
        :rtype: str
        """
        return self._escape_strategy

    @escape_strategy.setter
    def escape_strategy(self, escape_strategy):
        """
        Sets the escape_strategy of this PortalContent.
        逃生策略。noNew：允许已认证用户继续使用网络，新用户不允许接入。默认值。noAuth：允许已认证用户继续使用网络，新用户需要输入PPSK密钥。注意：此时PPSK用户数控制MCA自动绑定功失效。 

        :param escape_strategy: The escape_strategy of this PortalContent.
        :type: str
        """

        self._escape_strategy = escape_strategy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PortalContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
