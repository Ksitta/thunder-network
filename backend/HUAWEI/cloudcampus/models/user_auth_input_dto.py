# coding: utf-8

"""
    终端用户认证授权

    终端用户认证开放API 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserAuthInputDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_type': 'int',
        'device_mac': 'str',
        'ssid': 'str',
        'terminal_ip': 'str',
        'terminal_mac': 'str',
        'user_name': 'str',
        'password': 'str'
    }

    attribute_map = {
        'auth_type': 'authType',
        'device_mac': 'deviceMac',
        'ssid': 'ssid',
        'terminal_ip': 'terminalIp',
        'terminal_mac': 'terminalMac',
        'user_name': 'userName',
        'password': 'password'
    }

    def __init__(self, auth_type=None, device_mac=None, ssid=None, terminal_ip=None, terminal_mac=None, user_name=None, password=None):
        """
        UserAuthInputDto - a model defined in Swagger
        """

        self._auth_type = None
        self._device_mac = None
        self._ssid = None
        self._terminal_ip = None
        self._terminal_mac = None
        self._user_name = None
        self._password = None

        if auth_type is not None:
          self.auth_type = auth_type
        if device_mac is not None:
          self.device_mac = device_mac
        if ssid is not None:
          self.ssid = ssid
        if terminal_ip is not None:
          self.terminal_ip = terminal_ip
        if terminal_mac is not None:
          self.terminal_mac = terminal_mac
        if user_name is not None:
          self.user_name = user_name
        if password is not None:
          self.password = password

    @property
    def auth_type(self):
        """
        Gets the auth_type of this UserAuthInputDto.
        认证类型。用户名密码：1；匿名认证：2；短信认证：3；passcode认证：6。默认为用户名密码认证(1)。

        :return: The auth_type of this UserAuthInputDto.
        :rtype: int
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """
        Sets the auth_type of this UserAuthInputDto.
        认证类型。用户名密码：1；匿名认证：2；短信认证：3；passcode认证：6。默认为用户名密码认证(1)。

        :param auth_type: The auth_type of this UserAuthInputDto.
        :type: int
        """
        if auth_type is not None and auth_type > 6:
            raise ValueError("Invalid value for `auth_type`, must be a value less than or equal to `6`")
        if auth_type is not None and auth_type < 1:
            raise ValueError("Invalid value for `auth_type`, must be a value greater than or equal to `1`")

        self._auth_type = auth_type

    @property
    def device_mac(self):
        """
        Gets the device_mac of this UserAuthInputDto.
        设备MAC地址。支持的格式：xx-xx-xx-xx-xx-xx/xx:xx:xx:xx:xx:xx/xxxxxxxxxxxx。

        :return: The device_mac of this UserAuthInputDto.
        :rtype: str
        """
        return self._device_mac

    @device_mac.setter
    def device_mac(self, device_mac):
        """
        Sets the device_mac of this UserAuthInputDto.
        设备MAC地址。支持的格式：xx-xx-xx-xx-xx-xx/xx:xx:xx:xx:xx:xx/xxxxxxxxxxxx。

        :param device_mac: The device_mac of this UserAuthInputDto.
        :type: str
        """

        self._device_mac = device_mac

    @property
    def ssid(self):
        """
        Gets the ssid of this UserAuthInputDto.
        AP SSID名称。

        :return: The ssid of this UserAuthInputDto.
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """
        Sets the ssid of this UserAuthInputDto.
        AP SSID名称。

        :param ssid: The ssid of this UserAuthInputDto.
        :type: str
        """

        self._ssid = ssid

    @property
    def terminal_ip(self):
        """
        Gets the terminal_ip of this UserAuthInputDto.
        终端IP地址，支持Ipv4和Ipv6地址，Ipv6地址例如：2000:0000:0000:0000:0000:0001。

        :return: The terminal_ip of this UserAuthInputDto.
        :rtype: str
        """
        return self._terminal_ip

    @terminal_ip.setter
    def terminal_ip(self, terminal_ip):
        """
        Sets the terminal_ip of this UserAuthInputDto.
        终端IP地址，支持Ipv4和Ipv6地址，Ipv6地址例如：2000:0000:0000:0000:0000:0001。

        :param terminal_ip: The terminal_ip of this UserAuthInputDto.
        :type: str
        """

        self._terminal_ip = terminal_ip

    @property
    def terminal_mac(self):
        """
        Gets the terminal_mac of this UserAuthInputDto.
        终端MAC地址。支持的格式：xx-xx-xx-xx-xx-xx/xx:xx:xx:xx:xx:xx/xxxxxxxxxxxx。

        :return: The terminal_mac of this UserAuthInputDto.
        :rtype: str
        """
        return self._terminal_mac

    @terminal_mac.setter
    def terminal_mac(self, terminal_mac):
        """
        Sets the terminal_mac of this UserAuthInputDto.
        终端MAC地址。支持的格式：xx-xx-xx-xx-xx-xx/xx:xx:xx:xx:xx:xx/xxxxxxxxxxxx。

        :param terminal_mac: The terminal_mac of this UserAuthInputDto.
        :type: str
        """

        self._terminal_mac = terminal_mac

    @property
    def user_name(self):
        """
        Gets the user_name of this UserAuthInputDto.
        用户名。

        :return: The user_name of this UserAuthInputDto.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this UserAuthInputDto.
        用户名。

        :param user_name: The user_name of this UserAuthInputDto.
        :type: str
        """
        if user_name is not None and len(user_name) > 128:
            raise ValueError("Invalid value for `user_name`, length must be less than or equal to `128`")
        if user_name is not None and len(user_name) < 1:
            raise ValueError("Invalid value for `user_name`, length must be greater than or equal to `1`")

        self._user_name = user_name

    @property
    def password(self):
        """
        Gets the password of this UserAuthInputDto.
        用户密码。

        :return: The password of this UserAuthInputDto.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this UserAuthInputDto.
        用户密码。

        :param password: The password of this UserAuthInputDto.
        :type: str
        """

        self._password = password

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserAuthInputDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
