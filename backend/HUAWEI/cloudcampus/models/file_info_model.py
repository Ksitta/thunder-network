# coding: utf-8

"""
    设备升级

    · 查询设备文件 · 创建站点升级 · 查询站点升级 · 查询设备升级 · 取消设备升级 · 删除站点升级 · 重新升级设备 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FileInfoModel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'version': 'str',
        'file_name': 'str',
        'display_name': 'str',
        'depened_pkg_version': 'str'
    }

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'file_name': 'fileName',
        'display_name': 'displayName',
        'depened_pkg_version': 'depenedPkgVersion'
    }

    def __init__(self, id=None, version=None, file_name=None, display_name=None, depened_pkg_version=None):
        """
        FileInfoModel - a model defined in Swagger
        """

        self._id = None
        self._version = None
        self._file_name = None
        self._display_name = None
        self._depened_pkg_version = None

        if id is not None:
          self.id = id
        if version is not None:
          self.version = version
        if file_name is not None:
          self.file_name = file_name
        if display_name is not None:
          self.display_name = display_name
        if depened_pkg_version is not None:
          self.depened_pkg_version = depened_pkg_version

    @property
    def id(self):
        """
        Gets the id of this FileInfoModel.
        文件ID。

        :return: The id of this FileInfoModel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FileInfoModel.
        文件ID。

        :param id: The id of this FileInfoModel.
        :type: str
        """

        self._id = id

    @property
    def version(self):
        """
        Gets the version of this FileInfoModel.
        版本号。

        :return: The version of this FileInfoModel.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this FileInfoModel.
        版本号。

        :param version: The version of this FileInfoModel.
        :type: str
        """
        if version is not None and len(version) > 256:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `256`")
        if version is not None and len(version) < 0:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `0`")

        self._version = version

    @property
    def file_name(self):
        """
        Gets the file_name of this FileInfoModel.
        文件名称。

        :return: The file_name of this FileInfoModel.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this FileInfoModel.
        文件名称。

        :param file_name: The file_name of this FileInfoModel.
        :type: str
        """
        if file_name is not None and len(file_name) > 256:
            raise ValueError("Invalid value for `file_name`, length must be less than or equal to `256`")
        if file_name is not None and len(file_name) < 0:
            raise ValueError("Invalid value for `file_name`, length must be greater than or equal to `0`")

        self._file_name = file_name

    @property
    def display_name(self):
        """
        Gets the display_name of this FileInfoModel.
        文件别名。

        :return: The display_name of this FileInfoModel.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this FileInfoModel.
        文件别名。

        :param display_name: The display_name of this FileInfoModel.
        :type: str
        """
        if display_name is not None and len(display_name) > 256:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `256`")
        if display_name is not None and len(display_name) < 0:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `0`")

        self._display_name = display_name

    @property
    def depened_pkg_version(self):
        """
        Gets the depened_pkg_version of this FileInfoModel.
        如果是补丁，则为当前补丁依赖的大包版本号。

        :return: The depened_pkg_version of this FileInfoModel.
        :rtype: str
        """
        return self._depened_pkg_version

    @depened_pkg_version.setter
    def depened_pkg_version(self, depened_pkg_version):
        """
        Sets the depened_pkg_version of this FileInfoModel.
        如果是补丁，则为当前补丁依赖的大包版本号。

        :param depened_pkg_version: The depened_pkg_version of this FileInfoModel.
        :type: str
        """
        if depened_pkg_version is not None and len(depened_pkg_version) > 256:
            raise ValueError("Invalid value for `depened_pkg_version`, length must be less than or equal to `256`")
        if depened_pkg_version is not None and len(depened_pkg_version) < 0:
            raise ValueError("Invalid value for `depened_pkg_version`, length must be greater than or equal to `0`")

        self._depened_pkg_version = depened_pkg_version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FileInfoModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
