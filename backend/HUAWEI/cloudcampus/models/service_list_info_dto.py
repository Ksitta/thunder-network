# coding: utf-8

"""
    防火墙设备NAT配置

    防火墙设备NAT配置第三方接口。

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServiceListInfoDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_type': 'str',
        'source_port': 'str',
        'dest_port': 'str'
    }

    attribute_map = {
        'service_type': 'serviceType',
        'source_port': 'sourcePort',
        'dest_port': 'destPort'
    }

    def __init__(self, service_type=None, source_port=None, dest_port=None):
        """
        ServiceListInfoDto - a model defined in Swagger
        """

        self._service_type = None
        self._source_port = None
        self._dest_port = None

        if service_type is not None:
          self.service_type = service_type
        if source_port is not None:
          self.source_port = source_port
        if dest_port is not None:
          self.dest_port = dest_port

    @property
    def service_type(self):
        """
        Gets the service_type of this ServiceListInfoDto.
        协议。取值范围：tcp，udp。

        :return: The service_type of this ServiceListInfoDto.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """
        Sets the service_type of this ServiceListInfoDto.
        协议。取值范围：tcp，udp。

        :param service_type: The service_type of this ServiceListInfoDto.
        :type: str
        """
        if service_type is not None and len(service_type) > 10:
            raise ValueError("Invalid value for `service_type`, length must be less than or equal to `10`")
        if service_type is not None and len(service_type) < 0:
            raise ValueError("Invalid value for `service_type`, length must be greater than or equal to `0`")

        self._service_type = service_type

    @property
    def source_port(self):
        """
        Gets the source_port of this ServiceListInfoDto.
        源端口。形式：80 80-89 80,82-85。

        :return: The source_port of this ServiceListInfoDto.
        :rtype: str
        """
        return self._source_port

    @source_port.setter
    def source_port(self, source_port):
        """
        Sets the source_port of this ServiceListInfoDto.
        源端口。形式：80 80-89 80,82-85。

        :param source_port: The source_port of this ServiceListInfoDto.
        :type: str
        """

        self._source_port = source_port

    @property
    def dest_port(self):
        """
        Gets the dest_port of this ServiceListInfoDto.
        目的端口。形式：80 80-89 80,82-85。

        :return: The dest_port of this ServiceListInfoDto.
        :rtype: str
        """
        return self._dest_port

    @dest_port.setter
    def dest_port(self, dest_port):
        """
        Sets the dest_port of this ServiceListInfoDto.
        目的端口。形式：80 80-89 80,82-85。

        :param dest_port: The dest_port of this ServiceListInfoDto.
        :type: str
        """

        self._dest_port = dest_port

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServiceListInfoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
