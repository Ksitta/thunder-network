# coding: utf-8

"""
    用户管理

    用户管理第三方北向接口。 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AddUserInputDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_name': 'str',
        'email': 'str',
        'telephone': 'str',
        'vaild_period': 'str',
        'description': 'str',
        'next_update_userpass': 'bool',
        'user_group_id': 'str',
        'password': 'str',
        'password_confirm': 'str'
    }

    attribute_map = {
        'user_name': 'userName',
        'email': 'email',
        'telephone': 'telephone',
        'vaild_period': 'vaildPeriod',
        'description': 'description',
        'next_update_userpass': 'nextUpdateUserpass',
        'user_group_id': 'userGroupId',
        'password': 'password',
        'password_confirm': 'passwordConfirm'
    }

    def __init__(self, user_name=None, email=None, telephone=None, vaild_period=None, description=None, next_update_userpass=None, user_group_id=None, password=None, password_confirm=None):
        """
        AddUserInputDto - a model defined in Swagger
        """

        self._user_name = None
        self._email = None
        self._telephone = None
        self._vaild_period = None
        self._description = None
        self._next_update_userpass = None
        self._user_group_id = None
        self._password = None
        self._password_confirm = None

        if user_name is not None:
          self.user_name = user_name
        if email is not None:
          self.email = email
        if telephone is not None:
          self.telephone = telephone
        if vaild_period is not None:
          self.vaild_period = vaild_period
        if description is not None:
          self.description = description
        if next_update_userpass is not None:
          self.next_update_userpass = next_update_userpass
        if user_group_id is not None:
          self.user_group_id = user_group_id
        if password is not None:
          self.password = password
        if password_confirm is not None:
          self.password_confirm = password_confirm

    @property
    def user_name(self):
        """
        Gets the user_name of this AddUserInputDto.
        用户名。

        :return: The user_name of this AddUserInputDto.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this AddUserInputDto.
        用户名。

        :param user_name: The user_name of this AddUserInputDto.
        :type: str
        """
        if user_name is not None and len(user_name) > 64:
            raise ValueError("Invalid value for `user_name`, length must be less than or equal to `64`")
        if user_name is not None and len(user_name) < 1:
            raise ValueError("Invalid value for `user_name`, length must be greater than or equal to `1`")

        self._user_name = user_name

    @property
    def email(self):
        """
        Gets the email of this AddUserInputDto.
        邮箱。

        :return: The email of this AddUserInputDto.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this AddUserInputDto.
        邮箱。

        :param email: The email of this AddUserInputDto.
        :type: str
        """
        if email is not None and len(email) > 100:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `100`")
        if email is not None and len(email) < 0:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `0`")

        self._email = email

    @property
    def telephone(self):
        """
        Gets the telephone of this AddUserInputDto.
        联系电话。

        :return: The telephone of this AddUserInputDto.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """
        Sets the telephone of this AddUserInputDto.
        联系电话。

        :param telephone: The telephone of this AddUserInputDto.
        :type: str
        """
        if telephone is not None and len(telephone) > 50:
            raise ValueError("Invalid value for `telephone`, length must be less than or equal to `50`")
        if telephone is not None and len(telephone) < 0:
            raise ValueError("Invalid value for `telephone`, length must be greater than or equal to `0`")

        self._telephone = telephone

    @property
    def vaild_period(self):
        """
        Gets the vaild_period of this AddUserInputDto.
        用户到期时间。

        :return: The vaild_period of this AddUserInputDto.
        :rtype: str
        """
        return self._vaild_period

    @vaild_period.setter
    def vaild_period(self, vaild_period):
        """
        Sets the vaild_period of this AddUserInputDto.
        用户到期时间。

        :param vaild_period: The vaild_period of this AddUserInputDto.
        :type: str
        """

        self._vaild_period = vaild_period

    @property
    def description(self):
        """
        Gets the description of this AddUserInputDto.
        用户描述信息。

        :return: The description of this AddUserInputDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AddUserInputDto.
        用户描述信息。

        :param description: The description of this AddUserInputDto.
        :type: str
        """

        self._description = description

    @property
    def next_update_userpass(self):
        """
        Gets the next_update_userpass of this AddUserInputDto.
        下次登录修改密码。

        :return: The next_update_userpass of this AddUserInputDto.
        :rtype: bool
        """
        return self._next_update_userpass

    @next_update_userpass.setter
    def next_update_userpass(self, next_update_userpass):
        """
        Sets the next_update_userpass of this AddUserInputDto.
        下次登录修改密码。

        :param next_update_userpass: The next_update_userpass of this AddUserInputDto.
        :type: bool
        """

        self._next_update_userpass = next_update_userpass

    @property
    def user_group_id(self):
        """
        Gets the user_group_id of this AddUserInputDto.
        用户组ID。

        :return: The user_group_id of this AddUserInputDto.
        :rtype: str
        """
        return self._user_group_id

    @user_group_id.setter
    def user_group_id(self, user_group_id):
        """
        Sets the user_group_id of this AddUserInputDto.
        用户组ID。

        :param user_group_id: The user_group_id of this AddUserInputDto.
        :type: str
        """

        self._user_group_id = user_group_id

    @property
    def password(self):
        """
        Gets the password of this AddUserInputDto.
        密码。

        :return: The password of this AddUserInputDto.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this AddUserInputDto.
        密码。

        :param password: The password of this AddUserInputDto.
        :type: str
        """
        if password is not None and len(password) > 128:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `128`")
        if password is not None and len(password) < 8:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")

        self._password = password

    @property
    def password_confirm(self):
        """
        Gets the password_confirm of this AddUserInputDto.
        确认密码。

        :return: The password_confirm of this AddUserInputDto.
        :rtype: str
        """
        return self._password_confirm

    @password_confirm.setter
    def password_confirm(self, password_confirm):
        """
        Sets the password_confirm of this AddUserInputDto.
        确认密码。

        :param password_confirm: The password_confirm of this AddUserInputDto.
        :type: str
        """
        if password_confirm is not None and len(password_confirm) > 128:
            raise ValueError("Invalid value for `password_confirm`, length must be less than or equal to `128`")
        if password_confirm is not None and len(password_confirm) < 8:
            raise ValueError("Invalid value for `password_confirm`, length must be greater than or equal to `8`")

        self._password_confirm = password_confirm

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AddUserInputDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
