# coding: utf-8

"""
    设备基本信息管理

    设备相关操作接口。 场景：对设备增删改查操作的第三方接口。

    OpenAPI spec version: 1.6.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateDeviceFailDataBean(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'esn': 'str',
        'name': 'str',
        'device_model': 'str',
        'system_ip': 'str'
    }

    attribute_map = {
        'esn': 'esn',
        'name': 'name',
        'device_model': 'deviceModel',
        'system_ip': 'systemIp'
    }

    def __init__(self, esn=None, name=None, device_model=None, system_ip=None):
        """
        CreateDeviceFailDataBean - a model defined in Swagger
        """

        self._esn = None
        self._name = None
        self._device_model = None
        self._system_ip = None

        if esn is not None:
          self.esn = esn
        if name is not None:
          self.name = name
        if device_model is not None:
          self.device_model = device_model
        if system_ip is not None:
          self.system_ip = system_ip

    @property
    def esn(self):
        """
        Gets the esn of this CreateDeviceFailDataBean.
        设备ESN号。

        :return: The esn of this CreateDeviceFailDataBean.
        :rtype: str
        """
        return self._esn

    @esn.setter
    def esn(self, esn):
        """
        Sets the esn of this CreateDeviceFailDataBean.
        设备ESN号。

        :param esn: The esn of this CreateDeviceFailDataBean.
        :type: str
        """

        self._esn = esn

    @property
    def name(self):
        """
        Gets the name of this CreateDeviceFailDataBean.
        设备名称。

        :return: The name of this CreateDeviceFailDataBean.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateDeviceFailDataBean.
        设备名称。

        :param name: The name of this CreateDeviceFailDataBean.
        :type: str
        """

        self._name = name

    @property
    def device_model(self):
        """
        Gets the device_model of this CreateDeviceFailDataBean.
        设备型号。

        :return: The device_model of this CreateDeviceFailDataBean.
        :rtype: str
        """
        return self._device_model

    @device_model.setter
    def device_model(self, device_model):
        """
        Sets the device_model of this CreateDeviceFailDataBean.
        设备型号。

        :param device_model: The device_model of this CreateDeviceFailDataBean.
        :type: str
        """
        if device_model is not None and len(device_model) > 64:
            raise ValueError("Invalid value for `device_model`, length must be less than or equal to `64`")

        self._device_model = device_model

    @property
    def system_ip(self):
        """
        Gets the system_ip of this CreateDeviceFailDataBean.
        系统IP地址。

        :return: The system_ip of this CreateDeviceFailDataBean.
        :rtype: str
        """
        return self._system_ip

    @system_ip.setter
    def system_ip(self, system_ip):
        """
        Sets the system_ip of this CreateDeviceFailDataBean.
        系统IP地址。

        :param system_ip: The system_ip of this CreateDeviceFailDataBean.
        :type: str
        """
        if system_ip is not None and len(system_ip) > 64:
            raise ValueError("Invalid value for `system_ip`, length must be less than or equal to `64`")
        if system_ip is not None and len(system_ip) < 0:
            raise ValueError("Invalid value for `system_ip`, length must be greater than or equal to `0`")

        self._system_ip = system_ip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateDeviceFailDataBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
