# coding: utf-8

"""
    AP SSID配置管理

    AP SSID第三方接口。

    OpenAPI spec version: 1.4.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VlanDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'priority': 'int',
        'vlan_id': 'int',
        'tags': 'list[TagDto]'
    }

    attribute_map = {
        'priority': 'priority',
        'vlan_id': 'vlanId',
        'tags': 'tags'
    }

    def __init__(self, priority=None, vlan_id=None, tags=None):
        """
        VlanDto - a model defined in Swagger
        """

        self._priority = None
        self._vlan_id = None
        self._tags = None

        if priority is not None:
          self.priority = priority
        if vlan_id is not None:
          self.vlan_id = vlan_id
        if tags is not None:
          self.tags = tags

    @property
    def priority(self):
        """
        Gets the priority of this VlanDto.
        优先级。0的优先级最低；当取值大于0时，值越小优先级越高。

        :return: The priority of this VlanDto.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this VlanDto.
        优先级。0的优先级最低；当取值大于0时，值越小优先级越高。

        :param priority: The priority of this VlanDto.
        :type: int
        """
        if priority is not None and priority > 16:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `16`")
        if priority is not None and priority < 0:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")

        self._priority = priority

    @property
    def vlan_id(self):
        """
        Gets the vlan_id of this VlanDto.
        所属VLAN ID。

        :return: The vlan_id of this VlanDto.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """
        Sets the vlan_id of this VlanDto.
        所属VLAN ID。

        :param vlan_id: The vlan_id of this VlanDto.
        :type: int
        """
        if vlan_id is not None and vlan_id > 4094:
            raise ValueError("Invalid value for `vlan_id`, must be a value less than or equal to `4094`")
        if vlan_id is not None and vlan_id < 1:
            raise ValueError("Invalid value for `vlan_id`, must be a value greater than or equal to `1`")

        self._vlan_id = vlan_id

    @property
    def tags(self):
        """
        Gets the tags of this VlanDto.
        所属VLAN的设备标签配置列表。

        :return: The tags of this VlanDto.
        :rtype: list[TagDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this VlanDto.
        所属VLAN的设备标签配置列表。

        :param tags: The tags of this VlanDto.
        :type: list[TagDto]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VlanDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
