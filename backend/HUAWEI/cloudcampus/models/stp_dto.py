# coding: utf-8

"""
    交换机STP配置

    LSW STP配置北向接口，主要特性： · 查询交换STP配置信息 · 修改交换机STP配置 · 删除交换机STP配置 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StpDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stp_mode': 'int',
        'mstp_regions': 'list[MstpRegion]',
        'rstp_config': 'list[RegionInstanceDevice]'
    }

    attribute_map = {
        'stp_mode': 'stpMode',
        'mstp_regions': 'mstpRegions',
        'rstp_config': 'rstpConfig'
    }

    def __init__(self, stp_mode=None, mstp_regions=None, rstp_config=None):
        """
        StpDto - a model defined in Swagger
        """

        self._stp_mode = None
        self._mstp_regions = None
        self._rstp_config = None

        if stp_mode is not None:
          self.stp_mode = stp_mode
        if mstp_regions is not None:
          self.mstp_regions = mstp_regions
        if rstp_config is not None:
          self.rstp_config = rstp_config

    @property
    def stp_mode(self):
        """
        Gets the stp_mode of this StpDto.
        STP模式。1表示MSTP，2表示RSTP。

        :return: The stp_mode of this StpDto.
        :rtype: int
        """
        return self._stp_mode

    @stp_mode.setter
    def stp_mode(self, stp_mode):
        """
        Sets the stp_mode of this StpDto.
        STP模式。1表示MSTP，2表示RSTP。

        :param stp_mode: The stp_mode of this StpDto.
        :type: int
        """
        if stp_mode is not None and stp_mode > 2:
            raise ValueError("Invalid value for `stp_mode`, must be a value less than or equal to `2`")
        if stp_mode is not None and stp_mode < 1:
            raise ValueError("Invalid value for `stp_mode`, must be a value greater than or equal to `1`")

        self._stp_mode = stp_mode

    @property
    def mstp_regions(self):
        """
        Gets the mstp_regions of this StpDto.
        MST域集合。MSTP模式下需要配置。

        :return: The mstp_regions of this StpDto.
        :rtype: list[MstpRegion]
        """
        return self._mstp_regions

    @mstp_regions.setter
    def mstp_regions(self, mstp_regions):
        """
        Sets the mstp_regions of this StpDto.
        MST域集合。MSTP模式下需要配置。

        :param mstp_regions: The mstp_regions of this StpDto.
        :type: list[MstpRegion]
        """

        self._mstp_regions = mstp_regions

    @property
    def rstp_config(self):
        """
        Gets the rstp_config of this StpDto.
        RSTP优先级。RSTP模式下需要配置。

        :return: The rstp_config of this StpDto.
        :rtype: list[RegionInstanceDevice]
        """
        return self._rstp_config

    @rstp_config.setter
    def rstp_config(self, rstp_config):
        """
        Sets the rstp_config of this StpDto.
        RSTP优先级。RSTP模式下需要配置。

        :param rstp_config: The rstp_config of this StpDto.
        :type: list[RegionInstanceDevice]
        """

        self._rstp_config = rstp_config

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StpDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
