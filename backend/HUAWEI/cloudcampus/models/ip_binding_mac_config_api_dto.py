# coding: utf-8

"""
    AP DHCP配置

    AP DHCP配置第三方接口说明。 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IpBindingMacConfigApiDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'static_ip_address': 'str',
        'static_mac_address': 'str'
    }

    attribute_map = {
        'static_ip_address': 'staticIpAddress',
        'static_mac_address': 'staticMacAddress'
    }

    def __init__(self, static_ip_address=None, static_mac_address=None):
        """
        IpBindingMacConfigApiDto - a model defined in Swagger
        """

        self._static_ip_address = None
        self._static_mac_address = None

        if static_ip_address is not None:
          self.static_ip_address = static_ip_address
        if static_mac_address is not None:
          self.static_mac_address = static_mac_address

    @property
    def static_ip_address(self):
        """
        Gets the static_ip_address of this IpBindingMacConfigApiDto.
        IP地址，不能与列表中其他IP重复。IP为上面网段（IP+mask计算得出）中的可分配IP地址，且不能为网关IP（上面配置IP）。

        :return: The static_ip_address of this IpBindingMacConfigApiDto.
        :rtype: str
        """
        return self._static_ip_address

    @static_ip_address.setter
    def static_ip_address(self, static_ip_address):
        """
        Sets the static_ip_address of this IpBindingMacConfigApiDto.
        IP地址，不能与列表中其他IP重复。IP为上面网段（IP+mask计算得出）中的可分配IP地址，且不能为网关IP（上面配置IP）。

        :param static_ip_address: The static_ip_address of this IpBindingMacConfigApiDto.
        :type: str
        """

        self._static_ip_address = static_ip_address

    @property
    def static_mac_address(self):
        """
        Gets the static_mac_address of this IpBindingMacConfigApiDto.
        MAC地址，不能与列表中其他MAC地址重复。MAC不能为广播（全F），组播（第一段2进制表示以“1”结尾）。

        :return: The static_mac_address of this IpBindingMacConfigApiDto.
        :rtype: str
        """
        return self._static_mac_address

    @static_mac_address.setter
    def static_mac_address(self, static_mac_address):
        """
        Sets the static_mac_address of this IpBindingMacConfigApiDto.
        MAC地址，不能与列表中其他MAC地址重复。MAC不能为广播（全F），组播（第一段2进制表示以“1”结尾）。

        :param static_mac_address: The static_mac_address of this IpBindingMacConfigApiDto.
        :type: str
        """

        self._static_mac_address = static_mac_address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IpBindingMacConfigApiDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
