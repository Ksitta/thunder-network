# coding: utf-8

"""
    终端客流量数据信息查询

    1、查询设备标签。 2、查询历史客户流量。 3、查询实时客户流量，返回最近5分钟内接入客户流量。 4、查询访客、路人、接入用户的历史趋势。 5、查询访客驻留时长的历史趋势。 6、查询回头客记录。 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlowDistrModel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_name': 'str',
        'counts': 'list[Count]'
    }

    attribute_map = {
        'target_name': 'targetName',
        'counts': 'counts'
    }

    def __init__(self, target_name=None, counts=None):
        """
        FlowDistrModel - a model defined in Swagger
        """

        self._target_name = None
        self._counts = None

        if target_name is not None:
          self.target_name = target_name
        if counts is not None:
          self.counts = counts

    @property
    def target_name(self):
        """
        Gets the target_name of this FlowDistrModel.
        \"capture_rate\"：终端捕获率。 \"passersby\"：客户类型，路人。 \"visitors\"：客户数量，访客。 \"connected\"：客户数量，接入用户。 \"within_one_hr\"：驻留时长小于一小时的客户数量。 \"one_hr_to_six_hrs\"：驻留时长大于一小时小于6小时的客户数量。 \"more_than_six_hrs\"：驻留时长大于6小时的客户数量。 \"average_staytime\"：平均驻留时长的客户数量。 \"first_time\"：首次访问的客户数量。 \"occasionally\"：偶尔访问的客户数量。 \"regularly\"：经常访问的客户数量。 \"frequently\"：频繁访问的客户数量。 \"repeat_rate\"：重复访问率。 \"humanflow\"：客流量。 

        :return: The target_name of this FlowDistrModel.
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """
        Sets the target_name of this FlowDistrModel.
        \"capture_rate\"：终端捕获率。 \"passersby\"：客户类型，路人。 \"visitors\"：客户数量，访客。 \"connected\"：客户数量，接入用户。 \"within_one_hr\"：驻留时长小于一小时的客户数量。 \"one_hr_to_six_hrs\"：驻留时长大于一小时小于6小时的客户数量。 \"more_than_six_hrs\"：驻留时长大于6小时的客户数量。 \"average_staytime\"：平均驻留时长的客户数量。 \"first_time\"：首次访问的客户数量。 \"occasionally\"：偶尔访问的客户数量。 \"regularly\"：经常访问的客户数量。 \"frequently\"：频繁访问的客户数量。 \"repeat_rate\"：重复访问率。 \"humanflow\"：客流量。 

        :param target_name: The target_name of this FlowDistrModel.
        :type: str
        """
        if target_name is not None and len(target_name) > 64:
            raise ValueError("Invalid value for `target_name`, length must be less than or equal to `64`")
        if target_name is not None and len(target_name) < 0:
            raise ValueError("Invalid value for `target_name`, length must be greater than or equal to `0`")

        self._target_name = target_name

    @property
    def counts(self):
        """
        Gets the counts of this FlowDistrModel.
        对应时间的客流量。

        :return: The counts of this FlowDistrModel.
        :rtype: list[Count]
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """
        Sets the counts of this FlowDistrModel.
        对应时间的客流量。

        :param counts: The counts of this FlowDistrModel.
        :type: list[Count]
        """

        self._counts = counts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlowDistrModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
