# coding: utf-8

"""
    租户管理

    租户管理第三方北向接口。 · 提供租户创建接口 · 提供租户删除接口 · 提供租户查询接口 

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TenantCommonDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_name': 'str',
        'tenant_email': 'str',
        'tenant_phone': 'str',
        'tenant_description': 'str',
        'tenant_address': 'str'
    }

    attribute_map = {
        'tenant_name': 'tenantName',
        'tenant_email': 'tenantEmail',
        'tenant_phone': 'tenantPhone',
        'tenant_description': 'tenantDescription',
        'tenant_address': 'tenantAddress'
    }

    def __init__(self, tenant_name=None, tenant_email=None, tenant_phone=None, tenant_description=None, tenant_address=None):
        """
        TenantCommonDto - a model defined in Swagger
        """

        self._tenant_name = None
        self._tenant_email = None
        self._tenant_phone = None
        self._tenant_description = None
        self._tenant_address = None

        if tenant_name is not None:
          self.tenant_name = tenant_name
        if tenant_email is not None:
          self.tenant_email = tenant_email
        if tenant_phone is not None:
          self.tenant_phone = tenant_phone
        if tenant_description is not None:
          self.tenant_description = tenant_description
        if tenant_address is not None:
          self.tenant_address = tenant_address

    @property
    def tenant_name(self):
        """
        Gets the tenant_name of this TenantCommonDto.
        租户名称。

        :return: The tenant_name of this TenantCommonDto.
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """
        Sets the tenant_name of this TenantCommonDto.
        租户名称。

        :param tenant_name: The tenant_name of this TenantCommonDto.
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def tenant_email(self):
        """
        Gets the tenant_email of this TenantCommonDto.
        租户服务邮箱。

        :return: The tenant_email of this TenantCommonDto.
        :rtype: str
        """
        return self._tenant_email

    @tenant_email.setter
    def tenant_email(self, tenant_email):
        """
        Sets the tenant_email of this TenantCommonDto.
        租户服务邮箱。

        :param tenant_email: The tenant_email of this TenantCommonDto.
        :type: str
        """

        self._tenant_email = tenant_email

    @property
    def tenant_phone(self):
        """
        Gets the tenant_phone of this TenantCommonDto.
        租户服务电话。

        :return: The tenant_phone of this TenantCommonDto.
        :rtype: str
        """
        return self._tenant_phone

    @tenant_phone.setter
    def tenant_phone(self, tenant_phone):
        """
        Sets the tenant_phone of this TenantCommonDto.
        租户服务电话。

        :param tenant_phone: The tenant_phone of this TenantCommonDto.
        :type: str
        """

        self._tenant_phone = tenant_phone

    @property
    def tenant_description(self):
        """
        Gets the tenant_description of this TenantCommonDto.
        租户描述。

        :return: The tenant_description of this TenantCommonDto.
        :rtype: str
        """
        return self._tenant_description

    @tenant_description.setter
    def tenant_description(self, tenant_description):
        """
        Sets the tenant_description of this TenantCommonDto.
        租户描述。

        :param tenant_description: The tenant_description of this TenantCommonDto.
        :type: str
        """

        self._tenant_description = tenant_description

    @property
    def tenant_address(self):
        """
        Gets the tenant_address of this TenantCommonDto.
        租户地址。

        :return: The tenant_address of this TenantCommonDto.
        :rtype: str
        """
        return self._tenant_address

    @tenant_address.setter
    def tenant_address(self, tenant_address):
        """
        Sets the tenant_address of this TenantCommonDto.
        租户地址。

        :param tenant_address: The tenant_address of this TenantCommonDto.
        :type: str
        """
        if tenant_address is not None and len(tenant_address) > 255:
            raise ValueError("Invalid value for `tenant_address`, length must be less than or equal to `255`")
        if tenant_address is not None and len(tenant_address) < 0:
            raise ValueError("Invalid value for `tenant_address`, length must be greater than or equal to `0`")

        self._tenant_address = tenant_address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TenantCommonDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
