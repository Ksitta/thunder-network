# coding: utf-8

"""
    室内地图信息查询

    室内地图第三方北向接口。 · 查询站点中所有楼栋基本信息 · 查询楼栋中所有楼层基本信息 · 查询楼栋中所有楼层详细信息 · 查询楼栋中楼层和设备布放信息 · 查询楼栋中楼层已布放设备详细信息 · 查询楼层已布放设备位置信息 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceLocationInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'building_id': 'str',
        'building_name': 'str',
        'floor_id': 'str',
        'floor_number': 'str',
        'floor_name': 'str',
        'position_x': 'int',
        'position_y': 'int',
        'plan_position_x': 'int',
        'plan_position_y': 'int'
    }

    attribute_map = {
        'id': 'id',
        'building_id': 'buildingId',
        'building_name': 'buildingName',
        'floor_id': 'floorId',
        'floor_number': 'floorNumber',
        'floor_name': 'floorName',
        'position_x': 'positionX',
        'position_y': 'positionY',
        'plan_position_x': 'planPositionX',
        'plan_position_y': 'planPositionY'
    }

    def __init__(self, id=None, building_id=None, building_name=None, floor_id=None, floor_number=None, floor_name=None, position_x=None, position_y=None, plan_position_x=None, plan_position_y=None):
        """
        DeviceLocationInfo - a model defined in Swagger
        """

        self._id = None
        self._building_id = None
        self._building_name = None
        self._floor_id = None
        self._floor_number = None
        self._floor_name = None
        self._position_x = None
        self._position_y = None
        self._plan_position_x = None
        self._plan_position_y = None

        if id is not None:
          self.id = id
        if building_id is not None:
          self.building_id = building_id
        if building_name is not None:
          self.building_name = building_name
        if floor_id is not None:
          self.floor_id = floor_id
        if floor_number is not None:
          self.floor_number = floor_number
        if floor_name is not None:
          self.floor_name = floor_name
        if position_x is not None:
          self.position_x = position_x
        if position_y is not None:
          self.position_y = position_y
        if plan_position_x is not None:
          self.plan_position_x = plan_position_x
        if plan_position_y is not None:
          self.plan_position_y = plan_position_y

    @property
    def id(self):
        """
        Gets the id of this DeviceLocationInfo.
        设备ID，格式UUID。

        :return: The id of this DeviceLocationInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeviceLocationInfo.
        设备ID，格式UUID。

        :param id: The id of this DeviceLocationInfo.
        :type: str
        """

        self._id = id

    @property
    def building_id(self):
        """
        Gets the building_id of this DeviceLocationInfo.
        楼栋ID，格式UUID。

        :return: The building_id of this DeviceLocationInfo.
        :rtype: str
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """
        Sets the building_id of this DeviceLocationInfo.
        楼栋ID，格式UUID。

        :param building_id: The building_id of this DeviceLocationInfo.
        :type: str
        """

        self._building_id = building_id

    @property
    def building_name(self):
        """
        Gets the building_name of this DeviceLocationInfo.
        楼栋名称。

        :return: The building_name of this DeviceLocationInfo.
        :rtype: str
        """
        return self._building_name

    @building_name.setter
    def building_name(self, building_name):
        """
        Sets the building_name of this DeviceLocationInfo.
        楼栋名称。

        :param building_name: The building_name of this DeviceLocationInfo.
        :type: str
        """

        self._building_name = building_name

    @property
    def floor_id(self):
        """
        Gets the floor_id of this DeviceLocationInfo.
        楼层ID，格式UUID。

        :return: The floor_id of this DeviceLocationInfo.
        :rtype: str
        """
        return self._floor_id

    @floor_id.setter
    def floor_id(self, floor_id):
        """
        Sets the floor_id of this DeviceLocationInfo.
        楼层ID，格式UUID。

        :param floor_id: The floor_id of this DeviceLocationInfo.
        :type: str
        """

        self._floor_id = floor_id

    @property
    def floor_number(self):
        """
        Gets the floor_number of this DeviceLocationInfo.
        楼层号。

        :return: The floor_number of this DeviceLocationInfo.
        :rtype: str
        """
        return self._floor_number

    @floor_number.setter
    def floor_number(self, floor_number):
        """
        Sets the floor_number of this DeviceLocationInfo.
        楼层号。

        :param floor_number: The floor_number of this DeviceLocationInfo.
        :type: str
        """

        self._floor_number = floor_number

    @property
    def floor_name(self):
        """
        Gets the floor_name of this DeviceLocationInfo.
        楼层名称。

        :return: The floor_name of this DeviceLocationInfo.
        :rtype: str
        """
        return self._floor_name

    @floor_name.setter
    def floor_name(self, floor_name):
        """
        Sets the floor_name of this DeviceLocationInfo.
        楼层名称。

        :param floor_name: The floor_name of this DeviceLocationInfo.
        :type: str
        """

        self._floor_name = floor_name

    @property
    def position_x(self):
        """
        Gets the position_x of this DeviceLocationInfo.
        设备布放坐标X，单位：像素。

        :return: The position_x of this DeviceLocationInfo.
        :rtype: int
        """
        return self._position_x

    @position_x.setter
    def position_x(self, position_x):
        """
        Sets the position_x of this DeviceLocationInfo.
        设备布放坐标X，单位：像素。

        :param position_x: The position_x of this DeviceLocationInfo.
        :type: int
        """

        self._position_x = position_x

    @property
    def position_y(self):
        """
        Gets the position_y of this DeviceLocationInfo.
        设备布放坐标Y，单位：像素。

        :return: The position_y of this DeviceLocationInfo.
        :rtype: int
        """
        return self._position_y

    @position_y.setter
    def position_y(self, position_y):
        """
        Sets the position_y of this DeviceLocationInfo.
        设备布放坐标Y，单位：像素。

        :param position_y: The position_y of this DeviceLocationInfo.
        :type: int
        """

        self._position_y = position_y

    @property
    def plan_position_x(self):
        """
        Gets the plan_position_x of this DeviceLocationInfo.
        设备规划坐标X，单位：像素。

        :return: The plan_position_x of this DeviceLocationInfo.
        :rtype: int
        """
        return self._plan_position_x

    @plan_position_x.setter
    def plan_position_x(self, plan_position_x):
        """
        Sets the plan_position_x of this DeviceLocationInfo.
        设备规划坐标X，单位：像素。

        :param plan_position_x: The plan_position_x of this DeviceLocationInfo.
        :type: int
        """

        self._plan_position_x = plan_position_x

    @property
    def plan_position_y(self):
        """
        Gets the plan_position_y of this DeviceLocationInfo.
        设备规划坐标Y，单位：像素。

        :return: The plan_position_y of this DeviceLocationInfo.
        :rtype: int
        """
        return self._plan_position_y

    @plan_position_y.setter
    def plan_position_y(self, plan_position_y):
        """
        Sets the plan_position_y of this DeviceLocationInfo.
        设备规划坐标Y，单位：像素。

        :param plan_position_y: The plan_position_y of this DeviceLocationInfo.
        :type: int
        """

        self._plan_position_y = plan_position_y

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceLocationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
