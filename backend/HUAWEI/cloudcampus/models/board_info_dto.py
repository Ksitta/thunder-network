# coding: utf-8

"""
    单板管理

    单板管理第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BoardInfoDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'slot': 'str',
        'model': 'str',
        'status': 'str'
    }

    attribute_map = {
        'slot': 'slot',
        'model': 'model',
        'status': 'status'
    }

    def __init__(self, slot=None, model=None, status=None):
        """
        BoardInfoDto - a model defined in Swagger
        """

        self._slot = None
        self._model = None
        self._status = None

        if slot is not None:
          self.slot = slot
        if model is not None:
          self.model = model
        if status is not None:
          self.status = status

    @property
    def slot(self):
        """
        Gets the slot of this BoardInfoDto.
        单板槽位。

        :return: The slot of this BoardInfoDto.
        :rtype: str
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """
        Sets the slot of this BoardInfoDto.
        单板槽位。

        :param slot: The slot of this BoardInfoDto.
        :type: str
        """
        if slot is not None and len(slot) > 10:
            raise ValueError("Invalid value for `slot`, length must be less than or equal to `10`")
        if slot is not None and len(slot) < 0:
            raise ValueError("Invalid value for `slot`, length must be greater than or equal to `0`")

        self._slot = slot

    @property
    def model(self):
        """
        Gets the model of this BoardInfoDto.
        单板对外型号。

        :return: The model of this BoardInfoDto.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this BoardInfoDto.
        单板对外型号。

        :param model: The model of this BoardInfoDto.
        :type: str
        """
        if model is not None and len(model) > 20:
            raise ValueError("Invalid value for `model`, length must be less than or equal to `20`")
        if model is not None and len(model) < 0:
            raise ValueError("Invalid value for `model`, length must be greater than or equal to `0`")

        self._model = model

    @property
    def status(self):
        """
        Gets the status of this BoardInfoDto.
        单板状态，0---未知、1---不在位、2---在位、3---正常、4---故障、5---已删除、6---冲突。

        :return: The status of this BoardInfoDto.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BoardInfoDto.
        单板状态，0---未知、1---不在位、2---在位、3---正常、4---故障、5---已删除、6---冲突。

        :param status: The status of this BoardInfoDto.
        :type: str
        """
        if status is not None and len(status) > 10:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `10`")
        if status is not None and len(status) < 0:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `0`")

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BoardInfoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
