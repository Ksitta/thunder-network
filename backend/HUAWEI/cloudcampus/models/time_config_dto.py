# coding: utf-8

"""
    时间配置

    时间配置北向接口，主要特性： · 查询时区资源 · 查询时间配置信息（包括时区、夏令时和NTP） · 修改时间配置（包括时区、夏令时和NTP） . 查询站点模板时间配置信息（包括时区、夏令时和NTP） . 修改站点模板时间配置信息（包括时区、夏令时和NTP） 

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TimeConfigDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timezone_id': 'str',
        'enable_daylight': 'bool',
        'ntp_list': 'list[str]'
    }

    attribute_map = {
        'timezone_id': 'timezoneId',
        'enable_daylight': 'enableDaylight',
        'ntp_list': 'ntpList'
    }

    def __init__(self, timezone_id=None, enable_daylight=None, ntp_list=None):
        """
        TimeConfigDto - a model defined in Swagger
        """

        self._timezone_id = None
        self._enable_daylight = None
        self._ntp_list = None

        if timezone_id is not None:
          self.timezone_id = timezone_id
        if enable_daylight is not None:
          self.enable_daylight = enable_daylight
        if ntp_list is not None:
          self.ntp_list = ntp_list

    @property
    def timezone_id(self):
        """
        Gets the timezone_id of this TimeConfigDto.
        时区ID，字符串格式为UUID。

        :return: The timezone_id of this TimeConfigDto.
        :rtype: str
        """
        return self._timezone_id

    @timezone_id.setter
    def timezone_id(self, timezone_id):
        """
        Sets the timezone_id of this TimeConfigDto.
        时区ID，字符串格式为UUID。

        :param timezone_id: The timezone_id of this TimeConfigDto.
        :type: str
        """

        self._timezone_id = timezone_id

    @property
    def enable_daylight(self):
        """
        Gets the enable_daylight of this TimeConfigDto.
        夏令时使能开关，取值：true（使能）；false（未使能）。夏令时使能功能仅支持AR设备。

        :return: The enable_daylight of this TimeConfigDto.
        :rtype: bool
        """
        return self._enable_daylight

    @enable_daylight.setter
    def enable_daylight(self, enable_daylight):
        """
        Sets the enable_daylight of this TimeConfigDto.
        夏令时使能开关，取值：true（使能）；false（未使能）。夏令时使能功能仅支持AR设备。

        :param enable_daylight: The enable_daylight of this TimeConfigDto.
        :type: bool
        """

        self._enable_daylight = enable_daylight

    @property
    def ntp_list(self):
        """
        Gets the ntp_list of this TimeConfigDto.
        NTP服务器地址集合，元素为IP地址字符串。

        :return: The ntp_list of this TimeConfigDto.
        :rtype: list[str]
        """
        return self._ntp_list

    @ntp_list.setter
    def ntp_list(self, ntp_list):
        """
        Sets the ntp_list of this TimeConfigDto.
        NTP服务器地址集合，元素为IP地址字符串。

        :param ntp_list: The ntp_list of this TimeConfigDto.
        :type: list[str]
        """

        self._ntp_list = ntp_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimeConfigDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
