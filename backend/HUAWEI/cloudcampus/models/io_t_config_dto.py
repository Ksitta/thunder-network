# coding: utf-8

"""
    AP IOT配置

    AP IOT配置北向接口，主要特性： · 查询AP IOT配置信息 · 配置AP IOT信息 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IoTConfigDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'panel_name': 'str',
        'iot_card_config': 'IotCardConfigDto',
        'card_names': 'list[str]',
        'device_group_id': 'str',
        'operation': 'str'
    }

    attribute_map = {
        'panel_name': 'panelName',
        'iot_card_config': 'iotCardConfig',
        'card_names': 'cardNames',
        'device_group_id': 'deviceGroupId',
        'operation': 'operation'
    }

    def __init__(self, panel_name=None, iot_card_config=None, card_names=None, device_group_id=None, operation=None):
        """
        IoTConfigDto - a model defined in Swagger
        """

        self._panel_name = None
        self._iot_card_config = None
        self._card_names = None
        self._device_group_id = None
        self._operation = None

        if panel_name is not None:
          self.panel_name = panel_name
        if iot_card_config is not None:
          self.iot_card_config = iot_card_config
        if card_names is not None:
          self.card_names = card_names
        if device_group_id is not None:
          self.device_group_id = device_group_id
        if operation is not None:
          self.operation = operation

    @property
    def panel_name(self):
        """
        Gets the panel_name of this IoTConfigDto.
        面板名称，和型号保持一致。

        :return: The panel_name of this IoTConfigDto.
        :rtype: str
        """
        return self._panel_name

    @panel_name.setter
    def panel_name(self, panel_name):
        """
        Sets the panel_name of this IoTConfigDto.
        面板名称，和型号保持一致。

        :param panel_name: The panel_name of this IoTConfigDto.
        :type: str
        """

        self._panel_name = panel_name

    @property
    def iot_card_config(self):
        """
        Gets the iot_card_config of this IoTConfigDto.

        :return: The iot_card_config of this IoTConfigDto.
        :rtype: IotCardConfigDto
        """
        return self._iot_card_config

    @iot_card_config.setter
    def iot_card_config(self, iot_card_config):
        """
        Sets the iot_card_config of this IoTConfigDto.

        :param iot_card_config: The iot_card_config of this IoTConfigDto.
        :type: IotCardConfigDto
        """

        self._iot_card_config = iot_card_config

    @property
    def card_names(self):
        """
        Gets the card_names of this IoTConfigDto.
        卡槽名称。

        :return: The card_names of this IoTConfigDto.
        :rtype: list[str]
        """
        return self._card_names

    @card_names.setter
    def card_names(self, card_names):
        """
        Sets the card_names of this IoTConfigDto.
        卡槽名称。

        :param card_names: The card_names of this IoTConfigDto.
        :type: list[str]
        """

        self._card_names = card_names

    @property
    def device_group_id(self):
        """
        Gets the device_group_id of this IoTConfigDto.
        站点ID。

        :return: The device_group_id of this IoTConfigDto.
        :rtype: str
        """
        return self._device_group_id

    @device_group_id.setter
    def device_group_id(self, device_group_id):
        """
        Sets the device_group_id of this IoTConfigDto.
        站点ID。

        :param device_group_id: The device_group_id of this IoTConfigDto.
        :type: str
        """

        self._device_group_id = device_group_id

    @property
    def operation(self):
        """
        Gets the operation of this IoTConfigDto.
        操作符，当前仅支持更新。

        :return: The operation of this IoTConfigDto.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """
        Sets the operation of this IoTConfigDto.
        操作符，当前仅支持更新。

        :param operation: The operation of this IoTConfigDto.
        :type: str
        """

        self._operation = operation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IoTConfigDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
