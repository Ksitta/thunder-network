# coding: utf-8

"""
    框式交换机板卡信息操作

    框式上云相关操作接口： 场景：对框式交换机信息查询操作的第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SystemPowerInfoDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chassis_id': 'int',
        'total_power_supplied': 'int',
        'maximum_power_needed': 'int',
        'remain_reserved_power': 'int',
        'remain_power': 'int'
    }

    attribute_map = {
        'chassis_id': 'chassisId',
        'total_power_supplied': 'totalPowerSupplied',
        'maximum_power_needed': 'maximumPowerNeeded',
        'remain_reserved_power': 'remainReservedPower',
        'remain_power': 'remainPower'
    }

    def __init__(self, chassis_id=None, total_power_supplied=None, maximum_power_needed=None, remain_reserved_power=None, remain_power=None):
        """
        SystemPowerInfoDto - a model defined in Swagger
        """

        self._chassis_id = None
        self._total_power_supplied = None
        self._maximum_power_needed = None
        self._remain_reserved_power = None
        self._remain_power = None

        if chassis_id is not None:
          self.chassis_id = chassis_id
        if total_power_supplied is not None:
          self.total_power_supplied = total_power_supplied
        if maximum_power_needed is not None:
          self.maximum_power_needed = maximum_power_needed
        if remain_reserved_power is not None:
          self.remain_reserved_power = remain_reserved_power
        if remain_power is not None:
          self.remain_power = remain_power

    @property
    def chassis_id(self):
        """
        Gets the chassis_id of this SystemPowerInfoDto.
        堆叠序号，若ID对应的设备为堆叠设备，输入对应的堆叠序号，若非堆叠设备，默认为1。

        :return: The chassis_id of this SystemPowerInfoDto.
        :rtype: int
        """
        return self._chassis_id

    @chassis_id.setter
    def chassis_id(self, chassis_id):
        """
        Sets the chassis_id of this SystemPowerInfoDto.
        堆叠序号，若ID对应的设备为堆叠设备，输入对应的堆叠序号，若非堆叠设备，默认为1。

        :param chassis_id: The chassis_id of this SystemPowerInfoDto.
        :type: int
        """

        self._chassis_id = chassis_id

    @property
    def total_power_supplied(self):
        """
        Gets the total_power_supplied of this SystemPowerInfoDto.
        设备当前可提供的最大功率，单位是W。

        :return: The total_power_supplied of this SystemPowerInfoDto.
        :rtype: int
        """
        return self._total_power_supplied

    @total_power_supplied.setter
    def total_power_supplied(self, total_power_supplied):
        """
        Sets the total_power_supplied of this SystemPowerInfoDto.
        设备当前可提供的最大功率，单位是W。

        :param total_power_supplied: The total_power_supplied of this SystemPowerInfoDto.
        :type: int
        """

        self._total_power_supplied = total_power_supplied

    @property
    def maximum_power_needed(self):
        """
        Gets the maximum_power_needed of this SystemPowerInfoDto.
        设备需要的最大功率，单位是W。

        :return: The maximum_power_needed of this SystemPowerInfoDto.
        :rtype: int
        """
        return self._maximum_power_needed

    @maximum_power_needed.setter
    def maximum_power_needed(self, maximum_power_needed):
        """
        Sets the maximum_power_needed of this SystemPowerInfoDto.
        设备需要的最大功率，单位是W。

        :param maximum_power_needed: The maximum_power_needed of this SystemPowerInfoDto.
        :type: int
        """

        self._maximum_power_needed = maximum_power_needed

    @property
    def remain_reserved_power(self):
        """
        Gets the remain_reserved_power of this SystemPowerInfoDto.
        设备剩余的预留功率，单位是W。

        :return: The remain_reserved_power of this SystemPowerInfoDto.
        :rtype: int
        """
        return self._remain_reserved_power

    @remain_reserved_power.setter
    def remain_reserved_power(self, remain_reserved_power):
        """
        Sets the remain_reserved_power of this SystemPowerInfoDto.
        设备剩余的预留功率，单位是W。

        :param remain_reserved_power: The remain_reserved_power of this SystemPowerInfoDto.
        :type: int
        """

        self._remain_reserved_power = remain_reserved_power

    @property
    def remain_power(self):
        """
        Gets the remain_power of this SystemPowerInfoDto.
        设备剩余功率，单位是W。

        :return: The remain_power of this SystemPowerInfoDto.
        :rtype: int
        """
        return self._remain_power

    @remain_power.setter
    def remain_power(self, remain_power):
        """
        Sets the remain_power of this SystemPowerInfoDto.
        设备剩余功率，单位是W。

        :param remain_power: The remain_power of this SystemPowerInfoDto.
        :type: int
        """

        self._remain_power = remain_power

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SystemPowerInfoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
