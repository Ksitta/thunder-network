# coding: utf-8

"""
    实体资源北向接口

    实体资源条件查询。 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FrameResData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ne_dn': 'str',
        'ne_name': 'str',
        'frame_dn': 'str',
        'shelf_index': 'int',
        'frame_index': 'int',
        'frame_no': 'int',
        'vendor_type': 'str',
        'mfg_name': 'str',
        'serial_num': 'str',
        'physical_class': 'int',
        'descr': 'str',
        'frame_name': 'str',
        'admin_status': 'int',
        'oper_status': 'int',
        'stand_bystatus': 'int',
        'soft_version': 'str'
    }

    attribute_map = {
        'ne_dn': 'neDN',
        'ne_name': 'neName',
        'frame_dn': 'frameDN',
        'shelf_index': 'shelfIndex',
        'frame_index': 'frameIndex',
        'frame_no': 'frameNo',
        'vendor_type': 'vendorType',
        'mfg_name': 'mfgName',
        'serial_num': 'serialNum',
        'physical_class': 'physicalClass',
        'descr': 'descr',
        'frame_name': 'frameName',
        'admin_status': 'adminStatus',
        'oper_status': 'operStatus',
        'stand_bystatus': 'standBystatus',
        'soft_version': 'softVersion'
    }

    def __init__(self, ne_dn=None, ne_name=None, frame_dn=None, shelf_index=None, frame_index=None, frame_no=None, vendor_type=None, mfg_name=None, serial_num=None, physical_class=None, descr=None, frame_name=None, admin_status=None, oper_status=None, stand_bystatus=None, soft_version=None):
        """
        FrameResData - a model defined in Swagger
        """

        self._ne_dn = None
        self._ne_name = None
        self._frame_dn = None
        self._shelf_index = None
        self._frame_index = None
        self._frame_no = None
        self._vendor_type = None
        self._mfg_name = None
        self._serial_num = None
        self._physical_class = None
        self._descr = None
        self._frame_name = None
        self._admin_status = None
        self._oper_status = None
        self._stand_bystatus = None
        self._soft_version = None

        if ne_dn is not None:
          self.ne_dn = ne_dn
        if ne_name is not None:
          self.ne_name = ne_name
        if frame_dn is not None:
          self.frame_dn = frame_dn
        if shelf_index is not None:
          self.shelf_index = shelf_index
        if frame_index is not None:
          self.frame_index = frame_index
        if frame_no is not None:
          self.frame_no = frame_no
        if vendor_type is not None:
          self.vendor_type = vendor_type
        if mfg_name is not None:
          self.mfg_name = mfg_name
        if serial_num is not None:
          self.serial_num = serial_num
        if physical_class is not None:
          self.physical_class = physical_class
        if descr is not None:
          self.descr = descr
        if frame_name is not None:
          self.frame_name = frame_name
        if admin_status is not None:
          self.admin_status = admin_status
        if oper_status is not None:
          self.oper_status = oper_status
        if stand_bystatus is not None:
          self.stand_bystatus = stand_bystatus
        if soft_version is not None:
          self.soft_version = soft_version

    @property
    def ne_dn(self):
        """
        Gets the ne_dn of this FrameResData.
        设备dn。

        :return: The ne_dn of this FrameResData.
        :rtype: str
        """
        return self._ne_dn

    @ne_dn.setter
    def ne_dn(self, ne_dn):
        """
        Sets the ne_dn of this FrameResData.
        设备dn。

        :param ne_dn: The ne_dn of this FrameResData.
        :type: str
        """

        self._ne_dn = ne_dn

    @property
    def ne_name(self):
        """
        Gets the ne_name of this FrameResData.
        网元名称。

        :return: The ne_name of this FrameResData.
        :rtype: str
        """
        return self._ne_name

    @ne_name.setter
    def ne_name(self, ne_name):
        """
        Sets the ne_name of this FrameResData.
        网元名称。

        :param ne_name: The ne_name of this FrameResData.
        :type: str
        """

        self._ne_name = ne_name

    @property
    def frame_dn(self):
        """
        Gets the frame_dn of this FrameResData.
        机框dn。

        :return: The frame_dn of this FrameResData.
        :rtype: str
        """
        return self._frame_dn

    @frame_dn.setter
    def frame_dn(self, frame_dn):
        """
        Sets the frame_dn of this FrameResData.
        机框dn。

        :param frame_dn: The frame_dn of this FrameResData.
        :type: str
        """

        self._frame_dn = frame_dn

    @property
    def shelf_index(self):
        """
        Gets the shelf_index of this FrameResData.
        机架索引设备上有的，所有资源的根索引。

        :return: The shelf_index of this FrameResData.
        :rtype: int
        """
        return self._shelf_index

    @shelf_index.setter
    def shelf_index(self, shelf_index):
        """
        Sets the shelf_index of this FrameResData.
        机架索引设备上有的，所有资源的根索引。

        :param shelf_index: The shelf_index of this FrameResData.
        :type: int
        """

        self._shelf_index = shelf_index

    @property
    def frame_index(self):
        """
        Gets the frame_index of this FrameResData.
        机框索引。

        :return: The frame_index of this FrameResData.
        :rtype: int
        """
        return self._frame_index

    @frame_index.setter
    def frame_index(self, frame_index):
        """
        Sets the frame_index of this FrameResData.
        机框索引。

        :param frame_index: The frame_index of this FrameResData.
        :type: int
        """

        self._frame_index = frame_index

    @property
    def frame_no(self):
        """
        Gets the frame_no of this FrameResData.
        机框序号。

        :return: The frame_no of this FrameResData.
        :rtype: int
        """
        return self._frame_no

    @frame_no.setter
    def frame_no(self, frame_no):
        """
        Sets the frame_no of this FrameResData.
        机框序号。

        :param frame_no: The frame_no of this FrameResData.
        :type: int
        """

        self._frame_no = frame_no

    @property
    def vendor_type(self):
        """
        Gets the vendor_type of this FrameResData.
        厂商类型。

        :return: The vendor_type of this FrameResData.
        :rtype: str
        """
        return self._vendor_type

    @vendor_type.setter
    def vendor_type(self, vendor_type):
        """
        Sets the vendor_type of this FrameResData.
        厂商类型。

        :param vendor_type: The vendor_type of this FrameResData.
        :type: str
        """

        self._vendor_type = vendor_type

    @property
    def mfg_name(self):
        """
        Gets the mfg_name of this FrameResData.
        物理固件的制造厂商。

        :return: The mfg_name of this FrameResData.
        :rtype: str
        """
        return self._mfg_name

    @mfg_name.setter
    def mfg_name(self, mfg_name):
        """
        Sets the mfg_name of this FrameResData.
        物理固件的制造厂商。

        :param mfg_name: The mfg_name of this FrameResData.
        :type: str
        """

        self._mfg_name = mfg_name

    @property
    def serial_num(self):
        """
        Gets the serial_num of this FrameResData.
        序列号。

        :return: The serial_num of this FrameResData.
        :rtype: str
        """
        return self._serial_num

    @serial_num.setter
    def serial_num(self, serial_num):
        """
        Sets the serial_num of this FrameResData.
        序列号。

        :param serial_num: The serial_num of this FrameResData.
        :type: str
        """

        self._serial_num = serial_num

    @property
    def physical_class(self):
        """
        Gets the physical_class of this FrameResData.
        设备上实体大类型： 3：框 4：背板 5：子槽 6：电源 7：风扇 9：板 10：端口 

        :return: The physical_class of this FrameResData.
        :rtype: int
        """
        return self._physical_class

    @physical_class.setter
    def physical_class(self, physical_class):
        """
        Sets the physical_class of this FrameResData.
        设备上实体大类型： 3：框 4：背板 5：子槽 6：电源 7：风扇 9：板 10：端口 

        :param physical_class: The physical_class of this FrameResData.
        :type: int
        """

        self._physical_class = physical_class

    @property
    def descr(self):
        """
        Gets the descr of this FrameResData.
        机框描述。

        :return: The descr of this FrameResData.
        :rtype: str
        """
        return self._descr

    @descr.setter
    def descr(self, descr):
        """
        Sets the descr of this FrameResData.
        机框描述。

        :param descr: The descr of this FrameResData.
        :type: str
        """

        self._descr = descr

    @property
    def frame_name(self):
        """
        Gets the frame_name of this FrameResData.
        机框名称。

        :return: The frame_name of this FrameResData.
        :rtype: str
        """
        return self._frame_name

    @frame_name.setter
    def frame_name(self, frame_name):
        """
        Sets the frame_name of this FrameResData.
        机框名称。

        :param frame_name: The frame_name of this FrameResData.
        :type: str
        """

        self._frame_name = frame_name

    @property
    def admin_status(self):
        """
        Gets the admin_status of this FrameResData.
        管理状态，可以是如下值之一： 4、11：正常 2、3、12：错误 13：LoopBack 其他：未知 

        :return: The admin_status of this FrameResData.
        :rtype: int
        """
        return self._admin_status

    @admin_status.setter
    def admin_status(self, admin_status):
        """
        Sets the admin_status of this FrameResData.
        管理状态，可以是如下值之一： 4、11：正常 2、3、12：错误 13：LoopBack 其他：未知 

        :param admin_status: The admin_status of this FrameResData.
        :type: int
        """

        self._admin_status = admin_status

    @property
    def oper_status(self):
        """
        Gets the oper_status of this FrameResData.
        操作状态，可以是如下值之一： 3、11、13、15、16：正常 2、12、17：错误 4：离线 其他：未知 

        :return: The oper_status of this FrameResData.
        :rtype: int
        """
        return self._oper_status

    @oper_status.setter
    def oper_status(self, oper_status):
        """
        Sets the oper_status of this FrameResData.
        操作状态，可以是如下值之一： 3、11、13、15、16：正常 2、12、17：错误 4：离线 其他：未知 

        :param oper_status: The oper_status of this FrameResData.
        :type: int
        """

        self._oper_status = oper_status

    @property
    def stand_bystatus(self):
        """
        Gets the stand_bystatus of this FrameResData.
        主备状态： 1：notSupported 2：hotStandby 3：coldStandby 4：providingService 

        :return: The stand_bystatus of this FrameResData.
        :rtype: int
        """
        return self._stand_bystatus

    @stand_bystatus.setter
    def stand_bystatus(self, stand_bystatus):
        """
        Sets the stand_bystatus of this FrameResData.
        主备状态： 1：notSupported 2：hotStandby 3：coldStandby 4：providingService 

        :param stand_bystatus: The stand_bystatus of this FrameResData.
        :type: int
        """

        self._stand_bystatus = stand_bystatus

    @property
    def soft_version(self):
        """
        Gets the soft_version of this FrameResData.
        软件版本。

        :return: The soft_version of this FrameResData.
        :rtype: str
        """
        return self._soft_version

    @soft_version.setter
    def soft_version(self, soft_version):
        """
        Sets the soft_version of this FrameResData.
        软件版本。

        :param soft_version: The soft_version of this FrameResData.
        :type: str
        """

        self._soft_version = soft_version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FrameResData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
