# coding: utf-8

"""
    堆叠管理

    堆叠管理第三方接口。 场景：创建堆叠操作的第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateStackDtoData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stack_name': 'str',
        'stack_member': 'list[StackMemberInput]',
        'stack_roles': 'str'
    }

    attribute_map = {
        'stack_name': 'stackName',
        'stack_member': 'stackMember',
        'stack_roles': 'stackRoles'
    }

    def __init__(self, stack_name=None, stack_member=None, stack_roles='ACC'):
        """
        CreateStackDtoData - a model defined in Swagger
        """

        self._stack_name = None
        self._stack_member = None
        self._stack_roles = None

        if stack_name is not None:
          self.stack_name = stack_name
        if stack_member is not None:
          self.stack_member = stack_member
        if stack_roles is not None:
          self.stack_roles = stack_roles

    @property
    def stack_name(self):
        """
        Gets the stack_name of this CreateStackDtoData.
        堆叠名称。如果堆叠名称已存在，则将设备加入堆叠；否则，创建堆叠并加入设备。堆叠名称不能包含\"?\"或者制表符TAB。

        :return: The stack_name of this CreateStackDtoData.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """
        Sets the stack_name of this CreateStackDtoData.
        堆叠名称。如果堆叠名称已存在，则将设备加入堆叠；否则，创建堆叠并加入设备。堆叠名称不能包含\"?\"或者制表符TAB。

        :param stack_name: The stack_name of this CreateStackDtoData.
        :type: str
        """
        if stack_name is not None and len(stack_name) > 64:
            raise ValueError("Invalid value for `stack_name`, length must be less than or equal to `64`")
        if stack_name is not None and len(stack_name) < 1:
            raise ValueError("Invalid value for `stack_name`, length must be greater than or equal to `1`")

        self._stack_name = stack_name

    @property
    def stack_member(self):
        """
        Gets the stack_member of this CreateStackDtoData.
        堆叠成员。

        :return: The stack_member of this CreateStackDtoData.
        :rtype: list[StackMemberInput]
        """
        return self._stack_member

    @stack_member.setter
    def stack_member(self, stack_member):
        """
        Sets the stack_member of this CreateStackDtoData.
        堆叠成员。

        :param stack_member: The stack_member of this CreateStackDtoData.
        :type: list[StackMemberInput]
        """

        self._stack_member = stack_member

    @property
    def stack_roles(self):
        """
        Gets the stack_roles of this CreateStackDtoData.
        堆叠角色信息。非必填，默认为ACC。

        :return: The stack_roles of this CreateStackDtoData.
        :rtype: str
        """
        return self._stack_roles

    @stack_roles.setter
    def stack_roles(self, stack_roles):
        """
        Sets the stack_roles of this CreateStackDtoData.
        堆叠角色信息。非必填，默认为ACC。

        :param stack_roles: The stack_roles of this CreateStackDtoData.
        :type: str
        """

        self._stack_roles = stack_roles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateStackDtoData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
