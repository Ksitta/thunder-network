# coding: utf-8

"""
    框式交换机板卡信息操作

    框式上云相关操作接口： 场景：对框式交换机信息查询操作的第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BoardInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frame_no': 'int',
        'board_esn': 'str',
        'board_name': 'str',
        'device_id': 'str',
        'slot_no': 'int',
        'board_status': 'int',
        'board_role': 'int'
    }

    attribute_map = {
        'frame_no': 'frameNo',
        'board_esn': 'boardEsn',
        'board_name': 'boardName',
        'device_id': 'deviceId',
        'slot_no': 'slotNo',
        'board_status': 'boardStatus',
        'board_role': 'boardRole'
    }

    def __init__(self, frame_no=None, board_esn=None, board_name=None, device_id=None, slot_no=None, board_status=None, board_role=None):
        """
        BoardInfo - a model defined in Swagger
        """

        self._frame_no = None
        self._board_esn = None
        self._board_name = None
        self._device_id = None
        self._slot_no = None
        self._board_status = None
        self._board_role = None

        if frame_no is not None:
          self.frame_no = frame_no
        if board_esn is not None:
          self.board_esn = board_esn
        if board_name is not None:
          self.board_name = board_name
        if device_id is not None:
          self.device_id = device_id
        if slot_no is not None:
          self.slot_no = slot_no
        if board_status is not None:
          self.board_status = board_status
        if board_role is not None:
          self.board_role = board_role

    @property
    def frame_no(self):
        """
        Gets the frame_no of this BoardInfo.
        机框号。

        :return: The frame_no of this BoardInfo.
        :rtype: int
        """
        return self._frame_no

    @frame_no.setter
    def frame_no(self, frame_no):
        """
        Sets the frame_no of this BoardInfo.
        机框号。

        :param frame_no: The frame_no of this BoardInfo.
        :type: int
        """

        self._frame_no = frame_no

    @property
    def board_esn(self):
        """
        Gets the board_esn of this BoardInfo.
        单板ESN。

        :return: The board_esn of this BoardInfo.
        :rtype: str
        """
        return self._board_esn

    @board_esn.setter
    def board_esn(self, board_esn):
        """
        Sets the board_esn of this BoardInfo.
        单板ESN。

        :param board_esn: The board_esn of this BoardInfo.
        :type: str
        """
        if board_esn is not None and len(board_esn) > 64:
            raise ValueError("Invalid value for `board_esn`, length must be less than or equal to `64`")
        if board_esn is not None and len(board_esn) < 0:
            raise ValueError("Invalid value for `board_esn`, length must be greater than or equal to `0`")

        self._board_esn = board_esn

    @property
    def board_name(self):
        """
        Gets the board_name of this BoardInfo.
        单板名称。

        :return: The board_name of this BoardInfo.
        :rtype: str
        """
        return self._board_name

    @board_name.setter
    def board_name(self, board_name):
        """
        Sets the board_name of this BoardInfo.
        单板名称。

        :param board_name: The board_name of this BoardInfo.
        :type: str
        """
        if board_name is not None and len(board_name) > 256:
            raise ValueError("Invalid value for `board_name`, length must be less than or equal to `256`")
        if board_name is not None and len(board_name) < 0:
            raise ValueError("Invalid value for `board_name`, length must be greater than or equal to `0`")

        self._board_name = board_name

    @property
    def device_id(self):
        """
        Gets the device_id of this BoardInfo.
        设备ID，UUID格式。

        :return: The device_id of this BoardInfo.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this BoardInfo.
        设备ID，UUID格式。

        :param device_id: The device_id of this BoardInfo.
        :type: str
        """
        if device_id is not None and len(device_id) > 256:
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `256`")
        if device_id is not None and len(device_id) < 32:
            raise ValueError("Invalid value for `device_id`, length must be greater than or equal to `32`")

        self._device_id = device_id

    @property
    def slot_no(self):
        """
        Gets the slot_no of this BoardInfo.
        单板槽位号。

        :return: The slot_no of this BoardInfo.
        :rtype: int
        """
        return self._slot_no

    @slot_no.setter
    def slot_no(self, slot_no):
        """
        Sets the slot_no of this BoardInfo.
        单板槽位号。

        :param slot_no: The slot_no of this BoardInfo.
        :type: int
        """
        if slot_no is not None and slot_no > 64:
            raise ValueError("Invalid value for `slot_no`, must be a value less than or equal to `64`")
        if slot_no is not None and slot_no < 0:
            raise ValueError("Invalid value for `slot_no`, must be a value greater than or equal to `0`")

        self._slot_no = slot_no

    @property
    def board_status(self):
        """
        Gets the board_status of this BoardInfo.
        单板状态，取值范围：0（在线）、1（离线）。

        :return: The board_status of this BoardInfo.
        :rtype: int
        """
        return self._board_status

    @board_status.setter
    def board_status(self, board_status):
        """
        Sets the board_status of this BoardInfo.
        单板状态，取值范围：0（在线）、1（离线）。

        :param board_status: The board_status of this BoardInfo.
        :type: int
        """

        self._board_status = board_status

    @property
    def board_role(self):
        """
        Gets the board_role of this BoardInfo.
        单板角色，取值范围：2（堆叠备主控板）、3（备控板）、4（堆叠主主控板）。

        :return: The board_role of this BoardInfo.
        :rtype: int
        """
        return self._board_role

    @board_role.setter
    def board_role(self, board_role):
        """
        Sets the board_role of this BoardInfo.
        单板角色，取值范围：2（堆叠备主控板）、3（备控板）、4（堆叠主主控板）。

        :param board_role: The board_role of this BoardInfo.
        :type: int
        """

        self._board_role = board_role

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BoardInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
