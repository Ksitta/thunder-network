# coding: utf-8

"""
    设备上报日志记录查询

    查询设备上报日志。

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceLogInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'detail': 'str',
        'device_name': 'str',
        'esn': 'str',
        'device_mac': 'str',
        'scene_name': 'str',
        'time': 'str',
        'station_mac': 'str'
    }

    attribute_map = {
        'detail': 'detail',
        'device_name': 'deviceName',
        'esn': 'esn',
        'device_mac': 'deviceMac',
        'scene_name': 'sceneName',
        'time': 'time',
        'station_mac': 'stationMac'
    }

    def __init__(self, detail=None, device_name=None, esn=None, device_mac=None, scene_name=None, time=None, station_mac=None):
        """
        DeviceLogInfo - a model defined in Swagger
        """

        self._detail = None
        self._device_name = None
        self._esn = None
        self._device_mac = None
        self._scene_name = None
        self._time = None
        self._station_mac = None

        if detail is not None:
          self.detail = detail
        if device_name is not None:
          self.device_name = device_name
        if esn is not None:
          self.esn = esn
        if device_mac is not None:
          self.device_mac = device_mac
        if scene_name is not None:
          self.scene_name = scene_name
        if time is not None:
          self.time = time
        if station_mac is not None:
          self.station_mac = station_mac

    @property
    def detail(self):
        """
        Gets the detail of this DeviceLogInfo.
        日志详情。

        :return: The detail of this DeviceLogInfo.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """
        Sets the detail of this DeviceLogInfo.
        日志详情。

        :param detail: The detail of this DeviceLogInfo.
        :type: str
        """
        if detail is not None and len(detail) > 1024:
            raise ValueError("Invalid value for `detail`, length must be less than or equal to `1024`")
        if detail is not None and len(detail) < 0:
            raise ValueError("Invalid value for `detail`, length must be greater than or equal to `0`")

        self._detail = detail

    @property
    def device_name(self):
        """
        Gets the device_name of this DeviceLogInfo.
        设备名称。

        :return: The device_name of this DeviceLogInfo.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """
        Sets the device_name of this DeviceLogInfo.
        设备名称。

        :param device_name: The device_name of this DeviceLogInfo.
        :type: str
        """
        if device_name is not None and len(device_name) > 256:
            raise ValueError("Invalid value for `device_name`, length must be less than or equal to `256`")
        if device_name is not None and len(device_name) < 0:
            raise ValueError("Invalid value for `device_name`, length must be greater than or equal to `0`")

        self._device_name = device_name

    @property
    def esn(self):
        """
        Gets the esn of this DeviceLogInfo.
        ESN。

        :return: The esn of this DeviceLogInfo.
        :rtype: str
        """
        return self._esn

    @esn.setter
    def esn(self, esn):
        """
        Sets the esn of this DeviceLogInfo.
        ESN。

        :param esn: The esn of this DeviceLogInfo.
        :type: str
        """
        if esn is not None and len(esn) > 256:
            raise ValueError("Invalid value for `esn`, length must be less than or equal to `256`")
        if esn is not None and len(esn) < 0:
            raise ValueError("Invalid value for `esn`, length must be greater than or equal to `0`")

        self._esn = esn

    @property
    def device_mac(self):
        """
        Gets the device_mac of this DeviceLogInfo.
        设备MAC。

        :return: The device_mac of this DeviceLogInfo.
        :rtype: str
        """
        return self._device_mac

    @device_mac.setter
    def device_mac(self, device_mac):
        """
        Sets the device_mac of this DeviceLogInfo.
        设备MAC。

        :param device_mac: The device_mac of this DeviceLogInfo.
        :type: str
        """
        if device_mac is not None and len(device_mac) > 17:
            raise ValueError("Invalid value for `device_mac`, length must be less than or equal to `17`")
        if device_mac is not None and len(device_mac) < 0:
            raise ValueError("Invalid value for `device_mac`, length must be greater than or equal to `0`")

        self._device_mac = device_mac

    @property
    def scene_name(self):
        """
        Gets the scene_name of this DeviceLogInfo.
        场景名称。

        :return: The scene_name of this DeviceLogInfo.
        :rtype: str
        """
        return self._scene_name

    @scene_name.setter
    def scene_name(self, scene_name):
        """
        Sets the scene_name of this DeviceLogInfo.
        场景名称。

        :param scene_name: The scene_name of this DeviceLogInfo.
        :type: str
        """
        if scene_name is not None and len(scene_name) > 256:
            raise ValueError("Invalid value for `scene_name`, length must be less than or equal to `256`")
        if scene_name is not None and len(scene_name) < 0:
            raise ValueError("Invalid value for `scene_name`, length must be greater than or equal to `0`")

        self._scene_name = scene_name

    @property
    def time(self):
        """
        Gets the time of this DeviceLogInfo.
        日志上报时间。

        :return: The time of this DeviceLogInfo.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this DeviceLogInfo.
        日志上报时间。

        :param time: The time of this DeviceLogInfo.
        :type: str
        """
        if time is not None and len(time) > 256:
            raise ValueError("Invalid value for `time`, length must be less than or equal to `256`")
        if time is not None and len(time) < 0:
            raise ValueError("Invalid value for `time`, length must be greater than or equal to `0`")

        self._time = time

    @property
    def station_mac(self):
        """
        Gets the station_mac of this DeviceLogInfo.
        终端MAC。

        :return: The station_mac of this DeviceLogInfo.
        :rtype: str
        """
        return self._station_mac

    @station_mac.setter
    def station_mac(self, station_mac):
        """
        Sets the station_mac of this DeviceLogInfo.
        终端MAC。

        :param station_mac: The station_mac of this DeviceLogInfo.
        :type: str
        """
        if station_mac is not None and len(station_mac) > 17:
            raise ValueError("Invalid value for `station_mac`, length must be less than or equal to `17`")
        if station_mac is not None and len(station_mac) < 0:
            raise ValueError("Invalid value for `station_mac`, length must be greater than or equal to `0`")

        self._station_mac = station_mac

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceLogInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
