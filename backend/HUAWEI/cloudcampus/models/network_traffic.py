# coding: utf-8

"""
    设备基础性能数据信息查询

    · 查询设备网络速率历史数据 · 查询站点维度TopN设备或者全部设备的上行流量、下行流量 · 查询站点维度设备连接终端数历史数据 · 查询单设备连接终端数历史数据 · 查询租户维度下设备状态历史数据 · 查询基于站点的站点健康度和设备健康度 · 查询站点下TOP N SSID流量和最近在线用户数 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NetworkTraffic(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'int',
        'uplink_rate': 'float',
        'downlink_rate': 'float',
        'unit': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'uplink_rate': 'uplinkRate',
        'downlink_rate': 'downlinkRate',
        'unit': 'unit'
    }

    def __init__(self, timestamp=None, uplink_rate=None, downlink_rate=None, unit=None):
        """
        NetworkTraffic - a model defined in Swagger
        """

        self._timestamp = None
        self._uplink_rate = None
        self._downlink_rate = None
        self._unit = None

        if timestamp is not None:
          self.timestamp = timestamp
        if uplink_rate is not None:
          self.uplink_rate = uplink_rate
        if downlink_rate is not None:
          self.downlink_rate = downlink_rate
        if unit is not None:
          self.unit = unit

    @property
    def timestamp(self):
        """
        Gets the timestamp of this NetworkTraffic.
        格林威治时间。

        :return: The timestamp of this NetworkTraffic.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this NetworkTraffic.
        格林威治时间。

        :param timestamp: The timestamp of this NetworkTraffic.
        :type: int
        """
        if timestamp is not None and timestamp > 2147483647:
            raise ValueError("Invalid value for `timestamp`, must be a value less than or equal to `2147483647`")
        if timestamp is not None and timestamp < 0:
            raise ValueError("Invalid value for `timestamp`, must be a value greater than or equal to `0`")

        self._timestamp = timestamp

    @property
    def uplink_rate(self):
        """
        Gets the uplink_rate of this NetworkTraffic.
        上行速率。

        :return: The uplink_rate of this NetworkTraffic.
        :rtype: float
        """
        return self._uplink_rate

    @uplink_rate.setter
    def uplink_rate(self, uplink_rate):
        """
        Sets the uplink_rate of this NetworkTraffic.
        上行速率。

        :param uplink_rate: The uplink_rate of this NetworkTraffic.
        :type: float
        """
        if uplink_rate is not None and uplink_rate > 340282350000000000000000000000000000000:
            raise ValueError("Invalid value for `uplink_rate`, must be a value less than or equal to `340282350000000000000000000000000000000`")
        if uplink_rate is not None and uplink_rate < 0:
            raise ValueError("Invalid value for `uplink_rate`, must be a value greater than or equal to `0`")

        self._uplink_rate = uplink_rate

    @property
    def downlink_rate(self):
        """
        Gets the downlink_rate of this NetworkTraffic.
        下行速率。

        :return: The downlink_rate of this NetworkTraffic.
        :rtype: float
        """
        return self._downlink_rate

    @downlink_rate.setter
    def downlink_rate(self, downlink_rate):
        """
        Sets the downlink_rate of this NetworkTraffic.
        下行速率。

        :param downlink_rate: The downlink_rate of this NetworkTraffic.
        :type: float
        """
        if downlink_rate is not None and downlink_rate > 340282350000000000000000000000000000000:
            raise ValueError("Invalid value for `downlink_rate`, must be a value less than or equal to `340282350000000000000000000000000000000`")
        if downlink_rate is not None and downlink_rate < 0:
            raise ValueError("Invalid value for `downlink_rate`, must be a value greater than or equal to `0`")

        self._downlink_rate = downlink_rate

    @property
    def unit(self):
        """
        Gets the unit of this NetworkTraffic.
        速率单位。

        :return: The unit of this NetworkTraffic.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """
        Sets the unit of this NetworkTraffic.
        速率单位。

        :param unit: The unit of this NetworkTraffic.
        :type: str
        """
        if unit is not None and len(unit) > 256:
            raise ValueError("Invalid value for `unit`, length must be less than or equal to `256`")
        if unit is not None and len(unit) < 0:
            raise ValueError("Invalid value for `unit`, length must be greater than or equal to `0`")

        self._unit = unit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NetworkTraffic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
