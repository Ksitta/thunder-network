# coding: utf-8

"""
    站点模板SNMP配置

    站点模板SNMP配置第三方接口说明。 

    OpenAPI spec version: 1.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FailedOperation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'errcode': 'str',
        'errmsg': 'str',
        'errdesc': 'str',
        'errreason': 'str',
        'errdetail': 'str',
        'erradvice': 'str'
    }

    attribute_map = {
        'errcode': 'errcode',
        'errmsg': 'errmsg',
        'errdesc': 'errdesc',
        'errreason': 'errreason',
        'errdetail': 'errdetail',
        'erradvice': 'erradvice'
    }

    def __init__(self, errcode=None, errmsg=None, errdesc=None, errreason=None, errdetail=None, erradvice=None):
        """
        FailedOperation - a model defined in Swagger
        """

        self._errcode = None
        self._errmsg = None
        self._errdesc = None
        self._errreason = None
        self._errdetail = None
        self._erradvice = None

        if errcode is not None:
          self.errcode = errcode
        if errmsg is not None:
          self.errmsg = errmsg
        if errdesc is not None:
          self.errdesc = errdesc
        if errreason is not None:
          self.errreason = errreason
        if errdetail is not None:
          self.errdetail = errdetail
        if erradvice is not None:
          self.erradvice = erradvice

    @property
    def errcode(self):
        """
        Gets the errcode of this FailedOperation.
        错误码。

        :return: The errcode of this FailedOperation.
        :rtype: str
        """
        return self._errcode

    @errcode.setter
    def errcode(self, errcode):
        """
        Sets the errcode of this FailedOperation.
        错误码。

        :param errcode: The errcode of this FailedOperation.
        :type: str
        """

        self._errcode = errcode

    @property
    def errmsg(self):
        """
        Gets the errmsg of this FailedOperation.
        错误信息。

        :return: The errmsg of this FailedOperation.
        :rtype: str
        """
        return self._errmsg

    @errmsg.setter
    def errmsg(self, errmsg):
        """
        Sets the errmsg of this FailedOperation.
        错误信息。

        :param errmsg: The errmsg of this FailedOperation.
        :type: str
        """

        self._errmsg = errmsg

    @property
    def errdesc(self):
        """
        Gets the errdesc of this FailedOperation.
        错误描述。

        :return: The errdesc of this FailedOperation.
        :rtype: str
        """
        return self._errdesc

    @errdesc.setter
    def errdesc(self, errdesc):
        """
        Sets the errdesc of this FailedOperation.
        错误描述。

        :param errdesc: The errdesc of this FailedOperation.
        :type: str
        """

        self._errdesc = errdesc

    @property
    def errreason(self):
        """
        Gets the errreason of this FailedOperation.
        错误理由。

        :return: The errreason of this FailedOperation.
        :rtype: str
        """
        return self._errreason

    @errreason.setter
    def errreason(self, errreason):
        """
        Sets the errreason of this FailedOperation.
        错误理由。

        :param errreason: The errreason of this FailedOperation.
        :type: str
        """

        self._errreason = errreason

    @property
    def errdetail(self):
        """
        Gets the errdetail of this FailedOperation.
        错误详细信息。

        :return: The errdetail of this FailedOperation.
        :rtype: str
        """
        return self._errdetail

    @errdetail.setter
    def errdetail(self, errdetail):
        """
        Sets the errdetail of this FailedOperation.
        错误详细信息。

        :param errdetail: The errdetail of this FailedOperation.
        :type: str
        """

        self._errdetail = errdetail

    @property
    def erradvice(self):
        """
        Gets the erradvice of this FailedOperation.
        更正建议。

        :return: The erradvice of this FailedOperation.
        :rtype: str
        """
        return self._erradvice

    @erradvice.setter
    def erradvice(self, erradvice):
        """
        Sets the erradvice of this FailedOperation.
        更正建议。

        :param erradvice: The erradvice of this FailedOperation.
        :type: str
        """

        self._erradvice = erradvice

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FailedOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
