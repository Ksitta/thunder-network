# coding: utf-8

"""
    实体资源北向接口

    实体资源条件查询。 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OTPointResData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'adminstatus': 'str',
        'operstatus': 'str',
        'ipaddress': 'str',
        'ipnetmask': 'str',
        'portindex': 'str'
    }

    attribute_map = {
        'name': 'name',
        'adminstatus': 'adminstatus',
        'operstatus': 'operstatus',
        'ipaddress': 'ipaddress',
        'ipnetmask': 'ipnetmask',
        'portindex': 'portindex'
    }

    def __init__(self, name=None, adminstatus=None, operstatus=None, ipaddress=None, ipnetmask=None, portindex=None):
        """
        OTPointResData - a model defined in Swagger
        """

        self._name = None
        self._adminstatus = None
        self._operstatus = None
        self._ipaddress = None
        self._ipnetmask = None
        self._portindex = None

        if name is not None:
          self.name = name
        if adminstatus is not None:
          self.adminstatus = adminstatus
        if operstatus is not None:
          self.operstatus = operstatus
        if ipaddress is not None:
          self.ipaddress = ipaddress
        if ipnetmask is not None:
          self.ipnetmask = ipnetmask
        if portindex is not None:
          self.portindex = portindex

    @property
    def name(self):
        """
        Gets the name of this OTPointResData.
        光口名称。

        :return: The name of this OTPointResData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this OTPointResData.
        光口名称。

        :param name: The name of this OTPointResData.
        :type: str
        """

        self._name = name

    @property
    def adminstatus(self):
        """
        Gets the adminstatus of this OTPointResData.
        管理状态。

        :return: The adminstatus of this OTPointResData.
        :rtype: str
        """
        return self._adminstatus

    @adminstatus.setter
    def adminstatus(self, adminstatus):
        """
        Sets the adminstatus of this OTPointResData.
        管理状态。

        :param adminstatus: The adminstatus of this OTPointResData.
        :type: str
        """

        self._adminstatus = adminstatus

    @property
    def operstatus(self):
        """
        Gets the operstatus of this OTPointResData.
        操作状态。

        :return: The operstatus of this OTPointResData.
        :rtype: str
        """
        return self._operstatus

    @operstatus.setter
    def operstatus(self, operstatus):
        """
        Sets the operstatus of this OTPointResData.
        操作状态。

        :param operstatus: The operstatus of this OTPointResData.
        :type: str
        """

        self._operstatus = operstatus

    @property
    def ipaddress(self):
        """
        Gets the ipaddress of this OTPointResData.
        光口IP地址。

        :return: The ipaddress of this OTPointResData.
        :rtype: str
        """
        return self._ipaddress

    @ipaddress.setter
    def ipaddress(self, ipaddress):
        """
        Sets the ipaddress of this OTPointResData.
        光口IP地址。

        :param ipaddress: The ipaddress of this OTPointResData.
        :type: str
        """

        self._ipaddress = ipaddress

    @property
    def ipnetmask(self):
        """
        Gets the ipnetmask of this OTPointResData.
        光口子网掩码。

        :return: The ipnetmask of this OTPointResData.
        :rtype: str
        """
        return self._ipnetmask

    @ipnetmask.setter
    def ipnetmask(self, ipnetmask):
        """
        Sets the ipnetmask of this OTPointResData.
        光口子网掩码。

        :param ipnetmask: The ipnetmask of this OTPointResData.
        :type: str
        """

        self._ipnetmask = ipnetmask

    @property
    def portindex(self):
        """
        Gets the portindex of this OTPointResData.
        光口索引。

        :return: The portindex of this OTPointResData.
        :rtype: str
        """
        return self._portindex

    @portindex.setter
    def portindex(self, portindex):
        """
        Sets the portindex of this OTPointResData.
        光口索引。

        :param portindex: The portindex of this OTPointResData.
        :type: str
        """

        self._portindex = portindex

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OTPointResData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
