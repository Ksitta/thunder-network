# coding: utf-8

"""
    TACACS配置

    TACACS配置北向接口，主要特性： · 配置TACACS · 查询TACACS 

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TacacsServerInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tacacs_enable': 'bool',
        'tacacs_server_tmpl_id': 'str',
        'escape': 'list[int]'
    }

    attribute_map = {
        'tacacs_enable': 'tacacsEnable',
        'tacacs_server_tmpl_id': 'tacacsServerTmplId',
        'escape': 'escape'
    }

    def __init__(self, tacacs_enable=None, tacacs_server_tmpl_id=None, escape=None):
        """
        TacacsServerInfo - a model defined in Swagger
        """

        self._tacacs_enable = None
        self._tacacs_server_tmpl_id = None
        self._escape = None

        if tacacs_enable is not None:
          self.tacacs_enable = tacacs_enable
        if tacacs_server_tmpl_id is not None:
          self.tacacs_server_tmpl_id = tacacs_server_tmpl_id
        if escape is not None:
          self.escape = escape

    @property
    def tacacs_enable(self):
        """
        Gets the tacacs_enable of this TacacsServerInfo.
        是否应用TACACS服务器模板。

        :return: The tacacs_enable of this TacacsServerInfo.
        :rtype: bool
        """
        return self._tacacs_enable

    @tacacs_enable.setter
    def tacacs_enable(self, tacacs_enable):
        """
        Sets the tacacs_enable of this TacacsServerInfo.
        是否应用TACACS服务器模板。

        :param tacacs_enable: The tacacs_enable of this TacacsServerInfo.
        :type: bool
        """

        self._tacacs_enable = tacacs_enable

    @property
    def tacacs_server_tmpl_id(self):
        """
        Gets the tacacs_server_tmpl_id of this TacacsServerInfo.
        TACACS服务器模板ID。字符串为UUID格式。

        :return: The tacacs_server_tmpl_id of this TacacsServerInfo.
        :rtype: str
        """
        return self._tacacs_server_tmpl_id

    @tacacs_server_tmpl_id.setter
    def tacacs_server_tmpl_id(self, tacacs_server_tmpl_id):
        """
        Sets the tacacs_server_tmpl_id of this TacacsServerInfo.
        TACACS服务器模板ID。字符串为UUID格式。

        :param tacacs_server_tmpl_id: The tacacs_server_tmpl_id of this TacacsServerInfo.
        :type: str
        """
        if tacacs_server_tmpl_id is not None and len(tacacs_server_tmpl_id) > 36:
            raise ValueError("Invalid value for `tacacs_server_tmpl_id`, length must be less than or equal to `36`")
        if tacacs_server_tmpl_id is not None and len(tacacs_server_tmpl_id) < 36:
            raise ValueError("Invalid value for `tacacs_server_tmpl_id`, length must be greater than or equal to `36`")

        self._tacacs_server_tmpl_id = tacacs_server_tmpl_id

    @property
    def escape(self):
        """
        Gets the escape of this TacacsServerInfo.
        逃生策略（0---TACACS认证通道断链后，转入本地模式，1---TACACS授权通道断链后，转入本地模式（TACACS服务器需要配置授权），2---计费（TACACS服务器需要配置计费））。

        :return: The escape of this TacacsServerInfo.
        :rtype: list[int]
        """
        return self._escape

    @escape.setter
    def escape(self, escape):
        """
        Sets the escape of this TacacsServerInfo.
        逃生策略（0---TACACS认证通道断链后，转入本地模式，1---TACACS授权通道断链后，转入本地模式（TACACS服务器需要配置授权），2---计费（TACACS服务器需要配置计费））。

        :param escape: The escape of this TacacsServerInfo.
        :type: list[int]
        """

        self._escape = escape

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TacacsServerInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
