# coding: utf-8

"""
    设备基础性能数据信息查询

    · 查询设备网络速率历史数据 · 查询站点维度TopN设备或者全部设备的上行流量、下行流量 · 查询站点维度设备连接终端数历史数据 · 查询单设备连接终端数历史数据 · 查询租户维度下设备状态历史数据 · 查询基于站点的站点健康度和设备健康度 · 查询站点下TOP N SSID流量和最近在线用户数 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SiteHealthOutput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_id': 'str',
        'device_health': 'int',
        'radio_health': 'int',
        'site_health': 'int'
    }

    attribute_map = {
        'site_id': 'siteId',
        'device_health': 'deviceHealth',
        'radio_health': 'radioHealth',
        'site_health': 'siteHealth'
    }

    def __init__(self, site_id=None, device_health=None, radio_health=None, site_health=None):
        """
        SiteHealthOutput - a model defined in Swagger
        """

        self._site_id = None
        self._device_health = None
        self._radio_health = None
        self._site_health = None

        if site_id is not None:
          self.site_id = site_id
        if device_health is not None:
          self.device_health = device_health
        if radio_health is not None:
          self.radio_health = radio_health
        if site_health is not None:
          self.site_health = site_health

    @property
    def site_id(self):
        """
        Gets the site_id of this SiteHealthOutput.
        站点ID。

        :return: The site_id of this SiteHealthOutput.
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """
        Sets the site_id of this SiteHealthOutput.
        站点ID。

        :param site_id: The site_id of this SiteHealthOutput.
        :type: str
        """
        if site_id is not None and len(site_id) > 256:
            raise ValueError("Invalid value for `site_id`, length must be less than or equal to `256`")
        if site_id is not None and len(site_id) < 0:
            raise ValueError("Invalid value for `site_id`, length must be greater than or equal to `0`")

        self._site_id = site_id

    @property
    def device_health(self):
        """
        Gets the device_health of this SiteHealthOutput.
        设备健康度。

        :return: The device_health of this SiteHealthOutput.
        :rtype: int
        """
        return self._device_health

    @device_health.setter
    def device_health(self, device_health):
        """
        Sets the device_health of this SiteHealthOutput.
        设备健康度。

        :param device_health: The device_health of this SiteHealthOutput.
        :type: int
        """
        if device_health is not None and device_health > 100:
            raise ValueError("Invalid value for `device_health`, must be a value less than or equal to `100`")
        if device_health is not None and device_health < 0:
            raise ValueError("Invalid value for `device_health`, must be a value greater than or equal to `0`")

        self._device_health = device_health

    @property
    def radio_health(self):
        """
        Gets the radio_health of this SiteHealthOutput.
        射频健康度。

        :return: The radio_health of this SiteHealthOutput.
        :rtype: int
        """
        return self._radio_health

    @radio_health.setter
    def radio_health(self, radio_health):
        """
        Sets the radio_health of this SiteHealthOutput.
        射频健康度。

        :param radio_health: The radio_health of this SiteHealthOutput.
        :type: int
        """
        if radio_health is not None and radio_health > 100:
            raise ValueError("Invalid value for `radio_health`, must be a value less than or equal to `100`")
        if radio_health is not None and radio_health < 0:
            raise ValueError("Invalid value for `radio_health`, must be a value greater than or equal to `0`")

        self._radio_health = radio_health

    @property
    def site_health(self):
        """
        Gets the site_health of this SiteHealthOutput.
        站点健康度。

        :return: The site_health of this SiteHealthOutput.
        :rtype: int
        """
        return self._site_health

    @site_health.setter
    def site_health(self, site_health):
        """
        Sets the site_health of this SiteHealthOutput.
        站点健康度。

        :param site_health: The site_health of this SiteHealthOutput.
        :type: int
        """
        if site_health is not None and site_health > 100:
            raise ValueError("Invalid value for `site_health`, must be a value less than or equal to `100`")
        if site_health is not None and site_health < 0:
            raise ValueError("Invalid value for `site_health`, must be a value greater than or equal to `0`")

        self._site_health = site_health

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SiteHealthOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
