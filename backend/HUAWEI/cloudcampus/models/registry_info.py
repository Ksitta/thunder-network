# coding: utf-8

"""
    链路管理

    链路管理北向接口 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RegistryInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_id': 'str',
        'open_id': 'str',
        'url': 'str',
        'data_type': 'str',
        'desc': 'str'
    }

    attribute_map = {
        'system_id': 'systemID',
        'open_id': 'openID',
        'url': 'url',
        'data_type': 'dataType',
        'desc': 'desc'
    }

    def __init__(self, system_id=None, open_id=None, url=None, data_type=None, desc='null'):
        """
        RegistryInfo - a model defined in Swagger
        """

        self._system_id = None
        self._open_id = None
        self._url = None
        self._data_type = None
        self._desc = None

        if system_id is not None:
          self.system_id = system_id
        if open_id is not None:
          self.open_id = open_id
        if url is not None:
          self.url = url
        if data_type is not None:
          self.data_type = data_type
        if desc is not None:
          self.desc = desc

    @property
    def system_id(self):
        """
        Gets the system_id of this RegistryInfo.
        第三方系统标识。(可为IP地址，1~64个字符，字符集合为英文半角：0-9a-zA-Z@_-(),.^$~`!)

        :return: The system_id of this RegistryInfo.
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """
        Sets the system_id of this RegistryInfo.
        第三方系统标识。(可为IP地址，1~64个字符，字符集合为英文半角：0-9a-zA-Z@_-(),.^$~`!)

        :param system_id: The system_id of this RegistryInfo.
        :type: str
        """
        if system_id is not None and len(system_id) > 64:
            raise ValueError("Invalid value for `system_id`, length must be less than or equal to `64`")
        if system_id is not None and len(system_id) < 1:
            raise ValueError("Invalid value for `system_id`, length must be greater than or equal to `1`")

        self._system_id = system_id

    @property
    def open_id(self):
        """
        Gets the open_id of this RegistryInfo.
        网管主动连接第三方系统的认证凭证，由第三方系统分配和利用此字符串认证。(1~1024个字符，字符集同systemID。)

        :return: The open_id of this RegistryInfo.
        :rtype: str
        """
        return self._open_id

    @open_id.setter
    def open_id(self, open_id):
        """
        Sets the open_id of this RegistryInfo.
        网管主动连接第三方系统的认证凭证，由第三方系统分配和利用此字符串认证。(1~1024个字符，字符集同systemID。)

        :param open_id: The open_id of this RegistryInfo.
        :type: str
        """
        if open_id is not None and len(open_id) > 1024:
            raise ValueError("Invalid value for `open_id`, length must be less than or equal to `1024`")
        if open_id is not None and len(open_id) < 1:
            raise ValueError("Invalid value for `open_id`, length must be greater than or equal to `1`")

        self._open_id = open_id

    @property
    def url(self):
        """
        Gets the url of this RegistryInfo.
        网管以POST方式向该URL发送通知消息。(需要通知消息订阅者确保URL的正确性，IP地址为OpenAPI白名单列表中地址。长度1~1024，字符串符合HTTP的URL编码规范。)

        :return: The url of this RegistryInfo.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this RegistryInfo.
        网管以POST方式向该URL发送通知消息。(需要通知消息订阅者确保URL的正确性，IP地址为OpenAPI白名单列表中地址。长度1~1024，字符串符合HTTP的URL编码规范。)

        :param url: The url of this RegistryInfo.
        :type: str
        """
        if url is not None and len(url) > 1024:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `1024`")
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url

    @property
    def data_type(self):
        """
        Gets the data_type of this RegistryInfo.
        通知报文的data字段类型。(目前仅支持\"JSON\"，缺省为\"JSON\"。)

        :return: The data_type of this RegistryInfo.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """
        Sets the data_type of this RegistryInfo.
        通知报文的data字段类型。(目前仅支持\"JSON\"，缺省为\"JSON\"。)

        :param data_type: The data_type of this RegistryInfo.
        :type: str
        """

        self._data_type = data_type

    @property
    def desc(self):
        """
        Gets the desc of this RegistryInfo.
        第三方系统描述。(缺省为null不设置。如设置长度限制0~1024字符，字符集合不限制。)

        :return: The desc of this RegistryInfo.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """
        Sets the desc of this RegistryInfo.
        第三方系统描述。(缺省为null不设置。如设置长度限制0~1024字符，字符集合不限制。)

        :param desc: The desc of this RegistryInfo.
        :type: str
        """
        if desc is not None and len(desc) > 1024:
            raise ValueError("Invalid value for `desc`, length must be less than or equal to `1024`")
        if desc is not None and len(desc) < 0:
            raise ValueError("Invalid value for `desc`, length must be greater than or equal to `0`")

        self._desc = desc

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RegistryInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
