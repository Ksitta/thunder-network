# coding: utf-8

"""
    设备定时重启

    · 创建或修改定时重启、延时重启设备任务 · 查询重启设备任务的状态 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReriodRebootDeviceParam(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'int',
        'reboot_in': 'str',
        'reboot_at': 'int'
    }

    attribute_map = {
        'mode': 'mode',
        'reboot_in': 'rebootIn',
        'reboot_at': 'rebootAt'
    }

    def __init__(self, mode=None, reboot_in=None, reboot_at=None):
        """
        ReriodRebootDeviceParam - a model defined in Swagger
        """

        self._mode = None
        self._reboot_in = None
        self._reboot_at = None

        if mode is not None:
          self.mode = mode
        if reboot_in is not None:
          self.reboot_in = reboot_in
        if reboot_at is not None:
          self.reboot_at = reboot_at

    @property
    def mode(self):
        """
        Gets the mode of this ReriodRebootDeviceParam.
        设备重启类型。 0---CANCEL，取消重启任务。 1---NOW，立即重启。 2---IN，延时重启。 3---AT，定时重启。

        :return: The mode of this ReriodRebootDeviceParam.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this ReriodRebootDeviceParam.
        设备重启类型。 0---CANCEL，取消重启任务。 1---NOW，立即重启。 2---IN，延时重启。 3---AT，定时重启。

        :param mode: The mode of this ReriodRebootDeviceParam.
        :type: int
        """

        self._mode = mode

    @property
    def reboot_in(self):
        """
        Gets the reboot_in of this ReriodRebootDeviceParam.
        DD:HH:MM，延时重启时间，mode为IN时必填。必须大于0天，小于等于30天。

        :return: The reboot_in of this ReriodRebootDeviceParam.
        :rtype: str
        """
        return self._reboot_in

    @reboot_in.setter
    def reboot_in(self, reboot_in):
        """
        Sets the reboot_in of this ReriodRebootDeviceParam.
        DD:HH:MM，延时重启时间，mode为IN时必填。必须大于0天，小于等于30天。

        :param reboot_in: The reboot_in of this ReriodRebootDeviceParam.
        :type: str
        """

        self._reboot_in = reboot_in

    @property
    def reboot_at(self):
        """
        Gets the reboot_at of this ReriodRebootDeviceParam.
        定时重启时间，mode为AT时必填，时间戳格式，单位为秒。必须大于当前时间，且与当前时间间隔小于等于30天。

        :return: The reboot_at of this ReriodRebootDeviceParam.
        :rtype: int
        """
        return self._reboot_at

    @reboot_at.setter
    def reboot_at(self, reboot_at):
        """
        Sets the reboot_at of this ReriodRebootDeviceParam.
        定时重启时间，mode为AT时必填，时间戳格式，单位为秒。必须大于当前时间，且与当前时间间隔小于等于30天。

        :param reboot_at: The reboot_at of this ReriodRebootDeviceParam.
        :type: int
        """

        self._reboot_at = reboot_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReriodRebootDeviceParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
