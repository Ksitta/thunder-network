# coding: utf-8

"""
    CIS服务接口

    CIS操作接口说明： 1、创建CIS隔离 2、创建CIS阻断 3、撤销CIS阻断/隔离 4、阻断隔离应用状态查询 5、CIS策略命中率查询 

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InterdictionDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_id': 'str',
        'tenant': 'str',
        'producer': 'str',
        'direction': 'int',
        'src_ips': 'list[str]',
        'dst_ips': 'list[str]'
    }

    attribute_map = {
        'block_id': 'blockId',
        'tenant': 'tenant',
        'producer': 'producer',
        'direction': 'direction',
        'src_ips': 'srcIps',
        'dst_ips': 'dstIps'
    }

    def __init__(self, block_id=None, tenant=None, producer=None, direction=None, src_ips=None, dst_ips=None):
        """
        InterdictionDTO - a model defined in Swagger
        """

        self._block_id = None
        self._tenant = None
        self._producer = None
        self._direction = None
        self._src_ips = None
        self._dst_ips = None

        if block_id is not None:
          self.block_id = block_id
        if tenant is not None:
          self.tenant = tenant
        if producer is not None:
          self.producer = producer
        if direction is not None:
          self.direction = direction
        if src_ips is not None:
          self.src_ips = src_ips
        if dst_ips is not None:
          self.dst_ips = dst_ips

    @property
    def block_id(self):
        """
        Gets the block_id of this InterdictionDTO.
        事件ID，UUID格式，必填。

        :return: The block_id of this InterdictionDTO.
        :rtype: str
        """
        return self._block_id

    @block_id.setter
    def block_id(self, block_id):
        """
        Sets the block_id of this InterdictionDTO.
        事件ID，UUID格式，必填。

        :param block_id: The block_id of this InterdictionDTO.
        :type: str
        """
        if block_id is not None and len(block_id) > 36:
            raise ValueError("Invalid value for `block_id`, length must be less than or equal to `36`")
        if block_id is not None and len(block_id) < 36:
            raise ValueError("Invalid value for `block_id`, length must be greater than or equal to `36`")

        self._block_id = block_id

    @property
    def tenant(self):
        """
        Gets the tenant of this InterdictionDTO.
        租户ID，UUID格式。

        :return: The tenant of this InterdictionDTO.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """
        Sets the tenant of this InterdictionDTO.
        租户ID，UUID格式。

        :param tenant: The tenant of this InterdictionDTO.
        :type: str
        """
        if tenant is not None and len(tenant) > 36:
            raise ValueError("Invalid value for `tenant`, length must be less than or equal to `36`")
        if tenant is not None and len(tenant) < 36:
            raise ValueError("Invalid value for `tenant`, length must be greater than or equal to `36`")

        self._tenant = tenant

    @property
    def producer(self):
        """
        Gets the producer of this InterdictionDTO.
        调用者。

        :return: The producer of this InterdictionDTO.
        :rtype: str
        """
        return self._producer

    @producer.setter
    def producer(self, producer):
        """
        Sets the producer of this InterdictionDTO.
        调用者。

        :param producer: The producer of this InterdictionDTO.
        :type: str
        """
        if producer is not None and len(producer) > 10:
            raise ValueError("Invalid value for `producer`, length must be less than or equal to `10`")

        self._producer = producer

    @property
    def direction(self):
        """
        Gets the direction of this InterdictionDTO.
        流量方向，0-单向，1-双向，默认为0，必填。

        :return: The direction of this InterdictionDTO.
        :rtype: int
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this InterdictionDTO.
        流量方向，0-单向，1-双向，默认为0，必填。

        :param direction: The direction of this InterdictionDTO.
        :type: int
        """

        self._direction = direction

    @property
    def src_ips(self):
        """
        Gets the src_ips of this InterdictionDTO.
        源IP列表，非必填；非空必须满足合法的IPV4，IPV6格式，最多8个IP；源IP列表和目的IP列表不可同时为空。

        :return: The src_ips of this InterdictionDTO.
        :rtype: list[str]
        """
        return self._src_ips

    @src_ips.setter
    def src_ips(self, src_ips):
        """
        Sets the src_ips of this InterdictionDTO.
        源IP列表，非必填；非空必须满足合法的IPV4，IPV6格式，最多8个IP；源IP列表和目的IP列表不可同时为空。

        :param src_ips: The src_ips of this InterdictionDTO.
        :type: list[str]
        """

        self._src_ips = src_ips

    @property
    def dst_ips(self):
        """
        Gets the dst_ips of this InterdictionDTO.
        目的IP列表，非必填；非空必须满足合法的IPV4，IPV6格式，最多只能填1个目的IP；源IP列表和目的IP列表不可同时为空。

        :return: The dst_ips of this InterdictionDTO.
        :rtype: list[str]
        """
        return self._dst_ips

    @dst_ips.setter
    def dst_ips(self, dst_ips):
        """
        Sets the dst_ips of this InterdictionDTO.
        目的IP列表，非必填；非空必须满足合法的IPV4，IPV6格式，最多只能填1个目的IP；源IP列表和目的IP列表不可同时为空。

        :param dst_ips: The dst_ips of this InterdictionDTO.
        :type: list[str]
        """

        self._dst_ips = dst_ips

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InterdictionDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
