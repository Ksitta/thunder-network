# coding: utf-8

"""
    AP网口IOT插卡管理

    AP网口IOT插卡查询及操作接口。 场景：对AP网口IOT插卡查询及操作的第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IotCmdResultInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'device_name': 'str',
        'device_esn': 'str',
        'card_mac': 'str',
        'iot_sn': 'str',
        'interface': 'str',
        'issue_time': 'str',
        'status': 'str',
        'detail': 'str',
        'fail_reason': 'str'
    }

    attribute_map = {
        'id': 'id',
        'device_name': 'deviceName',
        'device_esn': 'deviceEsn',
        'card_mac': 'cardMac',
        'iot_sn': 'iotSn',
        'interface': 'interface',
        'issue_time': 'issueTime',
        'status': 'status',
        'detail': 'detail',
        'fail_reason': 'failReason'
    }

    def __init__(self, id=None, device_name=None, device_esn=None, card_mac=None, iot_sn=None, interface=None, issue_time=None, status=None, detail=None, fail_reason=None):
        """
        IotCmdResultInfo - a model defined in Swagger
        """

        self._id = None
        self._device_name = None
        self._device_esn = None
        self._card_mac = None
        self._iot_sn = None
        self._interface = None
        self._issue_time = None
        self._status = None
        self._detail = None
        self._fail_reason = None

        if id is not None:
          self.id = id
        if device_name is not None:
          self.device_name = device_name
        if device_esn is not None:
          self.device_esn = device_esn
        if card_mac is not None:
          self.card_mac = card_mac
        if iot_sn is not None:
          self.iot_sn = iot_sn
        if interface is not None:
          self.interface = interface
        if issue_time is not None:
          self.issue_time = issue_time
        if status is not None:
          self.status = status
        if detail is not None:
          self.detail = detail
        if fail_reason is not None:
          self.fail_reason = fail_reason

    @property
    def id(self):
        """
        Gets the id of this IotCmdResultInfo.
        该条记录的唯一标识ID。

        :return: The id of this IotCmdResultInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this IotCmdResultInfo.
        该条记录的唯一标识ID。

        :param id: The id of this IotCmdResultInfo.
        :type: str
        """

        self._id = id

    @property
    def device_name(self):
        """
        Gets the device_name of this IotCmdResultInfo.
        设备名称。

        :return: The device_name of this IotCmdResultInfo.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """
        Sets the device_name of this IotCmdResultInfo.
        设备名称。

        :param device_name: The device_name of this IotCmdResultInfo.
        :type: str
        """

        self._device_name = device_name

    @property
    def device_esn(self):
        """
        Gets the device_esn of this IotCmdResultInfo.
        设备ESN。

        :return: The device_esn of this IotCmdResultInfo.
        :rtype: str
        """
        return self._device_esn

    @device_esn.setter
    def device_esn(self, device_esn):
        """
        Sets the device_esn of this IotCmdResultInfo.
        设备ESN。

        :param device_esn: The device_esn of this IotCmdResultInfo.
        :type: str
        """

        self._device_esn = device_esn

    @property
    def card_mac(self):
        """
        Gets the card_mac of this IotCmdResultInfo.
        插卡MAC。

        :return: The card_mac of this IotCmdResultInfo.
        :rtype: str
        """
        return self._card_mac

    @card_mac.setter
    def card_mac(self, card_mac):
        """
        Sets the card_mac of this IotCmdResultInfo.
        插卡MAC。

        :param card_mac: The card_mac of this IotCmdResultInfo.
        :type: str
        """
        if card_mac is not None and len(card_mac) > 256:
            raise ValueError("Invalid value for `card_mac`, length must be less than or equal to `256`")
        if card_mac is not None and len(card_mac) < 0:
            raise ValueError("Invalid value for `card_mac`, length must be greater than or equal to `0`")

        self._card_mac = card_mac

    @property
    def iot_sn(self):
        """
        Gets the iot_sn of this IotCmdResultInfo.
        IOT插卡SN号。

        :return: The iot_sn of this IotCmdResultInfo.
        :rtype: str
        """
        return self._iot_sn

    @iot_sn.setter
    def iot_sn(self, iot_sn):
        """
        Sets the iot_sn of this IotCmdResultInfo.
        IOT插卡SN号。

        :param iot_sn: The iot_sn of this IotCmdResultInfo.
        :type: str
        """

        self._iot_sn = iot_sn

    @property
    def interface(self):
        """
        Gets the interface of this IotCmdResultInfo.
        AP接口名称。

        :return: The interface of this IotCmdResultInfo.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """
        Sets the interface of this IotCmdResultInfo.
        AP接口名称。

        :param interface: The interface of this IotCmdResultInfo.
        :type: str
        """

        self._interface = interface

    @property
    def issue_time(self):
        """
        Gets the issue_time of this IotCmdResultInfo.
        命令下发时间。

        :return: The issue_time of this IotCmdResultInfo.
        :rtype: str
        """
        return self._issue_time

    @issue_time.setter
    def issue_time(self, issue_time):
        """
        Sets the issue_time of this IotCmdResultInfo.
        命令下发时间。

        :param issue_time: The issue_time of this IotCmdResultInfo.
        :type: str
        """

        self._issue_time = issue_time

    @property
    def status(self):
        """
        Gets the status of this IotCmdResultInfo.
        插卡命令执行的状态。WAITTING等待执行命令，EXECUTING表示正在执行命令，SUCCESS表示执行命令成功，FAILED表示执行命令失败。

        :return: The status of this IotCmdResultInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this IotCmdResultInfo.
        插卡命令执行的状态。WAITTING等待执行命令，EXECUTING表示正在执行命令，SUCCESS表示执行命令成功，FAILED表示执行命令失败。

        :param status: The status of this IotCmdResultInfo.
        :type: str
        """

        self._status = status

    @property
    def detail(self):
        """
        Gets the detail of this IotCmdResultInfo.
        插卡命令执行返回详情。

        :return: The detail of this IotCmdResultInfo.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """
        Sets the detail of this IotCmdResultInfo.
        插卡命令执行返回详情。

        :param detail: The detail of this IotCmdResultInfo.
        :type: str
        """

        self._detail = detail

    @property
    def fail_reason(self):
        """
        Gets the fail_reason of this IotCmdResultInfo.
        插卡命令执行失败的原因。

        :return: The fail_reason of this IotCmdResultInfo.
        :rtype: str
        """
        return self._fail_reason

    @fail_reason.setter
    def fail_reason(self, fail_reason):
        """
        Sets the fail_reason of this IotCmdResultInfo.
        插卡命令执行失败的原因。

        :param fail_reason: The fail_reason of this IotCmdResultInfo.
        :type: str
        """

        self._fail_reason = fail_reason

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IotCmdResultInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
