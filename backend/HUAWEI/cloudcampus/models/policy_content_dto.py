# coding: utf-8

"""
    AP SSID配置管理

    AP SSID第三方接口。

    OpenAPI spec version: 1.4.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PolicyContentDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'security_policy': 'SecurityPolicyConfigDto',
        'ssid_rate_limit': 'RateLimitContentDto',
        'terminal_rate_limit': 'RateLimitContentDto'
    }

    attribute_map = {
        'security_policy': 'securityPolicy',
        'ssid_rate_limit': 'ssidRateLimit',
        'terminal_rate_limit': 'terminalRateLimit'
    }

    def __init__(self, security_policy=None, ssid_rate_limit=None, terminal_rate_limit=None):
        """
        PolicyContentDto - a model defined in Swagger
        """

        self._security_policy = None
        self._ssid_rate_limit = None
        self._terminal_rate_limit = None

        if security_policy is not None:
          self.security_policy = security_policy
        if ssid_rate_limit is not None:
          self.ssid_rate_limit = ssid_rate_limit
        if terminal_rate_limit is not None:
          self.terminal_rate_limit = terminal_rate_limit

    @property
    def security_policy(self):
        """
        Gets the security_policy of this PolicyContentDto.

        :return: The security_policy of this PolicyContentDto.
        :rtype: SecurityPolicyConfigDto
        """
        return self._security_policy

    @security_policy.setter
    def security_policy(self, security_policy):
        """
        Sets the security_policy of this PolicyContentDto.

        :param security_policy: The security_policy of this PolicyContentDto.
        :type: SecurityPolicyConfigDto
        """

        self._security_policy = security_policy

    @property
    def ssid_rate_limit(self):
        """
        Gets the ssid_rate_limit of this PolicyContentDto.

        :return: The ssid_rate_limit of this PolicyContentDto.
        :rtype: RateLimitContentDto
        """
        return self._ssid_rate_limit

    @ssid_rate_limit.setter
    def ssid_rate_limit(self, ssid_rate_limit):
        """
        Sets the ssid_rate_limit of this PolicyContentDto.

        :param ssid_rate_limit: The ssid_rate_limit of this PolicyContentDto.
        :type: RateLimitContentDto
        """

        self._ssid_rate_limit = ssid_rate_limit

    @property
    def terminal_rate_limit(self):
        """
        Gets the terminal_rate_limit of this PolicyContentDto.

        :return: The terminal_rate_limit of this PolicyContentDto.
        :rtype: RateLimitContentDto
        """
        return self._terminal_rate_limit

    @terminal_rate_limit.setter
    def terminal_rate_limit(self, terminal_rate_limit):
        """
        Sets the terminal_rate_limit of this PolicyContentDto.

        :param terminal_rate_limit: The terminal_rate_limit of this PolicyContentDto.
        :type: RateLimitContentDto
        """

        self._terminal_rate_limit = terminal_rate_limit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PolicyContentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
