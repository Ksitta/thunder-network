# coding: utf-8

"""
    控制器支持第三方系统通过API接口获取用户上下线信息

    控制器支持第三方系统通过API接口获取用户上下线信息 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AuthenticationLogDetailOutputDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'row_key': 'str',
        'access_device_group_name': 'str',
        'auth_result': 'str',
        'online_time': 'str',
        'offline_time': 'str',
        'account': 'str',
        'terminal_ip': 'str',
        'user_group': 'str',
        'terminal_mac': 'str',
        'auth_type': 'str',
        'user_type': 'str',
        'auth_server_ip': 'str',
        'access_ssid': 'str',
        'device_mac': 'str',
        'device_ip': 'str',
        'access_policy': 'str'
    }

    attribute_map = {
        'row_key': 'rowKey',
        'access_device_group_name': 'accessDeviceGroupName',
        'auth_result': 'authResult',
        'online_time': 'onlineTime',
        'offline_time': 'offlineTime',
        'account': 'account',
        'terminal_ip': 'terminalIP',
        'user_group': 'userGroup',
        'terminal_mac': 'terminalMac',
        'auth_type': 'authType',
        'user_type': 'userType',
        'auth_server_ip': 'authServerIP',
        'access_ssid': 'accessSSID',
        'device_mac': 'deviceMac',
        'device_ip': 'deviceIP',
        'access_policy': 'accessPolicy'
    }

    def __init__(self, row_key=None, access_device_group_name=None, auth_result=None, online_time=None, offline_time=None, account=None, terminal_ip=None, user_group=None, terminal_mac=None, auth_type=None, user_type=None, auth_server_ip=None, access_ssid=None, device_mac=None, device_ip=None, access_policy=None):
        """
        AuthenticationLogDetailOutputDto - a model defined in Swagger
        """

        self._row_key = None
        self._access_device_group_name = None
        self._auth_result = None
        self._online_time = None
        self._offline_time = None
        self._account = None
        self._terminal_ip = None
        self._user_group = None
        self._terminal_mac = None
        self._auth_type = None
        self._user_type = None
        self._auth_server_ip = None
        self._access_ssid = None
        self._device_mac = None
        self._device_ip = None
        self._access_policy = None

        if row_key is not None:
          self.row_key = row_key
        if access_device_group_name is not None:
          self.access_device_group_name = access_device_group_name
        if auth_result is not None:
          self.auth_result = auth_result
        if online_time is not None:
          self.online_time = online_time
        if offline_time is not None:
          self.offline_time = offline_time
        if account is not None:
          self.account = account
        if terminal_ip is not None:
          self.terminal_ip = terminal_ip
        if user_group is not None:
          self.user_group = user_group
        if terminal_mac is not None:
          self.terminal_mac = terminal_mac
        if auth_type is not None:
          self.auth_type = auth_type
        if user_type is not None:
          self.user_type = user_type
        if auth_server_ip is not None:
          self.auth_server_ip = auth_server_ip
        if access_ssid is not None:
          self.access_ssid = access_ssid
        if device_mac is not None:
          self.device_mac = device_mac
        if device_ip is not None:
          self.device_ip = device_ip
        if access_policy is not None:
          self.access_policy = access_policy

    @property
    def row_key(self):
        """
        Gets the row_key of this AuthenticationLogDetailOutputDto.
        数据主键rowkey。

        :return: The row_key of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._row_key

    @row_key.setter
    def row_key(self, row_key):
        """
        Sets the row_key of this AuthenticationLogDetailOutputDto.
        数据主键rowkey。

        :param row_key: The row_key of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if row_key is not None and len(row_key) > 256:
            raise ValueError("Invalid value for `row_key`, length must be less than or equal to `256`")
        if row_key is not None and len(row_key) < 0:
            raise ValueError("Invalid value for `row_key`, length must be greater than or equal to `0`")

        self._row_key = row_key

    @property
    def access_device_group_name(self):
        """
        Gets the access_device_group_name of this AuthenticationLogDetailOutputDto.
        站点名称。

        :return: The access_device_group_name of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._access_device_group_name

    @access_device_group_name.setter
    def access_device_group_name(self, access_device_group_name):
        """
        Sets the access_device_group_name of this AuthenticationLogDetailOutputDto.
        站点名称。

        :param access_device_group_name: The access_device_group_name of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if access_device_group_name is not None and len(access_device_group_name) > 128:
            raise ValueError("Invalid value for `access_device_group_name`, length must be less than or equal to `128`")
        if access_device_group_name is not None and len(access_device_group_name) < 0:
            raise ValueError("Invalid value for `access_device_group_name`, length must be greater than or equal to `0`")

        self._access_device_group_name = access_device_group_name

    @property
    def auth_result(self):
        """
        Gets the auth_result of this AuthenticationLogDetailOutputDto.
        认证结果（0---成功，1---失败）。

        :return: The auth_result of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._auth_result

    @auth_result.setter
    def auth_result(self, auth_result):
        """
        Sets the auth_result of this AuthenticationLogDetailOutputDto.
        认证结果（0---成功，1---失败）。

        :param auth_result: The auth_result of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if auth_result is not None and len(auth_result) > 10:
            raise ValueError("Invalid value for `auth_result`, length must be less than or equal to `10`")
        if auth_result is not None and len(auth_result) < 0:
            raise ValueError("Invalid value for `auth_result`, length must be greater than or equal to `0`")

        self._auth_result = auth_result

    @property
    def online_time(self):
        """
        Gets the online_time of this AuthenticationLogDetailOutputDto.
        用户上线起始时间（接口调用方格林威治时间戳）。

        :return: The online_time of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._online_time

    @online_time.setter
    def online_time(self, online_time):
        """
        Sets the online_time of this AuthenticationLogDetailOutputDto.
        用户上线起始时间（接口调用方格林威治时间戳）。

        :param online_time: The online_time of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if online_time is not None and len(online_time) > 32:
            raise ValueError("Invalid value for `online_time`, length must be less than or equal to `32`")
        if online_time is not None and len(online_time) < 0:
            raise ValueError("Invalid value for `online_time`, length must be greater than or equal to `0`")

        self._online_time = online_time

    @property
    def offline_time(self):
        """
        Gets the offline_time of this AuthenticationLogDetailOutputDto.
        用户上线的结束时间（接口调用方格林威治时间戳）。

        :return: The offline_time of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._offline_time

    @offline_time.setter
    def offline_time(self, offline_time):
        """
        Sets the offline_time of this AuthenticationLogDetailOutputDto.
        用户上线的结束时间（接口调用方格林威治时间戳）。

        :param offline_time: The offline_time of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if offline_time is not None and len(offline_time) > 32:
            raise ValueError("Invalid value for `offline_time`, length must be less than or equal to `32`")
        if offline_time is not None and len(offline_time) < 0:
            raise ValueError("Invalid value for `offline_time`, length must be greater than or equal to `0`")

        self._offline_time = offline_time

    @property
    def account(self):
        """
        Gets the account of this AuthenticationLogDetailOutputDto.
        用户名。

        :return: The account of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this AuthenticationLogDetailOutputDto.
        用户名。

        :param account: The account of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if account is not None and len(account) > 255:
            raise ValueError("Invalid value for `account`, length must be less than or equal to `255`")
        if account is not None and len(account) < 0:
            raise ValueError("Invalid value for `account`, length must be greater than or equal to `0`")

        self._account = account

    @property
    def terminal_ip(self):
        """
        Gets the terminal_ip of this AuthenticationLogDetailOutputDto.
        终端IP地址。

        :return: The terminal_ip of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._terminal_ip

    @terminal_ip.setter
    def terminal_ip(self, terminal_ip):
        """
        Sets the terminal_ip of this AuthenticationLogDetailOutputDto.
        终端IP地址。

        :param terminal_ip: The terminal_ip of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if terminal_ip is not None and len(terminal_ip) > 32:
            raise ValueError("Invalid value for `terminal_ip`, length must be less than or equal to `32`")
        if terminal_ip is not None and len(terminal_ip) < 0:
            raise ValueError("Invalid value for `terminal_ip`, length must be greater than or equal to `0`")

        self._terminal_ip = terminal_ip

    @property
    def user_group(self):
        """
        Gets the user_group of this AuthenticationLogDetailOutputDto.
        终端用户所属用户组。

        :return: The user_group of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._user_group

    @user_group.setter
    def user_group(self, user_group):
        """
        Sets the user_group of this AuthenticationLogDetailOutputDto.
        终端用户所属用户组。

        :param user_group: The user_group of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if user_group is not None and len(user_group) > 1024:
            raise ValueError("Invalid value for `user_group`, length must be less than or equal to `1024`")
        if user_group is not None and len(user_group) < 0:
            raise ValueError("Invalid value for `user_group`, length must be greater than or equal to `0`")

        self._user_group = user_group

    @property
    def terminal_mac(self):
        """
        Gets the terminal_mac of this AuthenticationLogDetailOutputDto.
        终端MAC地址。

        :return: The terminal_mac of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._terminal_mac

    @terminal_mac.setter
    def terminal_mac(self, terminal_mac):
        """
        Sets the terminal_mac of this AuthenticationLogDetailOutputDto.
        终端MAC地址。

        :param terminal_mac: The terminal_mac of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if terminal_mac is not None and len(terminal_mac) > 32:
            raise ValueError("Invalid value for `terminal_mac`, length must be less than or equal to `32`")
        if terminal_mac is not None and len(terminal_mac) < 0:
            raise ValueError("Invalid value for `terminal_mac`, length must be greater than or equal to `0`")

        self._terminal_mac = terminal_mac

    @property
    def auth_type(self):
        """
        Gets the auth_type of this AuthenticationLogDetailOutputDto.
        认证方式（1---Portal认证。2---MAC免认证。3---第三方认证）。

        :return: The auth_type of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """
        Sets the auth_type of this AuthenticationLogDetailOutputDto.
        认证方式（1---Portal认证。2---MAC免认证。3---第三方认证）。

        :param auth_type: The auth_type of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if auth_type is not None and len(auth_type) > 10:
            raise ValueError("Invalid value for `auth_type`, length must be less than or equal to `10`")
        if auth_type is not None and len(auth_type) < 0:
            raise ValueError("Invalid value for `auth_type`, length must be greater than or equal to `0`")

        self._auth_type = auth_type

    @property
    def user_type(self):
        """
        Gets the user_type of this AuthenticationLogDetailOutputDto.
        用户类型（0---普通用户。1---短信用户。2---自注册用户。4---社交媒体用户。5---微信用户。6---Passcode用户。7---第三方用户。20---普通访客。64---匿名用户）。

        :return: The user_type of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """
        Sets the user_type of this AuthenticationLogDetailOutputDto.
        用户类型（0---普通用户。1---短信用户。2---自注册用户。4---社交媒体用户。5---微信用户。6---Passcode用户。7---第三方用户。20---普通访客。64---匿名用户）。

        :param user_type: The user_type of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if user_type is not None and len(user_type) > 10:
            raise ValueError("Invalid value for `user_type`, length must be less than or equal to `10`")
        if user_type is not None and len(user_type) < 0:
            raise ValueError("Invalid value for `user_type`, length must be greater than or equal to `0`")

        self._user_type = user_type

    @property
    def auth_server_ip(self):
        """
        Gets the auth_server_ip of this AuthenticationLogDetailOutputDto.
        认证服务器IP地址。

        :return: The auth_server_ip of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._auth_server_ip

    @auth_server_ip.setter
    def auth_server_ip(self, auth_server_ip):
        """
        Sets the auth_server_ip of this AuthenticationLogDetailOutputDto.
        认证服务器IP地址。

        :param auth_server_ip: The auth_server_ip of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if auth_server_ip is not None and len(auth_server_ip) > 32:
            raise ValueError("Invalid value for `auth_server_ip`, length must be less than or equal to `32`")
        if auth_server_ip is not None and len(auth_server_ip) < 0:
            raise ValueError("Invalid value for `auth_server_ip`, length must be greater than or equal to `0`")

        self._auth_server_ip = auth_server_ip

    @property
    def access_ssid(self):
        """
        Gets the access_ssid of this AuthenticationLogDetailOutputDto.
        接入SSID。

        :return: The access_ssid of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._access_ssid

    @access_ssid.setter
    def access_ssid(self, access_ssid):
        """
        Sets the access_ssid of this AuthenticationLogDetailOutputDto.
        接入SSID。

        :param access_ssid: The access_ssid of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if access_ssid is not None and len(access_ssid) > 64:
            raise ValueError("Invalid value for `access_ssid`, length must be less than or equal to `64`")
        if access_ssid is not None and len(access_ssid) < 0:
            raise ValueError("Invalid value for `access_ssid`, length must be greater than or equal to `0`")

        self._access_ssid = access_ssid

    @property
    def device_mac(self):
        """
        Gets the device_mac of this AuthenticationLogDetailOutputDto.
        接入设备MAC地址。

        :return: The device_mac of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._device_mac

    @device_mac.setter
    def device_mac(self, device_mac):
        """
        Sets the device_mac of this AuthenticationLogDetailOutputDto.
        接入设备MAC地址。

        :param device_mac: The device_mac of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if device_mac is not None and len(device_mac) > 32:
            raise ValueError("Invalid value for `device_mac`, length must be less than or equal to `32`")
        if device_mac is not None and len(device_mac) < 0:
            raise ValueError("Invalid value for `device_mac`, length must be greater than or equal to `0`")

        self._device_mac = device_mac

    @property
    def device_ip(self):
        """
        Gets the device_ip of this AuthenticationLogDetailOutputDto.
        接入设备IP。

        :return: The device_ip of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._device_ip

    @device_ip.setter
    def device_ip(self, device_ip):
        """
        Sets the device_ip of this AuthenticationLogDetailOutputDto.
        接入设备IP。

        :param device_ip: The device_ip of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if device_ip is not None and len(device_ip) > 32:
            raise ValueError("Invalid value for `device_ip`, length must be less than or equal to `32`")
        if device_ip is not None and len(device_ip) < 0:
            raise ValueError("Invalid value for `device_ip`, length must be greater than or equal to `0`")

        self._device_ip = device_ip

    @property
    def access_policy(self):
        """
        Gets the access_policy of this AuthenticationLogDetailOutputDto.
        接入授权策略。

        :return: The access_policy of this AuthenticationLogDetailOutputDto.
        :rtype: str
        """
        return self._access_policy

    @access_policy.setter
    def access_policy(self, access_policy):
        """
        Sets the access_policy of this AuthenticationLogDetailOutputDto.
        接入授权策略。

        :param access_policy: The access_policy of this AuthenticationLogDetailOutputDto.
        :type: str
        """
        if access_policy is not None and len(access_policy) > 64:
            raise ValueError("Invalid value for `access_policy`, length must be less than or equal to `64`")
        if access_policy is not None and len(access_policy) < 0:
            raise ValueError("Invalid value for `access_policy`, length must be greater than or equal to `0`")

        self._access_policy = access_policy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AuthenticationLogDetailOutputDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
