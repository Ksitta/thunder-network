# coding: utf-8

"""
    实体资源北向接口

    实体资源条件查询。 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SlotResData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nedn': 'str',
        'ne_name': 'str',
        'framedn': 'str',
        'framename': 'str',
        'frameno': 'int',
        'slotdn': 'str',
        'slotindex': 'int',
        'slotno': 'int',
        'vendortype': 'str',
        'descr': 'str',
        'slotname': 'str',
        'physicalclass': 'int',
        'adminstatus': 'int',
        'operstatus': 'int',
        'standbystatus': 'int',
        'hardversion': 'str',
        'firmversion': 'str',
        'softversion': 'str',
        'serialnum': 'str',
        'mfgname': 'str',
        'modelname': 'str',
        'alarmlight': 'str'
    }

    attribute_map = {
        'nedn': 'nedn',
        'ne_name': 'neName',
        'framedn': 'framedn',
        'framename': 'framename',
        'frameno': 'frameno',
        'slotdn': 'slotdn',
        'slotindex': 'slotindex',
        'slotno': 'slotno',
        'vendortype': 'vendortype',
        'descr': 'descr',
        'slotname': 'slotname',
        'physicalclass': 'physicalclass',
        'adminstatus': 'adminstatus',
        'operstatus': 'operstatus',
        'standbystatus': 'standbystatus',
        'hardversion': 'hardversion',
        'firmversion': 'firmversion',
        'softversion': 'softversion',
        'serialnum': 'serialnum',
        'mfgname': 'mfgname',
        'modelname': 'modelname',
        'alarmlight': 'alarmlight'
    }

    def __init__(self, nedn=None, ne_name=None, framedn=None, framename=None, frameno=None, slotdn=None, slotindex=None, slotno=None, vendortype=None, descr=None, slotname=None, physicalclass=None, adminstatus=None, operstatus=None, standbystatus=None, hardversion=None, firmversion=None, softversion=None, serialnum=None, mfgname=None, modelname=None, alarmlight=None):
        """
        SlotResData - a model defined in Swagger
        """

        self._nedn = None
        self._ne_name = None
        self._framedn = None
        self._framename = None
        self._frameno = None
        self._slotdn = None
        self._slotindex = None
        self._slotno = None
        self._vendortype = None
        self._descr = None
        self._slotname = None
        self._physicalclass = None
        self._adminstatus = None
        self._operstatus = None
        self._standbystatus = None
        self._hardversion = None
        self._firmversion = None
        self._softversion = None
        self._serialnum = None
        self._mfgname = None
        self._modelname = None
        self._alarmlight = None

        if nedn is not None:
          self.nedn = nedn
        if ne_name is not None:
          self.ne_name = ne_name
        if framedn is not None:
          self.framedn = framedn
        if framename is not None:
          self.framename = framename
        if frameno is not None:
          self.frameno = frameno
        if slotdn is not None:
          self.slotdn = slotdn
        if slotindex is not None:
          self.slotindex = slotindex
        if slotno is not None:
          self.slotno = slotno
        if vendortype is not None:
          self.vendortype = vendortype
        if descr is not None:
          self.descr = descr
        if slotname is not None:
          self.slotname = slotname
        if physicalclass is not None:
          self.physicalclass = physicalclass
        if adminstatus is not None:
          self.adminstatus = adminstatus
        if operstatus is not None:
          self.operstatus = operstatus
        if standbystatus is not None:
          self.standbystatus = standbystatus
        if hardversion is not None:
          self.hardversion = hardversion
        if firmversion is not None:
          self.firmversion = firmversion
        if softversion is not None:
          self.softversion = softversion
        if serialnum is not None:
          self.serialnum = serialnum
        if mfgname is not None:
          self.mfgname = mfgname
        if modelname is not None:
          self.modelname = modelname
        if alarmlight is not None:
          self.alarmlight = alarmlight

    @property
    def nedn(self):
        """
        Gets the nedn of this SlotResData.
        设备dn。

        :return: The nedn of this SlotResData.
        :rtype: str
        """
        return self._nedn

    @nedn.setter
    def nedn(self, nedn):
        """
        Sets the nedn of this SlotResData.
        设备dn。

        :param nedn: The nedn of this SlotResData.
        :type: str
        """

        self._nedn = nedn

    @property
    def ne_name(self):
        """
        Gets the ne_name of this SlotResData.
        设备名称。

        :return: The ne_name of this SlotResData.
        :rtype: str
        """
        return self._ne_name

    @ne_name.setter
    def ne_name(self, ne_name):
        """
        Sets the ne_name of this SlotResData.
        设备名称。

        :param ne_name: The ne_name of this SlotResData.
        :type: str
        """

        self._ne_name = ne_name

    @property
    def framedn(self):
        """
        Gets the framedn of this SlotResData.
        机框dn。

        :return: The framedn of this SlotResData.
        :rtype: str
        """
        return self._framedn

    @framedn.setter
    def framedn(self, framedn):
        """
        Sets the framedn of this SlotResData.
        机框dn。

        :param framedn: The framedn of this SlotResData.
        :type: str
        """

        self._framedn = framedn

    @property
    def framename(self):
        """
        Gets the framename of this SlotResData.
        机框名称。

        :return: The framename of this SlotResData.
        :rtype: str
        """
        return self._framename

    @framename.setter
    def framename(self, framename):
        """
        Sets the framename of this SlotResData.
        机框名称。

        :param framename: The framename of this SlotResData.
        :type: str
        """

        self._framename = framename

    @property
    def frameno(self):
        """
        Gets the frameno of this SlotResData.
        机框序号。

        :return: The frameno of this SlotResData.
        :rtype: int
        """
        return self._frameno

    @frameno.setter
    def frameno(self, frameno):
        """
        Sets the frameno of this SlotResData.
        机框序号。

        :param frameno: The frameno of this SlotResData.
        :type: int
        """

        self._frameno = frameno

    @property
    def slotdn(self):
        """
        Gets the slotdn of this SlotResData.
        单板dn。

        :return: The slotdn of this SlotResData.
        :rtype: str
        """
        return self._slotdn

    @slotdn.setter
    def slotdn(self, slotdn):
        """
        Sets the slotdn of this SlotResData.
        单板dn。

        :param slotdn: The slotdn of this SlotResData.
        :type: str
        """

        self._slotdn = slotdn

    @property
    def slotindex(self):
        """
        Gets the slotindex of this SlotResData.
        单板索引。

        :return: The slotindex of this SlotResData.
        :rtype: int
        """
        return self._slotindex

    @slotindex.setter
    def slotindex(self, slotindex):
        """
        Sets the slotindex of this SlotResData.
        单板索引。

        :param slotindex: The slotindex of this SlotResData.
        :type: int
        """

        self._slotindex = slotindex

    @property
    def slotno(self):
        """
        Gets the slotno of this SlotResData.
        单板序号。

        :return: The slotno of this SlotResData.
        :rtype: int
        """
        return self._slotno

    @slotno.setter
    def slotno(self, slotno):
        """
        Sets the slotno of this SlotResData.
        单板序号。

        :param slotno: The slotno of this SlotResData.
        :type: int
        """

        self._slotno = slotno

    @property
    def vendortype(self):
        """
        Gets the vendortype of this SlotResData.
        厂商类型。

        :return: The vendortype of this SlotResData.
        :rtype: str
        """
        return self._vendortype

    @vendortype.setter
    def vendortype(self, vendortype):
        """
        Sets the vendortype of this SlotResData.
        厂商类型。

        :param vendortype: The vendortype of this SlotResData.
        :type: str
        """

        self._vendortype = vendortype

    @property
    def descr(self):
        """
        Gets the descr of this SlotResData.
        单板描述。

        :return: The descr of this SlotResData.
        :rtype: str
        """
        return self._descr

    @descr.setter
    def descr(self, descr):
        """
        Sets the descr of this SlotResData.
        单板描述。

        :param descr: The descr of this SlotResData.
        :type: str
        """

        self._descr = descr

    @property
    def slotname(self):
        """
        Gets the slotname of this SlotResData.
        单板名称。

        :return: The slotname of this SlotResData.
        :rtype: str
        """
        return self._slotname

    @slotname.setter
    def slotname(self, slotname):
        """
        Sets the slotname of this SlotResData.
        单板名称。

        :param slotname: The slotname of this SlotResData.
        :type: str
        """

        self._slotname = slotname

    @property
    def physicalclass(self):
        """
        Gets the physicalclass of this SlotResData.
        设备上实体大类型： 3：框 4：背板 5：子槽 6：电源 7：风扇 9：板 10：端口 

        :return: The physicalclass of this SlotResData.
        :rtype: int
        """
        return self._physicalclass

    @physicalclass.setter
    def physicalclass(self, physicalclass):
        """
        Sets the physicalclass of this SlotResData.
        设备上实体大类型： 3：框 4：背板 5：子槽 6：电源 7：风扇 9：板 10：端口 

        :param physicalclass: The physicalclass of this SlotResData.
        :type: int
        """

        self._physicalclass = physicalclass

    @property
    def adminstatus(self):
        """
        Gets the adminstatus of this SlotResData.
        管理状态： 4、11：正常 2、3、12：错误 13：LoopBack 

        :return: The adminstatus of this SlotResData.
        :rtype: int
        """
        return self._adminstatus

    @adminstatus.setter
    def adminstatus(self, adminstatus):
        """
        Sets the adminstatus of this SlotResData.
        管理状态： 4、11：正常 2、3、12：错误 13：LoopBack 

        :param adminstatus: The adminstatus of this SlotResData.
        :type: int
        """

        self._adminstatus = adminstatus

    @property
    def operstatus(self):
        """
        Gets the operstatus of this SlotResData.
        操作状态： 3、11、13、15、16：正常 2、12、17：错误 4：离线 其他：未知 

        :return: The operstatus of this SlotResData.
        :rtype: int
        """
        return self._operstatus

    @operstatus.setter
    def operstatus(self, operstatus):
        """
        Sets the operstatus of this SlotResData.
        操作状态： 3、11、13、15、16：正常 2、12、17：错误 4：离线 其他：未知 

        :param operstatus: The operstatus of this SlotResData.
        :type: int
        """

        self._operstatus = operstatus

    @property
    def standbystatus(self):
        """
        Gets the standbystatus of this SlotResData.
        主备状态： 1：notSupported 2：hotStandby 3：coldStandby 4：providingService 

        :return: The standbystatus of this SlotResData.
        :rtype: int
        """
        return self._standbystatus

    @standbystatus.setter
    def standbystatus(self, standbystatus):
        """
        Sets the standbystatus of this SlotResData.
        主备状态： 1：notSupported 2：hotStandby 3：coldStandby 4：providingService 

        :param standbystatus: The standbystatus of this SlotResData.
        :type: int
        """

        self._standbystatus = standbystatus

    @property
    def hardversion(self):
        """
        Gets the hardversion of this SlotResData.
        硬件版本。

        :return: The hardversion of this SlotResData.
        :rtype: str
        """
        return self._hardversion

    @hardversion.setter
    def hardversion(self, hardversion):
        """
        Sets the hardversion of this SlotResData.
        硬件版本。

        :param hardversion: The hardversion of this SlotResData.
        :type: str
        """

        self._hardversion = hardversion

    @property
    def firmversion(self):
        """
        Gets the firmversion of this SlotResData.
        固件版本。

        :return: The firmversion of this SlotResData.
        :rtype: str
        """
        return self._firmversion

    @firmversion.setter
    def firmversion(self, firmversion):
        """
        Sets the firmversion of this SlotResData.
        固件版本。

        :param firmversion: The firmversion of this SlotResData.
        :type: str
        """

        self._firmversion = firmversion

    @property
    def softversion(self):
        """
        Gets the softversion of this SlotResData.
        软件版本。

        :return: The softversion of this SlotResData.
        :rtype: str
        """
        return self._softversion

    @softversion.setter
    def softversion(self, softversion):
        """
        Sets the softversion of this SlotResData.
        软件版本。

        :param softversion: The softversion of this SlotResData.
        :type: str
        """

        self._softversion = softversion

    @property
    def serialnum(self):
        """
        Gets the serialnum of this SlotResData.
        序列号。

        :return: The serialnum of this SlotResData.
        :rtype: str
        """
        return self._serialnum

    @serialnum.setter
    def serialnum(self, serialnum):
        """
        Sets the serialnum of this SlotResData.
        序列号。

        :param serialnum: The serialnum of this SlotResData.
        :type: str
        """

        self._serialnum = serialnum

    @property
    def mfgname(self):
        """
        Gets the mfgname of this SlotResData.
        组件名称。

        :return: The mfgname of this SlotResData.
        :rtype: str
        """
        return self._mfgname

    @mfgname.setter
    def mfgname(self, mfgname):
        """
        Sets the mfgname of this SlotResData.
        组件名称。

        :param mfgname: The mfgname of this SlotResData.
        :type: str
        """

        self._mfgname = mfgname

    @property
    def modelname(self):
        """
        Gets the modelname of this SlotResData.
        模块名称。

        :return: The modelname of this SlotResData.
        :rtype: str
        """
        return self._modelname

    @modelname.setter
    def modelname(self, modelname):
        """
        Sets the modelname of this SlotResData.
        模块名称。

        :param modelname: The modelname of this SlotResData.
        :type: str
        """

        self._modelname = modelname

    @property
    def alarmlight(self):
        """
        Gets the alarmlight of this SlotResData.
        预留字段，当前无意义。

        :return: The alarmlight of this SlotResData.
        :rtype: str
        """
        return self._alarmlight

    @alarmlight.setter
    def alarmlight(self, alarmlight):
        """
        Sets the alarmlight of this SlotResData.
        预留字段，当前无意义。

        :param alarmlight: The alarmlight of this SlotResData.
        :type: str
        """

        self._alarmlight = alarmlight

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SlotResData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
