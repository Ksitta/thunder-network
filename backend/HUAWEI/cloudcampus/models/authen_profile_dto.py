# coding: utf-8

"""
    认证模板管理

    认证模板北向接口定义 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AuthenProfileDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'portal_enable': 'bool',
        'mac_enable': 'bool',
        'dot1x_enable': 'bool',
        'radius_profile_id': 'str',
        'radius_name': 'str',
        'portal_profile_id': 'str',
        'portal_name': 'str',
        'domain': 'str',
        'radius_author': 'int',
        'author_server_address': 'str',
        'author_server_key': 'str',
        'voice_auth_enable': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'portal_enable': 'portalEnable',
        'mac_enable': 'macEnable',
        'dot1x_enable': 'dot1xEnable',
        'radius_profile_id': 'radiusProfileId',
        'radius_name': 'radiusName',
        'portal_profile_id': 'portalProfileId',
        'portal_name': 'portalName',
        'domain': 'domain',
        'radius_author': 'radiusAuthor',
        'author_server_address': 'authorServerAddress',
        'author_server_key': 'authorServerKey',
        'voice_auth_enable': 'voiceAuthEnable'
    }

    def __init__(self, id=None, name=None, portal_enable=None, mac_enable=None, dot1x_enable=None, radius_profile_id=None, radius_name=None, portal_profile_id=None, portal_name=None, domain=None, radius_author=None, author_server_address=None, author_server_key=None, voice_auth_enable=None):
        """
        AuthenProfileDto - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._portal_enable = None
        self._mac_enable = None
        self._dot1x_enable = None
        self._radius_profile_id = None
        self._radius_name = None
        self._portal_profile_id = None
        self._portal_name = None
        self._domain = None
        self._radius_author = None
        self._author_server_address = None
        self._author_server_key = None
        self._voice_auth_enable = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if portal_enable is not None:
          self.portal_enable = portal_enable
        if mac_enable is not None:
          self.mac_enable = mac_enable
        if dot1x_enable is not None:
          self.dot1x_enable = dot1x_enable
        if radius_profile_id is not None:
          self.radius_profile_id = radius_profile_id
        if radius_name is not None:
          self.radius_name = radius_name
        if portal_profile_id is not None:
          self.portal_profile_id = portal_profile_id
        if portal_name is not None:
          self.portal_name = portal_name
        if domain is not None:
          self.domain = domain
        if radius_author is not None:
          self.radius_author = radius_author
        if author_server_address is not None:
          self.author_server_address = author_server_address
        if author_server_key is not None:
          self.author_server_key = author_server_key
        if voice_auth_enable is not None:
          self.voice_auth_enable = voice_auth_enable

    @property
    def id(self):
        """
        Gets the id of this AuthenProfileDto.
        认证模板ID，UUID格式，创建的时候非必填，更新则不允许修改此值。

        :return: The id of this AuthenProfileDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AuthenProfileDto.
        认证模板ID，UUID格式，创建的时候非必填，更新则不允许修改此值。

        :param id: The id of this AuthenProfileDto.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this AuthenProfileDto.
        认证模板名称，创建不允许创建相同的名称，更新不允许修改。

        :return: The name of this AuthenProfileDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AuthenProfileDto.
        认证模板名称，创建不允许创建相同的名称，更新不允许修改。

        :param name: The name of this AuthenProfileDto.
        :type: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def portal_enable(self):
        """
        Gets the portal_enable of this AuthenProfileDto.
        portal认证是否使能，默认为false。

        :return: The portal_enable of this AuthenProfileDto.
        :rtype: bool
        """
        return self._portal_enable

    @portal_enable.setter
    def portal_enable(self, portal_enable):
        """
        Sets the portal_enable of this AuthenProfileDto.
        portal认证是否使能，默认为false。

        :param portal_enable: The portal_enable of this AuthenProfileDto.
        :type: bool
        """

        self._portal_enable = portal_enable

    @property
    def mac_enable(self):
        """
        Gets the mac_enable of this AuthenProfileDto.
        mac认证是否使能，默认为false。

        :return: The mac_enable of this AuthenProfileDto.
        :rtype: bool
        """
        return self._mac_enable

    @mac_enable.setter
    def mac_enable(self, mac_enable):
        """
        Sets the mac_enable of this AuthenProfileDto.
        mac认证是否使能，默认为false。

        :param mac_enable: The mac_enable of this AuthenProfileDto.
        :type: bool
        """

        self._mac_enable = mac_enable

    @property
    def dot1x_enable(self):
        """
        Gets the dot1x_enable of this AuthenProfileDto.
        dot1x认证是否使能，默认为false。

        :return: The dot1x_enable of this AuthenProfileDto.
        :rtype: bool
        """
        return self._dot1x_enable

    @dot1x_enable.setter
    def dot1x_enable(self, dot1x_enable):
        """
        Sets the dot1x_enable of this AuthenProfileDto.
        dot1x认证是否使能，默认为false。

        :param dot1x_enable: The dot1x_enable of this AuthenProfileDto.
        :type: bool
        """

        self._dot1x_enable = dot1x_enable

    @property
    def radius_profile_id(self):
        """
        Gets the radius_profile_id of this AuthenProfileDto.
        RADIUS模板ID，UUID格式。

        :return: The radius_profile_id of this AuthenProfileDto.
        :rtype: str
        """
        return self._radius_profile_id

    @radius_profile_id.setter
    def radius_profile_id(self, radius_profile_id):
        """
        Sets the radius_profile_id of this AuthenProfileDto.
        RADIUS模板ID，UUID格式。

        :param radius_profile_id: The radius_profile_id of this AuthenProfileDto.
        :type: str
        """
        if radius_profile_id is not None and len(radius_profile_id) > 36:
            raise ValueError("Invalid value for `radius_profile_id`, length must be less than or equal to `36`")
        if radius_profile_id is not None and len(radius_profile_id) < 1:
            raise ValueError("Invalid value for `radius_profile_id`, length must be greater than or equal to `1`")

        self._radius_profile_id = radius_profile_id

    @property
    def radius_name(self):
        """
        Gets the radius_name of this AuthenProfileDto.
        RADIUS模板名称，要和radiusProfileId同属于同一个RADIUS模板。

        :return: The radius_name of this AuthenProfileDto.
        :rtype: str
        """
        return self._radius_name

    @radius_name.setter
    def radius_name(self, radius_name):
        """
        Sets the radius_name of this AuthenProfileDto.
        RADIUS模板名称，要和radiusProfileId同属于同一个RADIUS模板。

        :param radius_name: The radius_name of this AuthenProfileDto.
        :type: str
        """
        if radius_name is not None and len(radius_name) > 128:
            raise ValueError("Invalid value for `radius_name`, length must be less than or equal to `128`")
        if radius_name is not None and len(radius_name) < 1:
            raise ValueError("Invalid value for `radius_name`, length must be greater than or equal to `1`")

        self._radius_name = radius_name

    @property
    def portal_profile_id(self):
        """
        Gets the portal_profile_id of this AuthenProfileDto.
        Portal模板ID，UUID格式。

        :return: The portal_profile_id of this AuthenProfileDto.
        :rtype: str
        """
        return self._portal_profile_id

    @portal_profile_id.setter
    def portal_profile_id(self, portal_profile_id):
        """
        Sets the portal_profile_id of this AuthenProfileDto.
        Portal模板ID，UUID格式。

        :param portal_profile_id: The portal_profile_id of this AuthenProfileDto.
        :type: str
        """
        if portal_profile_id is not None and len(portal_profile_id) > 36:
            raise ValueError("Invalid value for `portal_profile_id`, length must be less than or equal to `36`")
        if portal_profile_id is not None and len(portal_profile_id) < 1:
            raise ValueError("Invalid value for `portal_profile_id`, length must be greater than or equal to `1`")

        self._portal_profile_id = portal_profile_id

    @property
    def portal_name(self):
        """
        Gets the portal_name of this AuthenProfileDto.
        Portal模板名称，要和portalProfileId同属于同一个portal模板。

        :return: The portal_name of this AuthenProfileDto.
        :rtype: str
        """
        return self._portal_name

    @portal_name.setter
    def portal_name(self, portal_name):
        """
        Sets the portal_name of this AuthenProfileDto.
        Portal模板名称，要和portalProfileId同属于同一个portal模板。

        :param portal_name: The portal_name of this AuthenProfileDto.
        :type: str
        """
        if portal_name is not None and len(portal_name) > 128:
            raise ValueError("Invalid value for `portal_name`, length must be less than or equal to `128`")
        if portal_name is not None and len(portal_name) < 1:
            raise ValueError("Invalid value for `portal_name`, length must be greater than or equal to `1`")

        self._portal_name = portal_name

    @property
    def domain(self):
        """
        Gets the domain of this AuthenProfileDto.
        域名称。

        :return: The domain of this AuthenProfileDto.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this AuthenProfileDto.
        域名称。

        :param domain: The domain of this AuthenProfileDto.
        :type: str
        """
        if domain is not None and len(domain) > 128:
            raise ValueError("Invalid value for `domain`, length must be less than or equal to `128`")
        if domain is not None and len(domain) < 1:
            raise ValueError("Invalid value for `domain`, length must be greater than or equal to `1`")

        self._domain = domain

    @property
    def radius_author(self):
        """
        Gets the radius_author of this AuthenProfileDto.
        RADIUS动态授权服务器模式，0表示默认，1表示自定义。

        :return: The radius_author of this AuthenProfileDto.
        :rtype: int
        """
        return self._radius_author

    @radius_author.setter
    def radius_author(self, radius_author):
        """
        Sets the radius_author of this AuthenProfileDto.
        RADIUS动态授权服务器模式，0表示默认，1表示自定义。

        :param radius_author: The radius_author of this AuthenProfileDto.
        :type: int
        """

        self._radius_author = radius_author

    @property
    def author_server_address(self):
        """
        Gets the author_server_address of this AuthenProfileDto.
        动态授权服务器IP，当radiusAuthor为0时，authorServerAddress不生效；当radiusAuthor为1时，authorServerAddress必填。

        :return: The author_server_address of this AuthenProfileDto.
        :rtype: str
        """
        return self._author_server_address

    @author_server_address.setter
    def author_server_address(self, author_server_address):
        """
        Sets the author_server_address of this AuthenProfileDto.
        动态授权服务器IP，当radiusAuthor为0时，authorServerAddress不生效；当radiusAuthor为1时，authorServerAddress必填。

        :param author_server_address: The author_server_address of this AuthenProfileDto.
        :type: str
        """
        if author_server_address is not None and len(author_server_address) > 128:
            raise ValueError("Invalid value for `author_server_address`, length must be less than or equal to `128`")
        if author_server_address is not None and len(author_server_address) < 1:
            raise ValueError("Invalid value for `author_server_address`, length must be greater than or equal to `1`")

        self._author_server_address = author_server_address

    @property
    def author_server_key(self):
        """
        Gets the author_server_key of this AuthenProfileDto.
        动态授权服务器密码，当radiusAuthor为0时，authorServerKey不生效；当radiusAuthor为1时，authorServerKey必填。

        :return: The author_server_key of this AuthenProfileDto.
        :rtype: str
        """
        return self._author_server_key

    @author_server_key.setter
    def author_server_key(self, author_server_key):
        """
        Sets the author_server_key of this AuthenProfileDto.
        动态授权服务器密码，当radiusAuthor为0时，authorServerKey不生效；当radiusAuthor为1时，authorServerKey必填。

        :param author_server_key: The author_server_key of this AuthenProfileDto.
        :type: str
        """
        if author_server_key is not None and len(author_server_key) > 128:
            raise ValueError("Invalid value for `author_server_key`, length must be less than or equal to `128`")
        if author_server_key is not None and len(author_server_key) < 1:
            raise ValueError("Invalid value for `author_server_key`, length must be greater than or equal to `1`")

        self._author_server_key = author_server_key

    @property
    def voice_auth_enable(self):
        """
        Gets the voice_auth_enable of this AuthenProfileDto.
        话机认证是否使能，默认为false。

        :return: The voice_auth_enable of this AuthenProfileDto.
        :rtype: bool
        """
        return self._voice_auth_enable

    @voice_auth_enable.setter
    def voice_auth_enable(self, voice_auth_enable):
        """
        Sets the voice_auth_enable of this AuthenProfileDto.
        话机认证是否使能，默认为false。

        :param voice_auth_enable: The voice_auth_enable of this AuthenProfileDto.
        :type: bool
        """

        self._voice_auth_enable = voice_auth_enable

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AuthenProfileDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
