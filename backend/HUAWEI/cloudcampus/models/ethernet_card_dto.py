# coding: utf-8

"""
    AP网口IOT插卡管理

    AP网口IOT插卡查询及操作接口。 场景：对AP网口IOT插卡查询及操作的第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EthernetCardDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ap_name': 'str',
        'ap_esn': 'str',
        'interface_name': 'str',
        'card_slot': 'int',
        'card_status': 'str',
        'card_connect_status': 'str',
        'interface_index': 'int',
        'device_id': 'str',
        'device_status': 'int',
        'upward_speed': 'int',
        'downward_speed': 'int',
        'upward_traffic': 'int',
        'downward_traffic': 'int',
        'receive_packages': 'int',
        'send_packages': 'int',
        'card_ip': 'str',
        'card_mac': 'str',
        'card_sn': 'str',
        'center_frequency': 'int',
        'band_width': 'int',
        'server_connect_status': 'int'
    }

    attribute_map = {
        'ap_name': 'apName',
        'ap_esn': 'apEsn',
        'interface_name': 'interfaceName',
        'card_slot': 'cardSlot',
        'card_status': 'cardStatus',
        'card_connect_status': 'cardConnectStatus',
        'interface_index': 'interfaceIndex',
        'device_id': 'deviceId',
        'device_status': 'deviceStatus',
        'upward_speed': 'upwardSpeed',
        'downward_speed': 'downwardSpeed',
        'upward_traffic': 'upwardTraffic',
        'downward_traffic': 'downwardTraffic',
        'receive_packages': 'receivePackages',
        'send_packages': 'sendPackages',
        'card_ip': 'cardIp',
        'card_mac': 'cardMac',
        'card_sn': 'cardSn',
        'center_frequency': 'centerFrequency',
        'band_width': 'bandWidth',
        'server_connect_status': 'serverConnectStatus'
    }

    def __init__(self, ap_name=None, ap_esn=None, interface_name=None, card_slot=None, card_status=None, card_connect_status=None, interface_index=None, device_id=None, device_status=None, upward_speed=None, downward_speed=None, upward_traffic=None, downward_traffic=None, receive_packages=None, send_packages=None, card_ip=None, card_mac=None, card_sn=None, center_frequency=None, band_width=None, server_connect_status=None):
        """
        EthernetCardDto - a model defined in Swagger
        """

        self._ap_name = None
        self._ap_esn = None
        self._interface_name = None
        self._card_slot = None
        self._card_status = None
        self._card_connect_status = None
        self._interface_index = None
        self._device_id = None
        self._device_status = None
        self._upward_speed = None
        self._downward_speed = None
        self._upward_traffic = None
        self._downward_traffic = None
        self._receive_packages = None
        self._send_packages = None
        self._card_ip = None
        self._card_mac = None
        self._card_sn = None
        self._center_frequency = None
        self._band_width = None
        self._server_connect_status = None

        if ap_name is not None:
          self.ap_name = ap_name
        if ap_esn is not None:
          self.ap_esn = ap_esn
        if interface_name is not None:
          self.interface_name = interface_name
        if card_slot is not None:
          self.card_slot = card_slot
        if card_status is not None:
          self.card_status = card_status
        if card_connect_status is not None:
          self.card_connect_status = card_connect_status
        if interface_index is not None:
          self.interface_index = interface_index
        if device_id is not None:
          self.device_id = device_id
        if device_status is not None:
          self.device_status = device_status
        if upward_speed is not None:
          self.upward_speed = upward_speed
        if downward_speed is not None:
          self.downward_speed = downward_speed
        if upward_traffic is not None:
          self.upward_traffic = upward_traffic
        if downward_traffic is not None:
          self.downward_traffic = downward_traffic
        if receive_packages is not None:
          self.receive_packages = receive_packages
        if send_packages is not None:
          self.send_packages = send_packages
        if card_ip is not None:
          self.card_ip = card_ip
        if card_mac is not None:
          self.card_mac = card_mac
        if card_sn is not None:
          self.card_sn = card_sn
        if center_frequency is not None:
          self.center_frequency = center_frequency
        if band_width is not None:
          self.band_width = band_width
        if server_connect_status is not None:
          self.server_connect_status = server_connect_status

    @property
    def ap_name(self):
        """
        Gets the ap_name of this EthernetCardDto.
        AP名称。

        :return: The ap_name of this EthernetCardDto.
        :rtype: str
        """
        return self._ap_name

    @ap_name.setter
    def ap_name(self, ap_name):
        """
        Sets the ap_name of this EthernetCardDto.
        AP名称。

        :param ap_name: The ap_name of this EthernetCardDto.
        :type: str
        """
        if ap_name is not None and len(ap_name) > 64:
            raise ValueError("Invalid value for `ap_name`, length must be less than or equal to `64`")
        if ap_name is not None and len(ap_name) < 0:
            raise ValueError("Invalid value for `ap_name`, length must be greater than or equal to `0`")

        self._ap_name = ap_name

    @property
    def ap_esn(self):
        """
        Gets the ap_esn of this EthernetCardDto.
        AP序列号。

        :return: The ap_esn of this EthernetCardDto.
        :rtype: str
        """
        return self._ap_esn

    @ap_esn.setter
    def ap_esn(self, ap_esn):
        """
        Sets the ap_esn of this EthernetCardDto.
        AP序列号。

        :param ap_esn: The ap_esn of this EthernetCardDto.
        :type: str
        """
        if ap_esn is not None and len(ap_esn) > 64:
            raise ValueError("Invalid value for `ap_esn`, length must be less than or equal to `64`")
        if ap_esn is not None and len(ap_esn) < 0:
            raise ValueError("Invalid value for `ap_esn`, length must be greater than or equal to `0`")

        self._ap_esn = ap_esn

    @property
    def interface_name(self):
        """
        Gets the interface_name of this EthernetCardDto.
        接口名称。

        :return: The interface_name of this EthernetCardDto.
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """
        Sets the interface_name of this EthernetCardDto.
        接口名称。

        :param interface_name: The interface_name of this EthernetCardDto.
        :type: str
        """
        if interface_name is not None and len(interface_name) > 64:
            raise ValueError("Invalid value for `interface_name`, length must be less than or equal to `64`")
        if interface_name is not None and len(interface_name) < 0:
            raise ValueError("Invalid value for `interface_name`, length must be greater than or equal to `0`")

        self._interface_name = interface_name

    @property
    def card_slot(self):
        """
        Gets the card_slot of this EthernetCardDto.
        卡槽号。

        :return: The card_slot of this EthernetCardDto.
        :rtype: int
        """
        return self._card_slot

    @card_slot.setter
    def card_slot(self, card_slot):
        """
        Sets the card_slot of this EthernetCardDto.
        卡槽号。

        :param card_slot: The card_slot of this EthernetCardDto.
        :type: int
        """
        if card_slot is not None and card_slot > 8:
            raise ValueError("Invalid value for `card_slot`, must be a value less than or equal to `8`")
        if card_slot is not None and card_slot < 0:
            raise ValueError("Invalid value for `card_slot`, must be a value greater than or equal to `0`")

        self._card_slot = card_slot

    @property
    def card_status(self):
        """
        Gets the card_status of this EthernetCardDto.
        卡状态。

        :return: The card_status of this EthernetCardDto.
        :rtype: str
        """
        return self._card_status

    @card_status.setter
    def card_status(self, card_status):
        """
        Sets the card_status of this EthernetCardDto.
        卡状态。

        :param card_status: The card_status of this EthernetCardDto.
        :type: str
        """
        if card_status is not None and len(card_status) > 64:
            raise ValueError("Invalid value for `card_status`, length must be less than or equal to `64`")
        if card_status is not None and len(card_status) < 0:
            raise ValueError("Invalid value for `card_status`, length must be greater than or equal to `0`")

        self._card_status = card_status

    @property
    def card_connect_status(self):
        """
        Gets the card_connect_status of this EthernetCardDto.
        卡连接状态。

        :return: The card_connect_status of this EthernetCardDto.
        :rtype: str
        """
        return self._card_connect_status

    @card_connect_status.setter
    def card_connect_status(self, card_connect_status):
        """
        Sets the card_connect_status of this EthernetCardDto.
        卡连接状态。

        :param card_connect_status: The card_connect_status of this EthernetCardDto.
        :type: str
        """
        if card_connect_status is not None and len(card_connect_status) > 64:
            raise ValueError("Invalid value for `card_connect_status`, length must be less than or equal to `64`")
        if card_connect_status is not None and len(card_connect_status) < 0:
            raise ValueError("Invalid value for `card_connect_status`, length must be greater than or equal to `0`")

        self._card_connect_status = card_connect_status

    @property
    def interface_index(self):
        """
        Gets the interface_index of this EthernetCardDto.
        接口索引。

        :return: The interface_index of this EthernetCardDto.
        :rtype: int
        """
        return self._interface_index

    @interface_index.setter
    def interface_index(self, interface_index):
        """
        Sets the interface_index of this EthernetCardDto.
        接口索引。

        :param interface_index: The interface_index of this EthernetCardDto.
        :type: int
        """

        self._interface_index = interface_index

    @property
    def device_id(self):
        """
        Gets the device_id of this EthernetCardDto.
        设备ID，UUID格式。

        :return: The device_id of this EthernetCardDto.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this EthernetCardDto.
        设备ID，UUID格式。

        :param device_id: The device_id of this EthernetCardDto.
        :type: str
        """
        if device_id is not None and len(device_id) > 64:
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `64`")
        if device_id is not None and len(device_id) < 0:
            raise ValueError("Invalid value for `device_id`, length must be greater than or equal to `0`")

        self._device_id = device_id

    @property
    def device_status(self):
        """
        Gets the device_status of this EthernetCardDto.
        设备状态。取值范围：0---正常，1---告警，3---离线，4---未注册。

        :return: The device_status of this EthernetCardDto.
        :rtype: int
        """
        return self._device_status

    @device_status.setter
    def device_status(self, device_status):
        """
        Sets the device_status of this EthernetCardDto.
        设备状态。取值范围：0---正常，1---告警，3---离线，4---未注册。

        :param device_status: The device_status of this EthernetCardDto.
        :type: int
        """

        self._device_status = device_status

    @property
    def upward_speed(self):
        """
        Gets the upward_speed of this EthernetCardDto.
        接口上行速率，单位是bps。

        :return: The upward_speed of this EthernetCardDto.
        :rtype: int
        """
        return self._upward_speed

    @upward_speed.setter
    def upward_speed(self, upward_speed):
        """
        Sets the upward_speed of this EthernetCardDto.
        接口上行速率，单位是bps。

        :param upward_speed: The upward_speed of this EthernetCardDto.
        :type: int
        """

        self._upward_speed = upward_speed

    @property
    def downward_speed(self):
        """
        Gets the downward_speed of this EthernetCardDto.
        接口下行速率，单位是bps。

        :return: The downward_speed of this EthernetCardDto.
        :rtype: int
        """
        return self._downward_speed

    @downward_speed.setter
    def downward_speed(self, downward_speed):
        """
        Sets the downward_speed of this EthernetCardDto.
        接口下行速率，单位是bps。

        :param downward_speed: The downward_speed of this EthernetCardDto.
        :type: int
        """

        self._downward_speed = downward_speed

    @property
    def upward_traffic(self):
        """
        Gets the upward_traffic of this EthernetCardDto.
        接口上行流量，单位是Bytes。

        :return: The upward_traffic of this EthernetCardDto.
        :rtype: int
        """
        return self._upward_traffic

    @upward_traffic.setter
    def upward_traffic(self, upward_traffic):
        """
        Sets the upward_traffic of this EthernetCardDto.
        接口上行流量，单位是Bytes。

        :param upward_traffic: The upward_traffic of this EthernetCardDto.
        :type: int
        """

        self._upward_traffic = upward_traffic

    @property
    def downward_traffic(self):
        """
        Gets the downward_traffic of this EthernetCardDto.
        接口下行流量，单位是Bytes。

        :return: The downward_traffic of this EthernetCardDto.
        :rtype: int
        """
        return self._downward_traffic

    @downward_traffic.setter
    def downward_traffic(self, downward_traffic):
        """
        Sets the downward_traffic of this EthernetCardDto.
        接口下行流量，单位是Bytes。

        :param downward_traffic: The downward_traffic of this EthernetCardDto.
        :type: int
        """

        self._downward_traffic = downward_traffic

    @property
    def receive_packages(self):
        """
        Gets the receive_packages of this EthernetCardDto.
        接口上报周期内接收报文数。

        :return: The receive_packages of this EthernetCardDto.
        :rtype: int
        """
        return self._receive_packages

    @receive_packages.setter
    def receive_packages(self, receive_packages):
        """
        Sets the receive_packages of this EthernetCardDto.
        接口上报周期内接收报文数。

        :param receive_packages: The receive_packages of this EthernetCardDto.
        :type: int
        """

        self._receive_packages = receive_packages

    @property
    def send_packages(self):
        """
        Gets the send_packages of this EthernetCardDto.
        接口上报周期内发送报文数。

        :return: The send_packages of this EthernetCardDto.
        :rtype: int
        """
        return self._send_packages

    @send_packages.setter
    def send_packages(self, send_packages):
        """
        Sets the send_packages of this EthernetCardDto.
        接口上报周期内发送报文数。

        :param send_packages: The send_packages of this EthernetCardDto.
        :type: int
        """

        self._send_packages = send_packages

    @property
    def card_ip(self):
        """
        Gets the card_ip of this EthernetCardDto.
        插卡IP。

        :return: The card_ip of this EthernetCardDto.
        :rtype: str
        """
        return self._card_ip

    @card_ip.setter
    def card_ip(self, card_ip):
        """
        Sets the card_ip of this EthernetCardDto.
        插卡IP。

        :param card_ip: The card_ip of this EthernetCardDto.
        :type: str
        """
        if card_ip is not None and len(card_ip) > 256:
            raise ValueError("Invalid value for `card_ip`, length must be less than or equal to `256`")
        if card_ip is not None and len(card_ip) < 0:
            raise ValueError("Invalid value for `card_ip`, length must be greater than or equal to `0`")

        self._card_ip = card_ip

    @property
    def card_mac(self):
        """
        Gets the card_mac of this EthernetCardDto.
        插卡MAC。

        :return: The card_mac of this EthernetCardDto.
        :rtype: str
        """
        return self._card_mac

    @card_mac.setter
    def card_mac(self, card_mac):
        """
        Sets the card_mac of this EthernetCardDto.
        插卡MAC。

        :param card_mac: The card_mac of this EthernetCardDto.
        :type: str
        """
        if card_mac is not None and len(card_mac) > 256:
            raise ValueError("Invalid value for `card_mac`, length must be less than or equal to `256`")
        if card_mac is not None and len(card_mac) < 0:
            raise ValueError("Invalid value for `card_mac`, length must be greater than or equal to `0`")

        self._card_mac = card_mac

    @property
    def card_sn(self):
        """
        Gets the card_sn of this EthernetCardDto.
        插卡SN编号。

        :return: The card_sn of this EthernetCardDto.
        :rtype: str
        """
        return self._card_sn

    @card_sn.setter
    def card_sn(self, card_sn):
        """
        Sets the card_sn of this EthernetCardDto.
        插卡SN编号。

        :param card_sn: The card_sn of this EthernetCardDto.
        :type: str
        """
        if card_sn is not None and len(card_sn) > 64:
            raise ValueError("Invalid value for `card_sn`, length must be less than or equal to `64`")
        if card_sn is not None and len(card_sn) < 0:
            raise ValueError("Invalid value for `card_sn`, length must be greater than or equal to `0`")

        self._card_sn = card_sn

    @property
    def center_frequency(self):
        """
        Gets the center_frequency of this EthernetCardDto.
        中心频率，单位是GHz。

        :return: The center_frequency of this EthernetCardDto.
        :rtype: int
        """
        return self._center_frequency

    @center_frequency.setter
    def center_frequency(self, center_frequency):
        """
        Sets the center_frequency of this EthernetCardDto.
        中心频率，单位是GHz。

        :param center_frequency: The center_frequency of this EthernetCardDto.
        :type: int
        """

        self._center_frequency = center_frequency

    @property
    def band_width(self):
        """
        Gets the band_width of this EthernetCardDto.
        带宽，单位是Bytes。

        :return: The band_width of this EthernetCardDto.
        :rtype: int
        """
        return self._band_width

    @band_width.setter
    def band_width(self, band_width):
        """
        Sets the band_width of this EthernetCardDto.
        带宽，单位是Bytes。

        :param band_width: The band_width of this EthernetCardDto.
        :type: int
        """

        self._band_width = band_width

    @property
    def server_connect_status(self):
        """
        Gets the server_connect_status of this EthernetCardDto.
        与服务器连接状态，取值范围：0---建联、1---不建联。

        :return: The server_connect_status of this EthernetCardDto.
        :rtype: int
        """
        return self._server_connect_status

    @server_connect_status.setter
    def server_connect_status(self, server_connect_status):
        """
        Sets the server_connect_status of this EthernetCardDto.
        与服务器连接状态，取值范围：0---建联、1---不建联。

        :param server_connect_status: The server_connect_status of this EthernetCardDto.
        :type: int
        """

        self._server_connect_status = server_connect_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EthernetCardDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
