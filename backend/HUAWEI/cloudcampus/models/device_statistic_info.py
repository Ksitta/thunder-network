# coding: utf-8

"""
    设备基础性能数据信息查询

    · 查询设备网络速率历史数据 · 查询站点维度TopN设备或者全部设备的上行流量、下行流量 · 查询站点维度设备连接终端数历史数据 · 查询单设备连接终端数历史数据 · 查询租户维度下设备状态历史数据 · 查询基于站点的站点健康度和设备健康度 · 查询站点下TOP N SSID流量和最近在线用户数 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceStatisticInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'device_name': 'str',
        'up_traffic': 'float',
        'down_traffic': 'float',
        'unit': 'str'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'device_name': 'deviceName',
        'up_traffic': 'upTraffic',
        'down_traffic': 'downTraffic',
        'unit': 'unit'
    }

    def __init__(self, device_id=None, device_name=None, up_traffic=None, down_traffic=None, unit=None):
        """
        DeviceStatisticInfo - a model defined in Swagger
        """

        self._device_id = None
        self._device_name = None
        self._up_traffic = None
        self._down_traffic = None
        self._unit = None

        if device_id is not None:
          self.device_id = device_id
        if device_name is not None:
          self.device_name = device_name
        if up_traffic is not None:
          self.up_traffic = up_traffic
        if down_traffic is not None:
          self.down_traffic = down_traffic
        if unit is not None:
          self.unit = unit

    @property
    def device_id(self):
        """
        Gets the device_id of this DeviceStatisticInfo.
        设备ID。

        :return: The device_id of this DeviceStatisticInfo.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this DeviceStatisticInfo.
        设备ID。

        :param device_id: The device_id of this DeviceStatisticInfo.
        :type: str
        """

        self._device_id = device_id

    @property
    def device_name(self):
        """
        Gets the device_name of this DeviceStatisticInfo.
        设备名称。

        :return: The device_name of this DeviceStatisticInfo.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """
        Sets the device_name of this DeviceStatisticInfo.
        设备名称。

        :param device_name: The device_name of this DeviceStatisticInfo.
        :type: str
        """
        if device_name is not None and len(device_name) > 256:
            raise ValueError("Invalid value for `device_name`, length must be less than or equal to `256`")
        if device_name is not None and len(device_name) < 0:
            raise ValueError("Invalid value for `device_name`, length must be greater than or equal to `0`")

        self._device_name = device_name

    @property
    def up_traffic(self):
        """
        Gets the up_traffic of this DeviceStatisticInfo.
        上行流量。

        :return: The up_traffic of this DeviceStatisticInfo.
        :rtype: float
        """
        return self._up_traffic

    @up_traffic.setter
    def up_traffic(self, up_traffic):
        """
        Sets the up_traffic of this DeviceStatisticInfo.
        上行流量。

        :param up_traffic: The up_traffic of this DeviceStatisticInfo.
        :type: float
        """
        if up_traffic is not None and up_traffic > 340282350000000000000000000000000000000:
            raise ValueError("Invalid value for `up_traffic`, must be a value less than or equal to `340282350000000000000000000000000000000`")
        if up_traffic is not None and up_traffic < 0:
            raise ValueError("Invalid value for `up_traffic`, must be a value greater than or equal to `0`")

        self._up_traffic = up_traffic

    @property
    def down_traffic(self):
        """
        Gets the down_traffic of this DeviceStatisticInfo.
        下行流量。

        :return: The down_traffic of this DeviceStatisticInfo.
        :rtype: float
        """
        return self._down_traffic

    @down_traffic.setter
    def down_traffic(self, down_traffic):
        """
        Sets the down_traffic of this DeviceStatisticInfo.
        下行流量。

        :param down_traffic: The down_traffic of this DeviceStatisticInfo.
        :type: float
        """
        if down_traffic is not None and down_traffic > 340282350000000000000000000000000000000:
            raise ValueError("Invalid value for `down_traffic`, must be a value less than or equal to `340282350000000000000000000000000000000`")
        if down_traffic is not None and down_traffic < 0:
            raise ValueError("Invalid value for `down_traffic`, must be a value greater than or equal to `0`")

        self._down_traffic = down_traffic

    @property
    def unit(self):
        """
        Gets the unit of this DeviceStatisticInfo.
        流量单位。

        :return: The unit of this DeviceStatisticInfo.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """
        Sets the unit of this DeviceStatisticInfo.
        流量单位。

        :param unit: The unit of this DeviceStatisticInfo.
        :type: str
        """
        if unit is not None and len(unit) > 256:
            raise ValueError("Invalid value for `unit`, length must be less than or equal to `256`")
        if unit is not None and len(unit) < 0:
            raise ValueError("Invalid value for `unit`, length must be greater than or equal to `0`")

        self._unit = unit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceStatisticInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
