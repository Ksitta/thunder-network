# coding: utf-8

"""
    框式交换机板卡信息操作

    框式上云相关操作接口： 场景：对框式交换机信息查询操作的第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResetReasonDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'slot_index': 'str',
        'reset_time': 'str',
        'reason': 'str'
    }

    attribute_map = {
        'slot_index': 'slotIndex',
        'reset_time': 'resetTime',
        'reason': 'reason'
    }

    def __init__(self, slot_index=None, reset_time=None, reason=None):
        """
        ResetReasonDto - a model defined in Swagger
        """

        self._slot_index = None
        self._reset_time = None
        self._reason = None

        if slot_index is not None:
          self.slot_index = slot_index
        if reset_time is not None:
          self.reset_time = reset_time
        if reason is not None:
          self.reason = reason

    @property
    def slot_index(self):
        """
        Gets the slot_index of this ResetReasonDto.
        槽位号。

        :return: The slot_index of this ResetReasonDto.
        :rtype: str
        """
        return self._slot_index

    @slot_index.setter
    def slot_index(self, slot_index):
        """
        Sets the slot_index of this ResetReasonDto.
        槽位号。

        :param slot_index: The slot_index of this ResetReasonDto.
        :type: str
        """
        if slot_index is not None and len(slot_index) > 32:
            raise ValueError("Invalid value for `slot_index`, length must be less than or equal to `32`")
        if slot_index is not None and len(slot_index) < 0:
            raise ValueError("Invalid value for `slot_index`, length must be greater than or equal to `0`")

        self._slot_index = slot_index

    @property
    def reset_time(self):
        """
        Gets the reset_time of this ResetReasonDto.
        复位时间，UTC时间格式。

        :return: The reset_time of this ResetReasonDto.
        :rtype: str
        """
        return self._reset_time

    @reset_time.setter
    def reset_time(self, reset_time):
        """
        Sets the reset_time of this ResetReasonDto.
        复位时间，UTC时间格式。

        :param reset_time: The reset_time of this ResetReasonDto.
        :type: str
        """
        if reset_time is not None and len(reset_time) > 64:
            raise ValueError("Invalid value for `reset_time`, length must be less than or equal to `64`")
        if reset_time is not None and len(reset_time) < 0:
            raise ValueError("Invalid value for `reset_time`, length must be greater than or equal to `0`")

        self._reset_time = reset_time

    @property
    def reason(self):
        """
        Gets the reason of this ResetReasonDto.
        复位原因。

        :return: The reason of this ResetReasonDto.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this ResetReasonDto.
        复位原因。

        :param reason: The reason of this ResetReasonDto.
        :type: str
        """
        if reason is not None and len(reason) > 256:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `256`")
        if reason is not None and len(reason) < 0:
            raise ValueError("Invalid value for `reason`, length must be greater than or equal to `0`")

        self._reason = reason

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResetReasonDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
