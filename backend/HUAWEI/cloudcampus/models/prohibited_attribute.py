# coding: utf-8

"""
    RADIUS模板管理

    RADIUS模板配置第三方北向接口说明。 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProhibitedAttribute(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_name': 'str',
        'prohibit_receive': 'bool',
        'prohibit_send': 'bool'
    }

    attribute_map = {
        'attribute_name': 'attributeName',
        'prohibit_receive': 'prohibitReceive',
        'prohibit_send': 'prohibitSend'
    }

    def __init__(self, attribute_name=None, prohibit_receive=None, prohibit_send=None):
        """
        ProhibitedAttribute - a model defined in Swagger
        """

        self._attribute_name = None
        self._prohibit_receive = None
        self._prohibit_send = None

        if attribute_name is not None:
          self.attribute_name = attribute_name
        if prohibit_receive is not None:
          self.prohibit_receive = prohibit_receive
        if prohibit_send is not None:
          self.prohibit_send = prohibit_send

    @property
    def attribute_name(self):
        """
        Gets the attribute_name of this ProhibitedAttribute.
        RADIUS属性名称，包括IETF标准属性，华为和思科扩展属性。

        :return: The attribute_name of this ProhibitedAttribute.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """
        Sets the attribute_name of this ProhibitedAttribute.
        RADIUS属性名称，包括IETF标准属性，华为和思科扩展属性。

        :param attribute_name: The attribute_name of this ProhibitedAttribute.
        :type: str
        """

        self._attribute_name = attribute_name

    @property
    def prohibit_receive(self):
        """
        Gets the prohibit_receive of this ProhibitedAttribute.
        禁用接收报文中的RADIUS属性。

        :return: The prohibit_receive of this ProhibitedAttribute.
        :rtype: bool
        """
        return self._prohibit_receive

    @prohibit_receive.setter
    def prohibit_receive(self, prohibit_receive):
        """
        Sets the prohibit_receive of this ProhibitedAttribute.
        禁用接收报文中的RADIUS属性。

        :param prohibit_receive: The prohibit_receive of this ProhibitedAttribute.
        :type: bool
        """

        self._prohibit_receive = prohibit_receive

    @property
    def prohibit_send(self):
        """
        Gets the prohibit_send of this ProhibitedAttribute.
        禁用发送报文中的RADIUS属性。

        :return: The prohibit_send of this ProhibitedAttribute.
        :rtype: bool
        """
        return self._prohibit_send

    @prohibit_send.setter
    def prohibit_send(self, prohibit_send):
        """
        Sets the prohibit_send of this ProhibitedAttribute.
        禁用发送报文中的RADIUS属性。

        :param prohibit_send: The prohibit_send of this ProhibitedAttribute.
        :type: bool
        """

        self._prohibit_send = prohibit_send

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProhibitedAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
