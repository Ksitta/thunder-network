# coding: utf-8

"""
    设备基础性能数据信息查询

    · 查询设备网络速率历史数据 · 查询站点维度TopN设备或者全部设备的上行流量、下行流量 · 查询站点维度设备连接终端数历史数据 · 查询单设备连接终端数历史数据 · 查询租户维度下设备状态历史数据 · 查询基于站点的站点健康度和设备健康度 · 查询站点下TOP N SSID流量和最近在线用户数 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DevicePerformance(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'esn': 'str',
        'device_ip': 'str',
        'ne_type': 'str',
        'status': 'int',
        'gis_lon': 'float',
        'gis_lat': 'float',
        'traffic': 'float',
        'online_users': 'int',
        'cpu_rate': 'int',
        'upward_speed': 'float',
        'downward_speed': 'float',
        'mac': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'esn': 'esn',
        'device_ip': 'deviceIp',
        'ne_type': 'neType',
        'status': 'status',
        'gis_lon': 'gisLon',
        'gis_lat': 'gisLat',
        'traffic': 'traffic',
        'online_users': 'onlineUsers',
        'cpu_rate': 'cpuRate',
        'upward_speed': 'upwardSpeed',
        'downward_speed': 'downwardSpeed',
        'mac': 'mac'
    }

    def __init__(self, id=None, name=None, esn=None, device_ip=None, ne_type=None, status=None, gis_lon=None, gis_lat=None, traffic=None, online_users=None, cpu_rate=None, upward_speed=None, downward_speed=None, mac=None):
        """
        DevicePerformance - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._esn = None
        self._device_ip = None
        self._ne_type = None
        self._status = None
        self._gis_lon = None
        self._gis_lat = None
        self._traffic = None
        self._online_users = None
        self._cpu_rate = None
        self._upward_speed = None
        self._downward_speed = None
        self._mac = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if esn is not None:
          self.esn = esn
        if device_ip is not None:
          self.device_ip = device_ip
        if ne_type is not None:
          self.ne_type = ne_type
        if status is not None:
          self.status = status
        if gis_lon is not None:
          self.gis_lon = gis_lon
        if gis_lat is not None:
          self.gis_lat = gis_lat
        if traffic is not None:
          self.traffic = traffic
        if online_users is not None:
          self.online_users = online_users
        if cpu_rate is not None:
          self.cpu_rate = cpu_rate
        if upward_speed is not None:
          self.upward_speed = upward_speed
        if downward_speed is not None:
          self.downward_speed = downward_speed
        if mac is not None:
          self.mac = mac

    @property
    def id(self):
        """
        Gets the id of this DevicePerformance.
        设备标识。

        :return: The id of this DevicePerformance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DevicePerformance.
        设备标识。

        :param id: The id of this DevicePerformance.
        :type: str
        """
        if id is not None and len(id) > 256:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `256`")
        if id is not None and len(id) < 0:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this DevicePerformance.
        设备名称。

        :return: The name of this DevicePerformance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DevicePerformance.
        设备名称。

        :param name: The name of this DevicePerformance.
        :type: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def esn(self):
        """
        Gets the esn of this DevicePerformance.
        设备ESN号。

        :return: The esn of this DevicePerformance.
        :rtype: str
        """
        return self._esn

    @esn.setter
    def esn(self, esn):
        """
        Sets the esn of this DevicePerformance.
        设备ESN号。

        :param esn: The esn of this DevicePerformance.
        :type: str
        """
        if esn is not None and len(esn) > 256:
            raise ValueError("Invalid value for `esn`, length must be less than or equal to `256`")
        if esn is not None and len(esn) < 0:
            raise ValueError("Invalid value for `esn`, length must be greater than or equal to `0`")

        self._esn = esn

    @property
    def device_ip(self):
        """
        Gets the device_ip of this DevicePerformance.
        设备IP。

        :return: The device_ip of this DevicePerformance.
        :rtype: str
        """
        return self._device_ip

    @device_ip.setter
    def device_ip(self, device_ip):
        """
        Sets the device_ip of this DevicePerformance.
        设备IP。

        :param device_ip: The device_ip of this DevicePerformance.
        :type: str
        """
        if device_ip is not None and len(device_ip) > 256:
            raise ValueError("Invalid value for `device_ip`, length must be less than or equal to `256`")
        if device_ip is not None and len(device_ip) < 0:
            raise ValueError("Invalid value for `device_ip`, length must be greater than or equal to `0`")

        self._device_ip = device_ip

    @property
    def ne_type(self):
        """
        Gets the ne_type of this DevicePerformance.
        具体的设备款型。

        :return: The ne_type of this DevicePerformance.
        :rtype: str
        """
        return self._ne_type

    @ne_type.setter
    def ne_type(self, ne_type):
        """
        Sets the ne_type of this DevicePerformance.
        具体的设备款型。

        :param ne_type: The ne_type of this DevicePerformance.
        :type: str
        """
        if ne_type is not None and len(ne_type) > 256:
            raise ValueError("Invalid value for `ne_type`, length must be less than or equal to `256`")
        if ne_type is not None and len(ne_type) < 0:
            raise ValueError("Invalid value for `ne_type`, length must be greater than or equal to `0`")

        self._ne_type = ne_type

    @property
    def status(self):
        """
        Gets the status of this DevicePerformance.
        设备状态，0---在线、1---告警、3---离线、4---未注册。

        :return: The status of this DevicePerformance.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this DevicePerformance.
        设备状态，0---在线、1---告警、3---离线、4---未注册。

        :param status: The status of this DevicePerformance.
        :type: int
        """
        if status is not None and status > 10:
            raise ValueError("Invalid value for `status`, must be a value less than or equal to `10`")
        if status is not None and status < 0:
            raise ValueError("Invalid value for `status`, must be a value greater than or equal to `0`")

        self._status = status

    @property
    def gis_lon(self):
        """
        Gets the gis_lon of this DevicePerformance.
        设备位置经度。

        :return: The gis_lon of this DevicePerformance.
        :rtype: float
        """
        return self._gis_lon

    @gis_lon.setter
    def gis_lon(self, gis_lon):
        """
        Sets the gis_lon of this DevicePerformance.
        设备位置经度。

        :param gis_lon: The gis_lon of this DevicePerformance.
        :type: float
        """
        if gis_lon is not None and gis_lon > 340282350000000000000000000000000000000:
            raise ValueError("Invalid value for `gis_lon`, must be a value less than or equal to `340282350000000000000000000000000000000`")
        if gis_lon is not None and gis_lon < 0:
            raise ValueError("Invalid value for `gis_lon`, must be a value greater than or equal to `0`")

        self._gis_lon = gis_lon

    @property
    def gis_lat(self):
        """
        Gets the gis_lat of this DevicePerformance.
        设备位置纬度。

        :return: The gis_lat of this DevicePerformance.
        :rtype: float
        """
        return self._gis_lat

    @gis_lat.setter
    def gis_lat(self, gis_lat):
        """
        Sets the gis_lat of this DevicePerformance.
        设备位置纬度。

        :param gis_lat: The gis_lat of this DevicePerformance.
        :type: float
        """
        if gis_lat is not None and gis_lat > 340282350000000000000000000000000000000:
            raise ValueError("Invalid value for `gis_lat`, must be a value less than or equal to `340282350000000000000000000000000000000`")
        if gis_lat is not None and gis_lat < 0:
            raise ValueError("Invalid value for `gis_lat`, must be a value greater than or equal to `0`")

        self._gis_lat = gis_lat

    @property
    def traffic(self):
        """
        Gets the traffic of this DevicePerformance.
        总流量，单位：字节。

        :return: The traffic of this DevicePerformance.
        :rtype: float
        """
        return self._traffic

    @traffic.setter
    def traffic(self, traffic):
        """
        Sets the traffic of this DevicePerformance.
        总流量，单位：字节。

        :param traffic: The traffic of this DevicePerformance.
        :type: float
        """
        if traffic is not None and traffic > 340282350000000000000000000000000000000:
            raise ValueError("Invalid value for `traffic`, must be a value less than or equal to `340282350000000000000000000000000000000`")
        if traffic is not None and traffic < 0:
            raise ValueError("Invalid value for `traffic`, must be a value greater than or equal to `0`")

        self._traffic = traffic

    @property
    def online_users(self):
        """
        Gets the online_users of this DevicePerformance.
        终端连接数。

        :return: The online_users of this DevicePerformance.
        :rtype: int
        """
        return self._online_users

    @online_users.setter
    def online_users(self, online_users):
        """
        Sets the online_users of this DevicePerformance.
        终端连接数。

        :param online_users: The online_users of this DevicePerformance.
        :type: int
        """
        if online_users is not None and online_users > 2147483647:
            raise ValueError("Invalid value for `online_users`, must be a value less than or equal to `2147483647`")
        if online_users is not None and online_users < 0:
            raise ValueError("Invalid value for `online_users`, must be a value greater than or equal to `0`")

        self._online_users = online_users

    @property
    def cpu_rate(self):
        """
        Gets the cpu_rate of this DevicePerformance.
        CPU利用率，单位：百分比。

        :return: The cpu_rate of this DevicePerformance.
        :rtype: int
        """
        return self._cpu_rate

    @cpu_rate.setter
    def cpu_rate(self, cpu_rate):
        """
        Sets the cpu_rate of this DevicePerformance.
        CPU利用率，单位：百分比。

        :param cpu_rate: The cpu_rate of this DevicePerformance.
        :type: int
        """
        if cpu_rate is not None and cpu_rate > 100:
            raise ValueError("Invalid value for `cpu_rate`, must be a value less than or equal to `100`")
        if cpu_rate is not None and cpu_rate < 0:
            raise ValueError("Invalid value for `cpu_rate`, must be a value greater than or equal to `0`")

        self._cpu_rate = cpu_rate

    @property
    def upward_speed(self):
        """
        Gets the upward_speed of this DevicePerformance.
        上行速率，单位：bps。

        :return: The upward_speed of this DevicePerformance.
        :rtype: float
        """
        return self._upward_speed

    @upward_speed.setter
    def upward_speed(self, upward_speed):
        """
        Sets the upward_speed of this DevicePerformance.
        上行速率，单位：bps。

        :param upward_speed: The upward_speed of this DevicePerformance.
        :type: float
        """
        if upward_speed is not None and upward_speed > 340282350000000000000000000000000000000:
            raise ValueError("Invalid value for `upward_speed`, must be a value less than or equal to `340282350000000000000000000000000000000`")
        if upward_speed is not None and upward_speed < 0:
            raise ValueError("Invalid value for `upward_speed`, must be a value greater than or equal to `0`")

        self._upward_speed = upward_speed

    @property
    def downward_speed(self):
        """
        Gets the downward_speed of this DevicePerformance.
        下行速率，单位：bps。

        :return: The downward_speed of this DevicePerformance.
        :rtype: float
        """
        return self._downward_speed

    @downward_speed.setter
    def downward_speed(self, downward_speed):
        """
        Sets the downward_speed of this DevicePerformance.
        下行速率，单位：bps。

        :param downward_speed: The downward_speed of this DevicePerformance.
        :type: float
        """
        if downward_speed is not None and downward_speed > 340282350000000000000000000000000000000:
            raise ValueError("Invalid value for `downward_speed`, must be a value less than or equal to `340282350000000000000000000000000000000`")
        if downward_speed is not None and downward_speed < 0:
            raise ValueError("Invalid value for `downward_speed`, must be a value greater than or equal to `0`")

        self._downward_speed = downward_speed

    @property
    def mac(self):
        """
        Gets the mac of this DevicePerformance.
        MAC地址。

        :return: The mac of this DevicePerformance.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """
        Sets the mac of this DevicePerformance.
        MAC地址。

        :param mac: The mac of this DevicePerformance.
        :type: str
        """
        if mac is not None and len(mac) > 256:
            raise ValueError("Invalid value for `mac`, length must be less than or equal to `256`")
        if mac is not None and len(mac) < 0:
            raise ValueError("Invalid value for `mac`, length must be greater than or equal to `0`")

        self._mac = mac

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DevicePerformance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
