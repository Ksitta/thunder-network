# coding: utf-8

"""
    交换机有线认证模板配置

    交换机有线认证模板，主要包括： · 创建站点下交换机有线认证模板配置 · 查询站点下交换机有线认证模板配置 · 修改站点下交换机有线认证模板配置 · 删除站点下交换机有线认证模板配置 · 修改站点交换机有线认证部分模板配置 · 增量绑站点交换机有线认证模板配置定 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LswAuthConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lsw_interface_infos': 'list[LswInterfaceInfo]',
        'lsw_auth_config_profile': 'LswAuthConfigProfile'
    }

    attribute_map = {
        'lsw_interface_infos': 'lswInterfaceInfos',
        'lsw_auth_config_profile': 'lswAuthConfigProfile'
    }

    def __init__(self, lsw_interface_infos=None, lsw_auth_config_profile=None):
        """
        LswAuthConfig - a model defined in Swagger
        """

        self._lsw_interface_infos = None
        self._lsw_auth_config_profile = None

        if lsw_interface_infos is not None:
          self.lsw_interface_infos = lsw_interface_infos
        if lsw_auth_config_profile is not None:
          self.lsw_auth_config_profile = lsw_auth_config_profile

    @property
    def lsw_interface_infos(self):
        """
        Gets the lsw_interface_infos of this LswAuthConfig.
        交换机接口信息。

        :return: The lsw_interface_infos of this LswAuthConfig.
        :rtype: list[LswInterfaceInfo]
        """
        return self._lsw_interface_infos

    @lsw_interface_infos.setter
    def lsw_interface_infos(self, lsw_interface_infos):
        """
        Sets the lsw_interface_infos of this LswAuthConfig.
        交换机接口信息。

        :param lsw_interface_infos: The lsw_interface_infos of this LswAuthConfig.
        :type: list[LswInterfaceInfo]
        """

        self._lsw_interface_infos = lsw_interface_infos

    @property
    def lsw_auth_config_profile(self):
        """
        Gets the lsw_auth_config_profile of this LswAuthConfig.

        :return: The lsw_auth_config_profile of this LswAuthConfig.
        :rtype: LswAuthConfigProfile
        """
        return self._lsw_auth_config_profile

    @lsw_auth_config_profile.setter
    def lsw_auth_config_profile(self, lsw_auth_config_profile):
        """
        Sets the lsw_auth_config_profile of this LswAuthConfig.

        :param lsw_auth_config_profile: The lsw_auth_config_profile of this LswAuthConfig.
        :type: LswAuthConfigProfile
        """

        self._lsw_auth_config_profile = lsw_auth_config_profile

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LswAuthConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
