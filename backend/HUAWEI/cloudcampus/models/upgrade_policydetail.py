# coding: utf-8

"""
    防火墙特征库升级

    防火墙特征库升级接口 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UpgradePolicydetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'signature_database_type': 'str',
        'version': 'str',
        'status': 'int',
        'last_upgrade_time': 'int',
        'next_upgrade_time': 'int'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'signature_database_type': 'signatureDatabaseType',
        'version': 'version',
        'status': 'status',
        'last_upgrade_time': 'lastUpgradeTime',
        'next_upgrade_time': 'nextUpgradeTime'
    }

    def __init__(self, device_id=None, signature_database_type=None, version=None, status=None, last_upgrade_time=None, next_upgrade_time=None):
        """
        UpgradePolicydetail - a model defined in Swagger
        """

        self._device_id = None
        self._signature_database_type = None
        self._version = None
        self._status = None
        self._last_upgrade_time = None
        self._next_upgrade_time = None

        if device_id is not None:
          self.device_id = device_id
        if signature_database_type is not None:
          self.signature_database_type = signature_database_type
        if version is not None:
          self.version = version
        if status is not None:
          self.status = status
        if last_upgrade_time is not None:
          self.last_upgrade_time = last_upgrade_time
        if next_upgrade_time is not None:
          self.next_upgrade_time = next_upgrade_time

    @property
    def device_id(self):
        """
        Gets the device_id of this UpgradePolicydetail.
        设备标识，UUID格式。

        :return: The device_id of this UpgradePolicydetail.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this UpgradePolicydetail.
        设备标识，UUID格式。

        :param device_id: The device_id of this UpgradePolicydetail.
        :type: str
        """
        if device_id is not None and len(device_id) > 36:
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `36`")
        if device_id is not None and len(device_id) < 36:
            raise ValueError("Invalid value for `device_id`, length must be greater than or equal to `36`")

        self._device_id = device_id

    @property
    def signature_database_type(self):
        """
        Gets the signature_database_type of this UpgradePolicydetail.
        设备特征库升级类型。

        :return: The signature_database_type of this UpgradePolicydetail.
        :rtype: str
        """
        return self._signature_database_type

    @signature_database_type.setter
    def signature_database_type(self, signature_database_type):
        """
        Sets the signature_database_type of this UpgradePolicydetail.
        设备特征库升级类型。

        :param signature_database_type: The signature_database_type of this UpgradePolicydetail.
        :type: str
        """

        self._signature_database_type = signature_database_type

    @property
    def version(self):
        """
        Gets the version of this UpgradePolicydetail.
        设备特征库版本。

        :return: The version of this UpgradePolicydetail.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this UpgradePolicydetail.
        设备特征库版本。

        :param version: The version of this UpgradePolicydetail.
        :type: str
        """
        if version is not None and len(version) > 36:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `36`")
        if version is not None and len(version) < 1:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")

        self._version = version

    @property
    def status(self):
        """
        Gets the status of this UpgradePolicydetail.
        设备特征库升级状态。取值如下：-1---升级失败，0---未配置，1---初始化 ，10---升级完成，11---升级中。

        :return: The status of this UpgradePolicydetail.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this UpgradePolicydetail.
        设备特征库升级状态。取值如下：-1---升级失败，0---未配置，1---初始化 ，10---升级完成，11---升级中。

        :param status: The status of this UpgradePolicydetail.
        :type: int
        """

        self._status = status

    @property
    def last_upgrade_time(self):
        """
        Gets the last_upgrade_time of this UpgradePolicydetail.
        上次特征库升级时间，UTC时间格式。

        :return: The last_upgrade_time of this UpgradePolicydetail.
        :rtype: int
        """
        return self._last_upgrade_time

    @last_upgrade_time.setter
    def last_upgrade_time(self, last_upgrade_time):
        """
        Sets the last_upgrade_time of this UpgradePolicydetail.
        上次特征库升级时间，UTC时间格式。

        :param last_upgrade_time: The last_upgrade_time of this UpgradePolicydetail.
        :type: int
        """
        if last_upgrade_time is not None and last_upgrade_time > 4102416000:
            raise ValueError("Invalid value for `last_upgrade_time`, must be a value less than or equal to `4102416000`")
        if last_upgrade_time is not None and last_upgrade_time < 0:
            raise ValueError("Invalid value for `last_upgrade_time`, must be a value greater than or equal to `0`")

        self._last_upgrade_time = last_upgrade_time

    @property
    def next_upgrade_time(self):
        """
        Gets the next_upgrade_time of this UpgradePolicydetail.
        下次特征库升级时间，UTC时间格式。

        :return: The next_upgrade_time of this UpgradePolicydetail.
        :rtype: int
        """
        return self._next_upgrade_time

    @next_upgrade_time.setter
    def next_upgrade_time(self, next_upgrade_time):
        """
        Sets the next_upgrade_time of this UpgradePolicydetail.
        下次特征库升级时间，UTC时间格式。

        :param next_upgrade_time: The next_upgrade_time of this UpgradePolicydetail.
        :type: int
        """
        if next_upgrade_time is not None and next_upgrade_time > 4102416000:
            raise ValueError("Invalid value for `next_upgrade_time`, must be a value less than or equal to `4102416000`")
        if next_upgrade_time is not None and next_upgrade_time < 0:
            raise ValueError("Invalid value for `next_upgrade_time`, must be a value greater than or equal to `0`")

        self._next_upgrade_time = next_upgrade_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UpgradePolicydetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
