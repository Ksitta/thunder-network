# coding: utf-8

"""
    AP页面推送策略

    AP页面推送策略开放API。 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PortalPageRuleOutputData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'priority': 'str',
        'name': 'str',
        'description': 'str',
        'ss_ids': 'list[str]',
        'push_mode': 'int',
        'third_page_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'priority': 'priority',
        'name': 'name',
        'description': 'description',
        'ss_ids': 'ssIds',
        'push_mode': 'pushMode',
        'third_page_url': 'thirdPageUrl'
    }

    def __init__(self, id=None, priority=None, name=None, description=None, ss_ids=None, push_mode=None, third_page_url=None):
        """
        PortalPageRuleOutputData - a model defined in Swagger
        """

        self._id = None
        self._priority = None
        self._name = None
        self._description = None
        self._ss_ids = None
        self._push_mode = None
        self._third_page_url = None

        if id is not None:
          self.id = id
        if priority is not None:
          self.priority = priority
        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if ss_ids is not None:
          self.ss_ids = ss_ids
        if push_mode is not None:
          self.push_mode = push_mode
        if third_page_url is not None:
          self.third_page_url = third_page_url

    @property
    def id(self):
        """
        Gets the id of this PortalPageRuleOutputData.
        ID，格式为UUID。

        :return: The id of this PortalPageRuleOutputData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PortalPageRuleOutputData.
        ID，格式为UUID。

        :param id: The id of this PortalPageRuleOutputData.
        :type: str
        """

        self._id = id

    @property
    def priority(self):
        """
        Gets the priority of this PortalPageRuleOutputData.
        优先级。值越小优先级越高。

        :return: The priority of this PortalPageRuleOutputData.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this PortalPageRuleOutputData.
        优先级。值越小优先级越高。

        :param priority: The priority of this PortalPageRuleOutputData.
        :type: str
        """
        if priority is not None and len(priority) > 99:
            raise ValueError("Invalid value for `priority`, length must be less than or equal to `99`")
        if priority is not None and len(priority) < 1:
            raise ValueError("Invalid value for `priority`, length must be greater than or equal to `1`")

        self._priority = priority

    @property
    def name(self):
        """
        Gets the name of this PortalPageRuleOutputData.
        名称。

        :return: The name of this PortalPageRuleOutputData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PortalPageRuleOutputData.
        名称。

        :param name: The name of this PortalPageRuleOutputData.
        :type: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this PortalPageRuleOutputData.
        描述。

        :return: The description of this PortalPageRuleOutputData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PortalPageRuleOutputData.
        描述。

        :param description: The description of this PortalPageRuleOutputData.
        :type: str
        """
        if description is not None and len(description) > 512:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def ss_ids(self):
        """
        Gets the ss_ids of this PortalPageRuleOutputData.
        SSID列表，如果参数为空，则页面推送策略适用于站点下所有SSID，格式为UUID。

        :return: The ss_ids of this PortalPageRuleOutputData.
        :rtype: list[str]
        """
        return self._ss_ids

    @ss_ids.setter
    def ss_ids(self, ss_ids):
        """
        Sets the ss_ids of this PortalPageRuleOutputData.
        SSID列表，如果参数为空，则页面推送策略适用于站点下所有SSID，格式为UUID。

        :param ss_ids: The ss_ids of this PortalPageRuleOutputData.
        :type: list[str]
        """

        self._ss_ids = ss_ids

    @property
    def push_mode(self):
        """
        Gets the push_mode of this PortalPageRuleOutputData.
        推送方式。

        :return: The push_mode of this PortalPageRuleOutputData.
        :rtype: int
        """
        return self._push_mode

    @push_mode.setter
    def push_mode(self, push_mode):
        """
        Sets the push_mode of this PortalPageRuleOutputData.
        推送方式。

        :param push_mode: The push_mode of this PortalPageRuleOutputData.
        :type: int
        """

        self._push_mode = push_mode

    @property
    def third_page_url(self):
        """
        Gets the third_page_url of this PortalPageRuleOutputData.
        第三方推送URL。

        :return: The third_page_url of this PortalPageRuleOutputData.
        :rtype: str
        """
        return self._third_page_url

    @third_page_url.setter
    def third_page_url(self, third_page_url):
        """
        Sets the third_page_url of this PortalPageRuleOutputData.
        第三方推送URL。

        :param third_page_url: The third_page_url of this PortalPageRuleOutputData.
        :type: str
        """
        if third_page_url is not None and len(third_page_url) > 512:
            raise ValueError("Invalid value for `third_page_url`, length must be less than or equal to `512`")
        if third_page_url is not None and len(third_page_url) < 1:
            raise ValueError("Invalid value for `third_page_url`, length must be greater than or equal to `1`")

        self._third_page_url = third_page_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PortalPageRuleOutputData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
