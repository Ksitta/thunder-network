# coding: utf-8

"""
    室内地图信息查询

    室内地图第三方北向接口。 · 查询站点中所有楼栋基本信息 · 查询楼栋中所有楼层基本信息 · 查询楼栋中所有楼层详细信息 · 查询楼栋中楼层和设备布放信息 · 查询楼栋中楼层已布放设备详细信息 · 查询楼层已布放设备位置信息 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceBaseInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'status': 'status'
    }

    def __init__(self, id=None, name=None, status=None):
        """
        DeviceBaseInfo - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._status = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if status is not None:
          self.status = status

    @property
    def id(self):
        """
        Gets the id of this DeviceBaseInfo.
        设备ID，格式UUID。

        :return: The id of this DeviceBaseInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeviceBaseInfo.
        设备ID，格式UUID。

        :param id: The id of this DeviceBaseInfo.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this DeviceBaseInfo.
        设备名称。

        :return: The name of this DeviceBaseInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DeviceBaseInfo.
        设备名称。

        :param name: The name of this DeviceBaseInfo.
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """
        Gets the status of this DeviceBaseInfo.
        设备状态 0: 正常 1: 告警  3: 离线 4: 未注册 

        :return: The status of this DeviceBaseInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this DeviceBaseInfo.
        设备状态 0: 正常 1: 告警  3: 离线 4: 未注册 

        :param status: The status of this DeviceBaseInfo.
        :type: str
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceBaseInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
