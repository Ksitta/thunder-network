# coding: utf-8

"""
    防火墙设备NAT配置

    防火墙设备NAT配置第三方接口。

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceFwNatInfoDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'conversion_mode': 'int',
        'destination_mode': 'str',
        'priority': 'int',
        'old_source_ip': 'str',
        'old_destination_ip': 'str',
        'source_convert': 'int',
        'new_source_ip_group': 'list[str]',
        'new_destination_ip_group': 'list[str]',
        'destination_port': 'str',
        'service_list': 'list[ServiceListInfoDto]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'conversion_mode': 'conversionMode',
        'destination_mode': 'destinationMode',
        'priority': 'priority',
        'old_source_ip': 'oldSourceIp',
        'old_destination_ip': 'oldDestinationIp',
        'source_convert': 'sourceConvert',
        'new_source_ip_group': 'newSourceIpGroup',
        'new_destination_ip_group': 'newDestinationIpGroup',
        'destination_port': 'destinationPort',
        'service_list': 'serviceList'
    }

    def __init__(self, id=None, name=None, description=None, conversion_mode=None, destination_mode=None, priority=None, old_source_ip=None, old_destination_ip=None, source_convert=None, new_source_ip_group=None, new_destination_ip_group=None, destination_port=None, service_list=None):
        """
        DeviceFwNatInfoDto - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._description = None
        self._conversion_mode = None
        self._destination_mode = None
        self._priority = None
        self._old_source_ip = None
        self._old_destination_ip = None
        self._source_convert = None
        self._new_source_ip_group = None
        self._new_destination_ip_group = None
        self._destination_port = None
        self._service_list = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if conversion_mode is not None:
          self.conversion_mode = conversion_mode
        if destination_mode is not None:
          self.destination_mode = destination_mode
        if priority is not None:
          self.priority = priority
        if old_source_ip is not None:
          self.old_source_ip = old_source_ip
        if old_destination_ip is not None:
          self.old_destination_ip = old_destination_ip
        if source_convert is not None:
          self.source_convert = source_convert
        if new_source_ip_group is not None:
          self.new_source_ip_group = new_source_ip_group
        if new_destination_ip_group is not None:
          self.new_destination_ip_group = new_destination_ip_group
        if destination_port is not None:
          self.destination_port = destination_port
        if service_list is not None:
          self.service_list = service_list

    @property
    def id(self):
        """
        Gets the id of this DeviceFwNatInfoDto.
        NAT策略ID。创建时不能填写，修改时必须填写。

        :return: The id of this DeviceFwNatInfoDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeviceFwNatInfoDto.
        NAT策略ID。创建时不能填写，修改时必须填写。

        :param id: The id of this DeviceFwNatInfoDto.
        :type: str
        """
        if id is not None and len(id) > 32:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `32`")
        if id is not None and len(id) < 0:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this DeviceFwNatInfoDto.
        名称，不能包含?、双引号和空格。

        :return: The name of this DeviceFwNatInfoDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DeviceFwNatInfoDto.
        名称，不能包含?、双引号和空格。

        :param name: The name of this DeviceFwNatInfoDto.
        :type: str
        """
        if name is not None and len(name) > 30:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `30`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this DeviceFwNatInfoDto.
        描述。

        :return: The description of this DeviceFwNatInfoDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DeviceFwNatInfoDto.
        描述。

        :param description: The description of this DeviceFwNatInfoDto.
        :type: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def conversion_mode(self):
        """
        Gets the conversion_mode of this DeviceFwNatInfoDto.
        转换模式（不允许修改）。取值范围：1---仅转换源地址。2---仅转换目的地址。3---源地址和目的地址同时转换。

        :return: The conversion_mode of this DeviceFwNatInfoDto.
        :rtype: int
        """
        return self._conversion_mode

    @conversion_mode.setter
    def conversion_mode(self, conversion_mode):
        """
        Sets the conversion_mode of this DeviceFwNatInfoDto.
        转换模式（不允许修改）。取值范围：1---仅转换源地址。2---仅转换目的地址。3---源地址和目的地址同时转换。

        :param conversion_mode: The conversion_mode of this DeviceFwNatInfoDto.
        :type: int
        """
        if conversion_mode is not None and conversion_mode > 3:
            raise ValueError("Invalid value for `conversion_mode`, must be a value less than or equal to `3`")
        if conversion_mode is not None and conversion_mode < 1:
            raise ValueError("Invalid value for `conversion_mode`, must be a value greater than or equal to `1`")

        self._conversion_mode = conversion_mode

    @property
    def destination_mode(self):
        """
        Gets the destination_mode of this DeviceFwNatInfoDto.
        目的地址转换方式。取值范围：address-to-address---转换前目的地址（oldDestinationIp）和转换后目的地址（newDestinationIpGroup）数量一致。port-to-address---转换前目的地址（oldDestinationIp）为单个ip，转换后目的端口（destinationPort）为单个端口，转换前服务目的端口（destPort）与转换后目的地址（newDestinationIpGroup）数量一致。port-to-port---转换前目的地址（oldDestinationIp）和转换后目的地址（newDestinationIpGroup）都为单个ip，转换前服务目的端口（destPort）和转换后目的端口（destinationPort）数量保持一致。address-to-port---转换前目的地址（oldDestinationIp）和转换后目的端口（destinationPort）数量一致，转换前服务目的端口（destPort）为单个端口，转换后目的地址（newDestinationIpGroup）为单个ip。

        :return: The destination_mode of this DeviceFwNatInfoDto.
        :rtype: str
        """
        return self._destination_mode

    @destination_mode.setter
    def destination_mode(self, destination_mode):
        """
        Sets the destination_mode of this DeviceFwNatInfoDto.
        目的地址转换方式。取值范围：address-to-address---转换前目的地址（oldDestinationIp）和转换后目的地址（newDestinationIpGroup）数量一致。port-to-address---转换前目的地址（oldDestinationIp）为单个ip，转换后目的端口（destinationPort）为单个端口，转换前服务目的端口（destPort）与转换后目的地址（newDestinationIpGroup）数量一致。port-to-port---转换前目的地址（oldDestinationIp）和转换后目的地址（newDestinationIpGroup）都为单个ip，转换前服务目的端口（destPort）和转换后目的端口（destinationPort）数量保持一致。address-to-port---转换前目的地址（oldDestinationIp）和转换后目的端口（destinationPort）数量一致，转换前服务目的端口（destPort）为单个端口，转换后目的地址（newDestinationIpGroup）为单个ip。

        :param destination_mode: The destination_mode of this DeviceFwNatInfoDto.
        :type: str
        """
        if destination_mode is not None and len(destination_mode) > 20:
            raise ValueError("Invalid value for `destination_mode`, length must be less than or equal to `20`")
        if destination_mode is not None and len(destination_mode) < 0:
            raise ValueError("Invalid value for `destination_mode`, length must be greater than or equal to `0`")

        self._destination_mode = destination_mode

    @property
    def priority(self):
        """
        Gets the priority of this DeviceFwNatInfoDto.
        优先级。取值越小优先等级越高。

        :return: The priority of this DeviceFwNatInfoDto.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this DeviceFwNatInfoDto.
        优先级。取值越小优先等级越高。

        :param priority: The priority of this DeviceFwNatInfoDto.
        :type: int
        """
        if priority is not None and priority > 100:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `100`")
        if priority is not None and priority < 1:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")

        self._priority = priority

    @property
    def old_source_ip(self):
        """
        Gets the old_source_ip of this DeviceFwNatInfoDto.
        转换前源地址。转换模式（conversionMode）为1或3时必填，两种形式：1.1.1.1-1.1.1.2或10.2.0.6/24。

        :return: The old_source_ip of this DeviceFwNatInfoDto.
        :rtype: str
        """
        return self._old_source_ip

    @old_source_ip.setter
    def old_source_ip(self, old_source_ip):
        """
        Sets the old_source_ip of this DeviceFwNatInfoDto.
        转换前源地址。转换模式（conversionMode）为1或3时必填，两种形式：1.1.1.1-1.1.1.2或10.2.0.6/24。

        :param old_source_ip: The old_source_ip of this DeviceFwNatInfoDto.
        :type: str
        """
        if old_source_ip is not None and len(old_source_ip) > 64:
            raise ValueError("Invalid value for `old_source_ip`, length must be less than or equal to `64`")
        if old_source_ip is not None and len(old_source_ip) < 0:
            raise ValueError("Invalid value for `old_source_ip`, length must be greater than or equal to `0`")

        self._old_source_ip = old_source_ip

    @property
    def old_destination_ip(self):
        """
        Gets the old_destination_ip of this DeviceFwNatInfoDto.
        转换前目的地址。转换模式（conversionMode）为1或3时必填，两种形式：1.1.1.1-1.1.1.2或1.1.1.10。

        :return: The old_destination_ip of this DeviceFwNatInfoDto.
        :rtype: str
        """
        return self._old_destination_ip

    @old_destination_ip.setter
    def old_destination_ip(self, old_destination_ip):
        """
        Sets the old_destination_ip of this DeviceFwNatInfoDto.
        转换前目的地址。转换模式（conversionMode）为1或3时必填，两种形式：1.1.1.1-1.1.1.2或1.1.1.10。

        :param old_destination_ip: The old_destination_ip of this DeviceFwNatInfoDto.
        :type: str
        """
        if old_destination_ip is not None and len(old_destination_ip) > 64:
            raise ValueError("Invalid value for `old_destination_ip`, length must be less than or equal to `64`")
        if old_destination_ip is not None and len(old_destination_ip) < 0:
            raise ValueError("Invalid value for `old_destination_ip`, length must be greater than or equal to `0`")

        self._old_destination_ip = old_destination_ip

    @property
    def source_convert(self):
        """
        Gets the source_convert of this DeviceFwNatInfoDto.
        源地址转换为。转换模式（conversionMode）为1或3时必填，取值范围：0---出接口地址。1---地址池中地址。

        :return: The source_convert of this DeviceFwNatInfoDto.
        :rtype: int
        """
        return self._source_convert

    @source_convert.setter
    def source_convert(self, source_convert):
        """
        Sets the source_convert of this DeviceFwNatInfoDto.
        源地址转换为。转换模式（conversionMode）为1或3时必填，取值范围：0---出接口地址。1---地址池中地址。

        :param source_convert: The source_convert of this DeviceFwNatInfoDto.
        :type: int
        """
        if source_convert is not None and source_convert > 1:
            raise ValueError("Invalid value for `source_convert`, must be a value less than or equal to `1`")
        if source_convert is not None and source_convert < 0:
            raise ValueError("Invalid value for `source_convert`, must be a value greater than or equal to `0`")

        self._source_convert = source_convert

    @property
    def new_source_ip_group(self):
        """
        Gets the new_source_ip_group of this DeviceFwNatInfoDto.
        转换后源地址池列表。转换模式（conversionMode）为1或3，并且源地址转化为（sourceConvert）1时必填。

        :return: The new_source_ip_group of this DeviceFwNatInfoDto.
        :rtype: list[str]
        """
        return self._new_source_ip_group

    @new_source_ip_group.setter
    def new_source_ip_group(self, new_source_ip_group):
        """
        Sets the new_source_ip_group of this DeviceFwNatInfoDto.
        转换后源地址池列表。转换模式（conversionMode）为1或3，并且源地址转化为（sourceConvert）1时必填。

        :param new_source_ip_group: The new_source_ip_group of this DeviceFwNatInfoDto.
        :type: list[str]
        """

        self._new_source_ip_group = new_source_ip_group

    @property
    def new_destination_ip_group(self):
        """
        Gets the new_destination_ip_group of this DeviceFwNatInfoDto.
        转换后目的地址池列表。转换模式（conversionMode）为2或3时必填。

        :return: The new_destination_ip_group of this DeviceFwNatInfoDto.
        :rtype: list[str]
        """
        return self._new_destination_ip_group

    @new_destination_ip_group.setter
    def new_destination_ip_group(self, new_destination_ip_group):
        """
        Sets the new_destination_ip_group of this DeviceFwNatInfoDto.
        转换后目的地址池列表。转换模式（conversionMode）为2或3时必填。

        :param new_destination_ip_group: The new_destination_ip_group of this DeviceFwNatInfoDto.
        :type: list[str]
        """

        self._new_destination_ip_group = new_destination_ip_group

    @property
    def destination_port(self):
        """
        Gets the destination_port of this DeviceFwNatInfoDto.
        目的端口。转换模式（conversionMode）为2或3，并且目的地址转换方式（destinationMode）为port-to-address或port-to-port或address-to-port时必填。

        :return: The destination_port of this DeviceFwNatInfoDto.
        :rtype: str
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """
        Sets the destination_port of this DeviceFwNatInfoDto.
        目的端口。转换模式（conversionMode）为2或3，并且目的地址转换方式（destinationMode）为port-to-address或port-to-port或address-to-port时必填。

        :param destination_port: The destination_port of this DeviceFwNatInfoDto.
        :type: str
        """
        if destination_port is not None and len(destination_port) > 64:
            raise ValueError("Invalid value for `destination_port`, length must be less than or equal to `64`")
        if destination_port is not None and len(destination_port) < 0:
            raise ValueError("Invalid value for `destination_port`, length must be greater than or equal to `0`")

        self._destination_port = destination_port

    @property
    def service_list(self):
        """
        Gets the service_list of this DeviceFwNatInfoDto.
        服务配置信息列表。转换模式（conversionMode）为2或3，并且目的地址转换方式（destinationMode）为port-to-address或port-to-port或address-to-port时必填。

        :return: The service_list of this DeviceFwNatInfoDto.
        :rtype: list[ServiceListInfoDto]
        """
        return self._service_list

    @service_list.setter
    def service_list(self, service_list):
        """
        Sets the service_list of this DeviceFwNatInfoDto.
        服务配置信息列表。转换模式（conversionMode）为2或3，并且目的地址转换方式（destinationMode）为port-to-address或port-to-port或address-to-port时必填。

        :param service_list: The service_list of this DeviceFwNatInfoDto.
        :type: list[ServiceListInfoDto]
        """

        self._service_list = service_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceFwNatInfoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
