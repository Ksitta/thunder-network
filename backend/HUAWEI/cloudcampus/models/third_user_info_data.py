# coding: utf-8

"""
    终端用户管理

    终端用户管理开放API。 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ThirdUserInfoData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_mac': 'str',
        'device_esn': 'str',
        'terminal_ip_v4': 'str',
        'terminal_ip_v6': 'str',
        'terminal_mac': 'str',
        'user_name': 'str',
        'psessionid': 'str',
        'node_ip': 'str'
    }

    attribute_map = {
        'device_mac': 'deviceMac',
        'device_esn': 'deviceEsn',
        'terminal_ip_v4': 'terminalIpV4',
        'terminal_ip_v6': 'terminalIpV6',
        'terminal_mac': 'terminalMac',
        'user_name': 'userName',
        'psessionid': 'psessionid',
        'node_ip': 'nodeIp'
    }

    def __init__(self, device_mac=None, device_esn=None, terminal_ip_v4=None, terminal_ip_v6=None, terminal_mac=None, user_name=None, psessionid=None, node_ip=None):
        """
        ThirdUserInfoData - a model defined in Swagger
        """

        self._device_mac = None
        self._device_esn = None
        self._terminal_ip_v4 = None
        self._terminal_ip_v6 = None
        self._terminal_mac = None
        self._user_name = None
        self._psessionid = None
        self._node_ip = None

        if device_mac is not None:
          self.device_mac = device_mac
        if device_esn is not None:
          self.device_esn = device_esn
        if terminal_ip_v4 is not None:
          self.terminal_ip_v4 = terminal_ip_v4
        if terminal_ip_v6 is not None:
          self.terminal_ip_v6 = terminal_ip_v6
        if terminal_mac is not None:
          self.terminal_mac = terminal_mac
        if user_name is not None:
          self.user_name = user_name
        if psessionid is not None:
          self.psessionid = psessionid
        if node_ip is not None:
          self.node_ip = node_ip

    @property
    def device_mac(self):
        """
        Gets the device_mac of this ThirdUserInfoData.
        设备MAC地址，MAC和ESN至少有一个必填。

        :return: The device_mac of this ThirdUserInfoData.
        :rtype: str
        """
        return self._device_mac

    @device_mac.setter
    def device_mac(self, device_mac):
        """
        Sets the device_mac of this ThirdUserInfoData.
        设备MAC地址，MAC和ESN至少有一个必填。

        :param device_mac: The device_mac of this ThirdUserInfoData.
        :type: str
        """

        self._device_mac = device_mac

    @property
    def device_esn(self):
        """
        Gets the device_esn of this ThirdUserInfoData.
        设备ESN地址，MAC和ESN至少有一个必填。

        :return: The device_esn of this ThirdUserInfoData.
        :rtype: str
        """
        return self._device_esn

    @device_esn.setter
    def device_esn(self, device_esn):
        """
        Sets the device_esn of this ThirdUserInfoData.
        设备ESN地址，MAC和ESN至少有一个必填。

        :param device_esn: The device_esn of this ThirdUserInfoData.
        :type: str
        """

        self._device_esn = device_esn

    @property
    def terminal_ip_v4(self):
        """
        Gets the terminal_ip_v4 of this ThirdUserInfoData.
        终端IPV4地址，terminalIpV4和terminalIpV6有且只有一个。

        :return: The terminal_ip_v4 of this ThirdUserInfoData.
        :rtype: str
        """
        return self._terminal_ip_v4

    @terminal_ip_v4.setter
    def terminal_ip_v4(self, terminal_ip_v4):
        """
        Sets the terminal_ip_v4 of this ThirdUserInfoData.
        终端IPV4地址，terminalIpV4和terminalIpV6有且只有一个。

        :param terminal_ip_v4: The terminal_ip_v4 of this ThirdUserInfoData.
        :type: str
        """

        self._terminal_ip_v4 = terminal_ip_v4

    @property
    def terminal_ip_v6(self):
        """
        Gets the terminal_ip_v6 of this ThirdUserInfoData.
        终端IPV6地址，terminalIpV4和terminalIpV6有且只有一个。

        :return: The terminal_ip_v6 of this ThirdUserInfoData.
        :rtype: str
        """
        return self._terminal_ip_v6

    @terminal_ip_v6.setter
    def terminal_ip_v6(self, terminal_ip_v6):
        """
        Sets the terminal_ip_v6 of this ThirdUserInfoData.
        终端IPV6地址，terminalIpV4和terminalIpV6有且只有一个。

        :param terminal_ip_v6: The terminal_ip_v6 of this ThirdUserInfoData.
        :type: str
        """

        self._terminal_ip_v6 = terminal_ip_v6

    @property
    def terminal_mac(self):
        """
        Gets the terminal_mac of this ThirdUserInfoData.
        终端MAC。

        :return: The terminal_mac of this ThirdUserInfoData.
        :rtype: str
        """
        return self._terminal_mac

    @terminal_mac.setter
    def terminal_mac(self, terminal_mac):
        """
        Sets the terminal_mac of this ThirdUserInfoData.
        终端MAC。

        :param terminal_mac: The terminal_mac of this ThirdUserInfoData.
        :type: str
        """

        self._terminal_mac = terminal_mac

    @property
    def user_name(self):
        """
        Gets the user_name of this ThirdUserInfoData.
        用户名。

        :return: The user_name of this ThirdUserInfoData.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this ThirdUserInfoData.
        用户名。

        :param user_name: The user_name of this ThirdUserInfoData.
        :type: str
        """

        self._user_name = user_name

    @property
    def psessionid(self):
        """
        Gets the psessionid of this ThirdUserInfoData.
        会话ID。

        :return: The psessionid of this ThirdUserInfoData.
        :rtype: str
        """
        return self._psessionid

    @psessionid.setter
    def psessionid(self, psessionid):
        """
        Sets the psessionid of this ThirdUserInfoData.
        会话ID。

        :param psessionid: The psessionid of this ThirdUserInfoData.
        :type: str
        """

        self._psessionid = psessionid

    @property
    def node_ip(self):
        """
        Gets the node_ip of this ThirdUserInfoData.
        授权节点地址。

        :return: The node_ip of this ThirdUserInfoData.
        :rtype: str
        """
        return self._node_ip

    @node_ip.setter
    def node_ip(self, node_ip):
        """
        Sets the node_ip of this ThirdUserInfoData.
        授权节点地址。

        :param node_ip: The node_ip of this ThirdUserInfoData.
        :type: str
        """

        self._node_ip = node_ip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ThirdUserInfoData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
