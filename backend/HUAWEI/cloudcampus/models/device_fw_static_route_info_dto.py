# coding: utf-8

"""
    防火墙设备静态路由配置

    防火墙设备静态路由配置第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceFwStaticRouteInfoDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mask': 'int',
        'destination_prefix_ip': 'str',
        'next_hop_address': 'str',
        'next_interface': 'str',
        'track_iplink_id': 'str',
        'preference': 'int',
        'id': 'str'
    }

    attribute_map = {
        'mask': 'mask',
        'destination_prefix_ip': 'destinationPrefixIp',
        'next_hop_address': 'nextHopAddress',
        'next_interface': 'nextInterface',
        'track_iplink_id': 'trackIplinkId',
        'preference': 'preference',
        'id': 'id'
    }

    def __init__(self, mask=None, destination_prefix_ip=None, next_hop_address=None, next_interface=None, track_iplink_id=None, preference=None, id=None):
        """
        DeviceFwStaticRouteInfoDto - a model defined in Swagger
        """

        self._mask = None
        self._destination_prefix_ip = None
        self._next_hop_address = None
        self._next_interface = None
        self._track_iplink_id = None
        self._preference = None
        self._id = None

        if mask is not None:
          self.mask = mask
        if destination_prefix_ip is not None:
          self.destination_prefix_ip = destination_prefix_ip
        if next_hop_address is not None:
          self.next_hop_address = next_hop_address
        if next_interface is not None:
          self.next_interface = next_interface
        if track_iplink_id is not None:
          self.track_iplink_id = track_iplink_id
        if preference is not None:
          self.preference = preference
        if id is not None:
          self.id = id

    @property
    def mask(self):
        """
        Gets the mask of this DeviceFwStaticRouteInfoDto.
        掩码。

        :return: The mask of this DeviceFwStaticRouteInfoDto.
        :rtype: int
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """
        Sets the mask of this DeviceFwStaticRouteInfoDto.
        掩码。

        :param mask: The mask of this DeviceFwStaticRouteInfoDto.
        :type: int
        """
        if mask is not None and mask > 32:
            raise ValueError("Invalid value for `mask`, must be a value less than or equal to `32`")
        if mask is not None and mask < 0:
            raise ValueError("Invalid value for `mask`, must be a value greater than or equal to `0`")

        self._mask = mask

    @property
    def destination_prefix_ip(self):
        """
        Gets the destination_prefix_ip of this DeviceFwStaticRouteInfoDto.
        目的地址，必须是合法的IPv4地址，以127或者224~255开头的IP地址为非法IP地址。

        :return: The destination_prefix_ip of this DeviceFwStaticRouteInfoDto.
        :rtype: str
        """
        return self._destination_prefix_ip

    @destination_prefix_ip.setter
    def destination_prefix_ip(self, destination_prefix_ip):
        """
        Sets the destination_prefix_ip of this DeviceFwStaticRouteInfoDto.
        目的地址，必须是合法的IPv4地址，以127或者224~255开头的IP地址为非法IP地址。

        :param destination_prefix_ip: The destination_prefix_ip of this DeviceFwStaticRouteInfoDto.
        :type: str
        """
        if destination_prefix_ip is not None and len(destination_prefix_ip) > 15:
            raise ValueError("Invalid value for `destination_prefix_ip`, length must be less than or equal to `15`")
        if destination_prefix_ip is not None and len(destination_prefix_ip) < 1:
            raise ValueError("Invalid value for `destination_prefix_ip`, length must be greater than or equal to `1`")

        self._destination_prefix_ip = destination_prefix_ip

    @property
    def next_hop_address(self):
        """
        Gets the next_hop_address of this DeviceFwStaticRouteInfoDto.
        下一跳地址，必须是合法的IPv4地址，以127或者224~255开头的IP地址为非法IP地址。当nextInterface为空时，nextHopAddress必填。

        :return: The next_hop_address of this DeviceFwStaticRouteInfoDto.
        :rtype: str
        """
        return self._next_hop_address

    @next_hop_address.setter
    def next_hop_address(self, next_hop_address):
        """
        Sets the next_hop_address of this DeviceFwStaticRouteInfoDto.
        下一跳地址，必须是合法的IPv4地址，以127或者224~255开头的IP地址为非法IP地址。当nextInterface为空时，nextHopAddress必填。

        :param next_hop_address: The next_hop_address of this DeviceFwStaticRouteInfoDto.
        :type: str
        """
        if next_hop_address is not None and len(next_hop_address) > 15:
            raise ValueError("Invalid value for `next_hop_address`, length must be less than or equal to `15`")
        if next_hop_address is not None and len(next_hop_address) < 0:
            raise ValueError("Invalid value for `next_hop_address`, length must be greater than or equal to `0`")

        self._next_hop_address = next_hop_address

    @property
    def next_interface(self):
        """
        Gets the next_interface of this DeviceFwStaticRouteInfoDto.
        设备出接口。当nextHopAddress为空时，nextInterface必填。

        :return: The next_interface of this DeviceFwStaticRouteInfoDto.
        :rtype: str
        """
        return self._next_interface

    @next_interface.setter
    def next_interface(self, next_interface):
        """
        Sets the next_interface of this DeviceFwStaticRouteInfoDto.
        设备出接口。当nextHopAddress为空时，nextInterface必填。

        :param next_interface: The next_interface of this DeviceFwStaticRouteInfoDto.
        :type: str
        """
        if next_interface is not None and len(next_interface) > 32:
            raise ValueError("Invalid value for `next_interface`, length must be less than or equal to `32`")
        if next_interface is not None and len(next_interface) < 0:
            raise ValueError("Invalid value for `next_interface`, length must be greater than or equal to `0`")

        self._next_interface = next_interface

    @property
    def track_iplink_id(self):
        """
        Gets the track_iplink_id of this DeviceFwStaticRouteInfoDto.
        IP链接ID。

        :return: The track_iplink_id of this DeviceFwStaticRouteInfoDto.
        :rtype: str
        """
        return self._track_iplink_id

    @track_iplink_id.setter
    def track_iplink_id(self, track_iplink_id):
        """
        Sets the track_iplink_id of this DeviceFwStaticRouteInfoDto.
        IP链接ID。

        :param track_iplink_id: The track_iplink_id of this DeviceFwStaticRouteInfoDto.
        :type: str
        """
        if track_iplink_id is not None and len(track_iplink_id) > 32:
            raise ValueError("Invalid value for `track_iplink_id`, length must be less than or equal to `32`")
        if track_iplink_id is not None and len(track_iplink_id) < 0:
            raise ValueError("Invalid value for `track_iplink_id`, length must be greater than or equal to `0`")

        self._track_iplink_id = track_iplink_id

    @property
    def preference(self):
        """
        Gets the preference of this DeviceFwStaticRouteInfoDto.
        优先级。取值越小，优先等级越高。

        :return: The preference of this DeviceFwStaticRouteInfoDto.
        :rtype: int
        """
        return self._preference

    @preference.setter
    def preference(self, preference):
        """
        Sets the preference of this DeviceFwStaticRouteInfoDto.
        优先级。取值越小，优先等级越高。

        :param preference: The preference of this DeviceFwStaticRouteInfoDto.
        :type: int
        """
        if preference is not None and preference > 255:
            raise ValueError("Invalid value for `preference`, must be a value less than or equal to `255`")
        if preference is not None and preference < 1:
            raise ValueError("Invalid value for `preference`, must be a value greater than or equal to `1`")

        self._preference = preference

    @property
    def id(self):
        """
        Gets the id of this DeviceFwStaticRouteInfoDto.
        防火墙静态路由ID。

        :return: The id of this DeviceFwStaticRouteInfoDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeviceFwStaticRouteInfoDto.
        防火墙静态路由ID。

        :param id: The id of this DeviceFwStaticRouteInfoDto.
        :type: str
        """
        if id is not None and len(id) > 32:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `32`")
        if id is not None and len(id) < 0:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceFwStaticRouteInfoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
