# coding: utf-8

"""
    时间配置

    时间配置北向接口，主要特性： · 查询时区资源 · 查询时间配置信息（包括时区、夏令时和NTP） · 修改时间配置（包括时区、夏令时和NTP） . 查询站点模板时间配置信息（包括时区、夏令时和NTP） . 修改站点模板时间配置信息（包括时区、夏令时和NTP） 

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TimezoneDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name_cn': 'str',
        'name_en': 'str',
        'timezone_utc_offset': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name_cn': 'nameCn',
        'name_en': 'nameEn',
        'timezone_utc_offset': 'timezoneUtcOffset'
    }

    def __init__(self, id=None, name_cn=None, name_en=None, timezone_utc_offset=None):
        """
        TimezoneDto - a model defined in Swagger
        """

        self._id = None
        self._name_cn = None
        self._name_en = None
        self._timezone_utc_offset = None

        if id is not None:
          self.id = id
        if name_cn is not None:
          self.name_cn = name_cn
        if name_en is not None:
          self.name_en = name_en
        if timezone_utc_offset is not None:
          self.timezone_utc_offset = timezone_utc_offset

    @property
    def id(self):
        """
        Gets the id of this TimezoneDto.
        时区ID，字符串格式为UUID。

        :return: The id of this TimezoneDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TimezoneDto.
        时区ID，字符串格式为UUID。

        :param id: The id of this TimezoneDto.
        :type: str
        """

        self._id = id

    @property
    def name_cn(self):
        """
        Gets the name_cn of this TimezoneDto.
        时区名称（中文）

        :return: The name_cn of this TimezoneDto.
        :rtype: str
        """
        return self._name_cn

    @name_cn.setter
    def name_cn(self, name_cn):
        """
        Sets the name_cn of this TimezoneDto.
        时区名称（中文）

        :param name_cn: The name_cn of this TimezoneDto.
        :type: str
        """
        if name_cn is not None and len(name_cn) > 128:
            raise ValueError("Invalid value for `name_cn`, length must be less than or equal to `128`")
        if name_cn is not None and len(name_cn) < 1:
            raise ValueError("Invalid value for `name_cn`, length must be greater than or equal to `1`")

        self._name_cn = name_cn

    @property
    def name_en(self):
        """
        Gets the name_en of this TimezoneDto.
        时区名称（英文）。

        :return: The name_en of this TimezoneDto.
        :rtype: str
        """
        return self._name_en

    @name_en.setter
    def name_en(self, name_en):
        """
        Sets the name_en of this TimezoneDto.
        时区名称（英文）。

        :param name_en: The name_en of this TimezoneDto.
        :type: str
        """
        if name_en is not None and len(name_en) > 128:
            raise ValueError("Invalid value for `name_en`, length must be less than or equal to `128`")
        if name_en is not None and len(name_en) < 1:
            raise ValueError("Invalid value for `name_en`, length must be greater than or equal to `1`")

        self._name_en = name_en

    @property
    def timezone_utc_offset(self):
        """
        Gets the timezone_utc_offset of this TimezoneDto.
        时区区号。

        :return: The timezone_utc_offset of this TimezoneDto.
        :rtype: str
        """
        return self._timezone_utc_offset

    @timezone_utc_offset.setter
    def timezone_utc_offset(self, timezone_utc_offset):
        """
        Sets the timezone_utc_offset of this TimezoneDto.
        时区区号。

        :param timezone_utc_offset: The timezone_utc_offset of this TimezoneDto.
        :type: str
        """
        if timezone_utc_offset is not None and len(timezone_utc_offset) > 4:
            raise ValueError("Invalid value for `timezone_utc_offset`, length must be less than or equal to `4`")
        if timezone_utc_offset is not None and len(timezone_utc_offset) < 1:
            raise ValueError("Invalid value for `timezone_utc_offset`, length must be greater than or equal to `1`")

        self._timezone_utc_offset = timezone_utc_offset

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimezoneDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
