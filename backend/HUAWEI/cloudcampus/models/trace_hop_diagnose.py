# coding: utf-8

"""
    运维ping/trace探测

    ping/trace探测第三方接口。 · 创建ping探测任务 · 查询ping探测结果 · 创建trace探测任务 · 查询trace探测结果 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TraceHopDiagnose(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hop_index': 'int',
        'hop_address': 'str',
        'trace_probe_list': 'TraceHopDiagnoseTraceProbeList'
    }

    attribute_map = {
        'hop_index': 'hopIndex',
        'hop_address': 'hopAddress',
        'trace_probe_list': 'TraceProbeList'
    }

    def __init__(self, hop_index=None, hop_address=None, trace_probe_list=None):
        """
        TraceHopDiagnose - a model defined in Swagger
        """

        self._hop_index = None
        self._hop_address = None
        self._trace_probe_list = None

        if hop_index is not None:
          self.hop_index = hop_index
        if hop_address is not None:
          self.hop_address = hop_address
        if trace_probe_list is not None:
          self.trace_probe_list = trace_probe_list

    @property
    def hop_index(self):
        """
        Gets the hop_index of this TraceHopDiagnose.
        跳数索引。

        :return: The hop_index of this TraceHopDiagnose.
        :rtype: int
        """
        return self._hop_index

    @hop_index.setter
    def hop_index(self, hop_index):
        """
        Sets the hop_index of this TraceHopDiagnose.
        跳数索引。

        :param hop_index: The hop_index of this TraceHopDiagnose.
        :type: int
        """

        self._hop_index = hop_index

    @property
    def hop_address(self):
        """
        Gets the hop_address of this TraceHopDiagnose.
        该跳地址。可以是IP地址或域名，域名中不能包含空格。

        :return: The hop_address of this TraceHopDiagnose.
        :rtype: str
        """
        return self._hop_address

    @hop_address.setter
    def hop_address(self, hop_address):
        """
        Sets the hop_address of this TraceHopDiagnose.
        该跳地址。可以是IP地址或域名，域名中不能包含空格。

        :param hop_address: The hop_address of this TraceHopDiagnose.
        :type: str
        """

        self._hop_address = hop_address

    @property
    def trace_probe_list(self):
        """
        Gets the trace_probe_list of this TraceHopDiagnose.

        :return: The trace_probe_list of this TraceHopDiagnose.
        :rtype: TraceHopDiagnoseTraceProbeList
        """
        return self._trace_probe_list

    @trace_probe_list.setter
    def trace_probe_list(self, trace_probe_list):
        """
        Sets the trace_probe_list of this TraceHopDiagnose.

        :param trace_probe_list: The trace_probe_list of this TraceHopDiagnose.
        :type: TraceHopDiagnoseTraceProbeList
        """

        self._trace_probe_list = trace_probe_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TraceHopDiagnose):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
