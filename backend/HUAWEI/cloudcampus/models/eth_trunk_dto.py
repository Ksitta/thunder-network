# coding: utf-8

"""
    拓扑管理

    拓扑管理第三方北向接口。 1、查询LACP LAG信息 2、查询LLDP信息 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EthTrunkDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lag_id': 'int',
        'mode': 'str',
        'hash': 'str',
        'least_active': 'int',
        'max_active': 'int',
        'op_status': 'str',
        'port_count': 'int',
        'sys_prio': 'int',
        'sys_id': 'str',
        'interfaces': 'list[EthTrunkInterfacesDto]'
    }

    attribute_map = {
        'lag_id': 'lagId',
        'mode': 'mode',
        'hash': 'hash',
        'least_active': 'leastActive',
        'max_active': 'maxActive',
        'op_status': 'opStatus',
        'port_count': 'portCount',
        'sys_prio': 'sysPrio',
        'sys_id': 'sysId',
        'interfaces': 'interfaces'
    }

    def __init__(self, lag_id=None, mode=None, hash=None, least_active=None, max_active=None, op_status=None, port_count=None, sys_prio=None, sys_id=None, interfaces=None):
        """
        EthTrunkDto - a model defined in Swagger
        """

        self._lag_id = None
        self._mode = None
        self._hash = None
        self._least_active = None
        self._max_active = None
        self._op_status = None
        self._port_count = None
        self._sys_prio = None
        self._sys_id = None
        self._interfaces = None

        if lag_id is not None:
          self.lag_id = lag_id
        if mode is not None:
          self.mode = mode
        if hash is not None:
          self.hash = hash
        if least_active is not None:
          self.least_active = least_active
        if max_active is not None:
          self.max_active = max_active
        if op_status is not None:
          self.op_status = op_status
        if port_count is not None:
          self.port_count = port_count
        if sys_prio is not None:
          self.sys_prio = sys_prio
        if sys_id is not None:
          self.sys_id = sys_id
        if interfaces is not None:
          self.interfaces = interfaces

    @property
    def lag_id(self):
        """
        Gets the lag_id of this EthTrunkDto.
        LAG ID。

        :return: The lag_id of this EthTrunkDto.
        :rtype: int
        """
        return self._lag_id

    @lag_id.setter
    def lag_id(self, lag_id):
        """
        Sets the lag_id of this EthTrunkDto.
        LAG ID。

        :param lag_id: The lag_id of this EthTrunkDto.
        :type: int
        """

        self._lag_id = lag_id

    @property
    def mode(self):
        """
        Gets the mode of this EthTrunkDto.
        trunk模式：lacp、manual。

        :return: The mode of this EthTrunkDto.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this EthTrunkDto.
        trunk模式：lacp、manual。

        :param mode: The mode of this EthTrunkDto.
        :type: str
        """

        self._mode = mode

    @property
    def hash(self):
        """
        Gets the hash of this EthTrunkDto.
        端口负载均衡的hash算法：dst-ip、dst-mac、src-ip、src-mac、src-dst-ip、src-dst-mac、enhanced、diffluence。

        :return: The hash of this EthTrunkDto.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this EthTrunkDto.
        端口负载均衡的hash算法：dst-ip、dst-mac、src-ip、src-mac、src-dst-ip、src-dst-mac、enhanced、diffluence。

        :param hash: The hash of this EthTrunkDto.
        :type: str
        """

        self._hash = hash

    @property
    def least_active(self):
        """
        Gets the least_active of this EthTrunkDto.
        Eth-trunk中活动链路数量的下限。

        :return: The least_active of this EthTrunkDto.
        :rtype: int
        """
        return self._least_active

    @least_active.setter
    def least_active(self, least_active):
        """
        Sets the least_active of this EthTrunkDto.
        Eth-trunk中活动链路数量的下限。

        :param least_active: The least_active of this EthTrunkDto.
        :type: int
        """

        self._least_active = least_active

    @property
    def max_active(self):
        """
        Gets the max_active of this EthTrunkDto.
        最大激活链路数。

        :return: The max_active of this EthTrunkDto.
        :rtype: int
        """
        return self._max_active

    @max_active.setter
    def max_active(self, max_active):
        """
        Sets the max_active of this EthTrunkDto.
        最大激活链路数。

        :param max_active: The max_active of this EthTrunkDto.
        :type: int
        """

        self._max_active = max_active

    @property
    def op_status(self):
        """
        Gets the op_status of this EthTrunkDto.
        操作状态：up、down。

        :return: The op_status of this EthTrunkDto.
        :rtype: str
        """
        return self._op_status

    @op_status.setter
    def op_status(self, op_status):
        """
        Sets the op_status of this EthTrunkDto.
        操作状态：up、down。

        :param op_status: The op_status of this EthTrunkDto.
        :type: str
        """

        self._op_status = op_status

    @property
    def port_count(self):
        """
        Gets the port_count of this EthTrunkDto.
        Eth-trunk上行端口数量。

        :return: The port_count of this EthTrunkDto.
        :rtype: int
        """
        return self._port_count

    @port_count.setter
    def port_count(self, port_count):
        """
        Sets the port_count of this EthTrunkDto.
        Eth-trunk上行端口数量。

        :param port_count: The port_count of this EthTrunkDto.
        :type: int
        """

        self._port_count = port_count

    @property
    def sys_prio(self):
        """
        Gets the sys_prio of this EthTrunkDto.
        本地系统优先级。

        :return: The sys_prio of this EthTrunkDto.
        :rtype: int
        """
        return self._sys_prio

    @sys_prio.setter
    def sys_prio(self, sys_prio):
        """
        Sets the sys_prio of this EthTrunkDto.
        本地系统优先级。

        :param sys_prio: The sys_prio of this EthTrunkDto.
        :type: int
        """

        self._sys_prio = sys_prio

    @property
    def sys_id(self):
        """
        Gets the sys_id of this EthTrunkDto.
        本地系统ID。

        :return: The sys_id of this EthTrunkDto.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this EthTrunkDto.
        本地系统ID。

        :param sys_id: The sys_id of this EthTrunkDto.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def interfaces(self):
        """
        Gets the interfaces of this EthTrunkDto.
        接口列表。

        :return: The interfaces of this EthTrunkDto.
        :rtype: list[EthTrunkInterfacesDto]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """
        Sets the interfaces of this EthTrunkDto.
        接口列表。

        :param interfaces: The interfaces of this EthTrunkDto.
        :type: list[EthTrunkInterfacesDto]
        """

        self._interfaces = interfaces

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EthTrunkDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
