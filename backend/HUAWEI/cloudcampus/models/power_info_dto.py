# coding: utf-8

"""
    框式交换机板卡信息操作

    框式上云相关操作接口： 场景：对框式交换机信息查询操作的第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PowerInfoDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'mode': 'str',
        'state': 'str',
        'rated_power': 'int',
        'current': 'int',
        'voltage': 'int',
        'realtime_power': 'int',
        'role': 'str'
    }

    attribute_map = {
        'id': 'id',
        'mode': 'mode',
        'state': 'state',
        'rated_power': 'ratedPower',
        'current': 'current',
        'voltage': 'voltage',
        'realtime_power': 'realtimePower',
        'role': 'role'
    }

    def __init__(self, id=None, mode=None, state=None, rated_power=None, current=None, voltage=None, realtime_power=None, role=None):
        """
        PowerInfoDto - a model defined in Swagger
        """

        self._id = None
        self._mode = None
        self._state = None
        self._rated_power = None
        self._current = None
        self._voltage = None
        self._realtime_power = None
        self._role = None

        if id is not None:
          self.id = id
        if mode is not None:
          self.mode = mode
        if state is not None:
          self.state = state
        if rated_power is not None:
          self.rated_power = rated_power
        if current is not None:
          self.current = current
        if voltage is not None:
          self.voltage = voltage
        if realtime_power is not None:
          self.realtime_power = realtime_power
        if role is not None:
          self.role = role

    @property
    def id(self):
        """
        Gets the id of this PowerInfoDto.
        电源模块编号。

        :return: The id of this PowerInfoDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PowerInfoDto.
        电源模块编号。

        :param id: The id of this PowerInfoDto.
        :type: str
        """
        if id is not None and len(id) > 32:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `32`")

        self._id = id

    @property
    def mode(self):
        """
        Gets the mode of this PowerInfoDto.
        电源模式。取值范围：0（AC：交流电源）；1（DC：直流电源）；2（hvdc高压直流电源）；3（NA：表示电源在位但是无法获取模式信息）。

        :return: The mode of this PowerInfoDto.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this PowerInfoDto.
        电源模式。取值范围：0（AC：交流电源）；1（DC：直流电源）；2（hvdc高压直流电源）；3（NA：表示电源在位但是无法获取模式信息）。

        :param mode: The mode of this PowerInfoDto.
        :type: str
        """
        if mode is not None and len(mode) > 32:
            raise ValueError("Invalid value for `mode`, length must be less than or equal to `32`")

        self._mode = mode

    @property
    def state(self):
        """
        Gets the state of this PowerInfoDto.
        电源注册状态。取值范围：1（表示NotSupply无电流输出）；0（表示Supply有电流输出）。

        :return: The state of this PowerInfoDto.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this PowerInfoDto.
        电源注册状态。取值范围：1（表示NotSupply无电流输出）；0（表示Supply有电流输出）。

        :param state: The state of this PowerInfoDto.
        :type: str
        """
        if state is not None and len(state) > 32:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `32`")

        self._state = state

    @property
    def rated_power(self):
        """
        Gets the rated_power of this PowerInfoDto.
        单板额定功率，单位是W。

        :return: The rated_power of this PowerInfoDto.
        :rtype: int
        """
        return self._rated_power

    @rated_power.setter
    def rated_power(self, rated_power):
        """
        Sets the rated_power of this PowerInfoDto.
        单板额定功率，单位是W。

        :param rated_power: The rated_power of this PowerInfoDto.
        :type: int
        """

        self._rated_power = rated_power

    @property
    def current(self):
        """
        Gets the current of this PowerInfoDto.
        电源供电电流，单位是A。

        :return: The current of this PowerInfoDto.
        :rtype: int
        """
        return self._current

    @current.setter
    def current(self, current):
        """
        Sets the current of this PowerInfoDto.
        电源供电电流，单位是A。

        :param current: The current of this PowerInfoDto.
        :type: int
        """

        self._current = current

    @property
    def voltage(self):
        """
        Gets the voltage of this PowerInfoDto.
        电源供电电压，单位是V。

        :return: The voltage of this PowerInfoDto.
        :rtype: int
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """
        Sets the voltage of this PowerInfoDto.
        电源供电电压，单位是V。

        :param voltage: The voltage of this PowerInfoDto.
        :type: int
        """

        self._voltage = voltage

    @property
    def realtime_power(self):
        """
        Gets the realtime_power of this PowerInfoDto.
        实时功率，单位是W。

        :return: The realtime_power of this PowerInfoDto.
        :rtype: int
        """
        return self._realtime_power

    @realtime_power.setter
    def realtime_power(self, realtime_power):
        """
        Sets the realtime_power of this PowerInfoDto.
        实时功率，单位是W。

        :param realtime_power: The realtime_power of this PowerInfoDto.
        :type: int
        """

        self._realtime_power = realtime_power

    @property
    def role(self):
        """
        Gets the role of this PowerInfoDto.
        电源模块的角色。取值范围：1（M主用电源）；2（S备用电源）；3（A始终供电电源）；0（-表示电源不在位或未注册）。

        :return: The role of this PowerInfoDto.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this PowerInfoDto.
        电源模块的角色。取值范围：1（M主用电源）；2（S备用电源）；3（A始终供电电源）；0（-表示电源不在位或未注册）。

        :param role: The role of this PowerInfoDto.
        :type: str
        """
        if role is not None and len(role) > 64:
            raise ValueError("Invalid value for `role`, length must be less than or equal to `64`")
        if role is not None and len(role) < 0:
            raise ValueError("Invalid value for `role`, length must be greater than or equal to `0`")

        self._role = role

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PowerInfoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
