# coding: utf-8

"""
    交换机管理VLAN配置

    LSW管理VLAN配置北向接口，主要特性：  · 查询交换机管理VLAN配置信息 · 修改交换机管理VLAN配置 

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MgmtVlanDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vlan_id': 'int',
        'ip': 'str',
        'mask': 'str',
        'gateway': 'str',
        'is_auto_add_up_port': 'bool'
    }

    attribute_map = {
        'vlan_id': 'vlanId',
        'ip': 'ip',
        'mask': 'mask',
        'gateway': 'gateway',
        'is_auto_add_up_port': 'isAutoAddUpPort'
    }

    def __init__(self, vlan_id=None, ip=None, mask=None, gateway=None, is_auto_add_up_port=None):
        """
        MgmtVlanDto - a model defined in Swagger
        """

        self._vlan_id = None
        self._ip = None
        self._mask = None
        self._gateway = None
        self._is_auto_add_up_port = None

        if vlan_id is not None:
          self.vlan_id = vlan_id
        if ip is not None:
          self.ip = ip
        if mask is not None:
          self.mask = mask
        if gateway is not None:
          self.gateway = gateway
        if is_auto_add_up_port is not None:
          self.is_auto_add_up_port = is_auto_add_up_port

    @property
    def vlan_id(self):
        """
        Gets the vlan_id of this MgmtVlanDto.
        管理VLAN。

        :return: The vlan_id of this MgmtVlanDto.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """
        Sets the vlan_id of this MgmtVlanDto.
        管理VLAN。

        :param vlan_id: The vlan_id of this MgmtVlanDto.
        :type: int
        """
        if vlan_id is not None and vlan_id > 4094:
            raise ValueError("Invalid value for `vlan_id`, must be a value less than or equal to `4094`")
        if vlan_id is not None and vlan_id < 1:
            raise ValueError("Invalid value for `vlan_id`, must be a value greater than or equal to `1`")

        self._vlan_id = vlan_id

    @property
    def ip(self):
        """
        Gets the ip of this MgmtVlanDto.
        静态IP地址，支持配置单播IP地址。

        :return: The ip of this MgmtVlanDto.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this MgmtVlanDto.
        静态IP地址，支持配置单播IP地址。

        :param ip: The ip of this MgmtVlanDto.
        :type: str
        """

        self._ip = ip

    @property
    def mask(self):
        """
        Gets the mask of this MgmtVlanDto.
        掩码范围是1~32范围内的整数。

        :return: The mask of this MgmtVlanDto.
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """
        Sets the mask of this MgmtVlanDto.
        掩码范围是1~32范围内的整数。

        :param mask: The mask of this MgmtVlanDto.
        :type: str
        """

        self._mask = mask

    @property
    def gateway(self):
        """
        Gets the gateway of this MgmtVlanDto.
        网关地址，支持配置单播IP地址。

        :return: The gateway of this MgmtVlanDto.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this MgmtVlanDto.
        网关地址，支持配置单播IP地址。

        :param gateway: The gateway of this MgmtVlanDto.
        :type: str
        """

        self._gateway = gateway

    @property
    def is_auto_add_up_port(self):
        """
        Gets the is_auto_add_up_port of this MgmtVlanDto.
        上行口自动放行。

        :return: The is_auto_add_up_port of this MgmtVlanDto.
        :rtype: bool
        """
        return self._is_auto_add_up_port

    @is_auto_add_up_port.setter
    def is_auto_add_up_port(self, is_auto_add_up_port):
        """
        Sets the is_auto_add_up_port of this MgmtVlanDto.
        上行口自动放行。

        :param is_auto_add_up_port: The is_auto_add_up_port of this MgmtVlanDto.
        :type: bool
        """

        self._is_auto_add_up_port = is_auto_add_up_port

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MgmtVlanDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
