# coding: utf-8

"""
    交换机STP配置

    LSW STP配置北向接口，主要特性： · 查询交换STP配置信息 · 修改交换机STP配置 · 删除交换机STP配置 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DelMstpRegionInstance(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_id': 'int',
        'region_instance_devices': 'list[DelRegionInstanceDevice]'
    }

    attribute_map = {
        'instance_id': 'instanceId',
        'region_instance_devices': 'regionInstanceDevices'
    }

    def __init__(self, instance_id=None, region_instance_devices=None):
        """
        DelMstpRegionInstance - a model defined in Swagger
        """

        self._instance_id = None
        self._region_instance_devices = None

        if instance_id is not None:
          self.instance_id = instance_id
        if region_instance_devices is not None:
          self.region_instance_devices = region_instance_devices

    @property
    def instance_id(self):
        """
        Gets the instance_id of this DelMstpRegionInstance.
        生成树实例ID。

        :return: The instance_id of this DelMstpRegionInstance.
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """
        Sets the instance_id of this DelMstpRegionInstance.
        生成树实例ID。

        :param instance_id: The instance_id of this DelMstpRegionInstance.
        :type: int
        """
        if instance_id is not None and instance_id > 4094:
            raise ValueError("Invalid value for `instance_id`, must be a value less than or equal to `4094`")
        if instance_id is not None and instance_id < 0:
            raise ValueError("Invalid value for `instance_id`, must be a value greater than or equal to `0`")

        self._instance_id = instance_id

    @property
    def region_instance_devices(self):
        """
        Gets the region_instance_devices of this DelMstpRegionInstance.
        生成树实例下设备集合。

        :return: The region_instance_devices of this DelMstpRegionInstance.
        :rtype: list[DelRegionInstanceDevice]
        """
        return self._region_instance_devices

    @region_instance_devices.setter
    def region_instance_devices(self, region_instance_devices):
        """
        Sets the region_instance_devices of this DelMstpRegionInstance.
        生成树实例下设备集合。

        :param region_instance_devices: The region_instance_devices of this DelMstpRegionInstance.
        :type: list[DelRegionInstanceDevice]
        """

        self._region_instance_devices = region_instance_devices

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DelMstpRegionInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
