# coding: utf-8

"""
    设备基础性能数据信息查询

    · 查询设备网络速率历史数据 · 查询站点维度TopN设备或者全部设备的上行流量、下行流量 · 查询站点维度设备连接终端数历史数据 · 查询单设备连接终端数历史数据 · 查询租户维度下设备状态历史数据 · 查询基于站点的站点健康度和设备健康度 · 查询站点下TOP N SSID流量和最近在线用户数 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TopNSSIDTrafficDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ssid_name': 'str',
        'ssid_traffic': 'str',
        'online_users': 'str'
    }

    attribute_map = {
        'ssid_name': 'ssidName',
        'ssid_traffic': 'ssidTraffic',
        'online_users': 'onlineUsers'
    }

    def __init__(self, ssid_name=None, ssid_traffic=None, online_users=None):
        """
        TopNSSIDTrafficDto - a model defined in Swagger
        """

        self._ssid_name = None
        self._ssid_traffic = None
        self._online_users = None

        if ssid_name is not None:
          self.ssid_name = ssid_name
        if ssid_traffic is not None:
          self.ssid_traffic = ssid_traffic
        if online_users is not None:
          self.online_users = online_users

    @property
    def ssid_name(self):
        """
        Gets the ssid_name of this TopNSSIDTrafficDto.
        SSID名称。

        :return: The ssid_name of this TopNSSIDTrafficDto.
        :rtype: str
        """
        return self._ssid_name

    @ssid_name.setter
    def ssid_name(self, ssid_name):
        """
        Sets the ssid_name of this TopNSSIDTrafficDto.
        SSID名称。

        :param ssid_name: The ssid_name of this TopNSSIDTrafficDto.
        :type: str
        """
        if ssid_name is not None and len(ssid_name) > 256:
            raise ValueError("Invalid value for `ssid_name`, length must be less than or equal to `256`")
        if ssid_name is not None and len(ssid_name) < 0:
            raise ValueError("Invalid value for `ssid_name`, length must be greater than or equal to `0`")

        self._ssid_name = ssid_name

    @property
    def ssid_traffic(self):
        """
        Gets the ssid_traffic of this TopNSSIDTrafficDto.
        SSID流量。

        :return: The ssid_traffic of this TopNSSIDTrafficDto.
        :rtype: str
        """
        return self._ssid_traffic

    @ssid_traffic.setter
    def ssid_traffic(self, ssid_traffic):
        """
        Sets the ssid_traffic of this TopNSSIDTrafficDto.
        SSID流量。

        :param ssid_traffic: The ssid_traffic of this TopNSSIDTrafficDto.
        :type: str
        """
        if ssid_traffic is not None and len(ssid_traffic) > 256:
            raise ValueError("Invalid value for `ssid_traffic`, length must be less than or equal to `256`")
        if ssid_traffic is not None and len(ssid_traffic) < 0:
            raise ValueError("Invalid value for `ssid_traffic`, length must be greater than or equal to `0`")

        self._ssid_traffic = ssid_traffic

    @property
    def online_users(self):
        """
        Gets the online_users of this TopNSSIDTrafficDto.
        在线用户数。

        :return: The online_users of this TopNSSIDTrafficDto.
        :rtype: str
        """
        return self._online_users

    @online_users.setter
    def online_users(self, online_users):
        """
        Sets the online_users of this TopNSSIDTrafficDto.
        在线用户数。

        :param online_users: The online_users of this TopNSSIDTrafficDto.
        :type: str
        """
        if online_users is not None and len(online_users) > 256:
            raise ValueError("Invalid value for `online_users`, length must be less than or equal to `256`")
        if online_users is not None and len(online_users) < 0:
            raise ValueError("Invalid value for `online_users`, length must be greater than or equal to `0`")

        self._online_users = online_users

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TopNSSIDTrafficDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
