# coding: utf-8

"""
    AP SSID配置管理

    AP SSID第三方接口。

    OpenAPI spec version: 1.4.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RateLimitContentDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'up_enable': 'bool',
        'up_limit': 'str',
        'down_enable': 'bool',
        'down_limit': 'str'
    }

    attribute_map = {
        'up_enable': 'upEnable',
        'up_limit': 'upLimit',
        'down_enable': 'downEnable',
        'down_limit': 'downLimit'
    }

    def __init__(self, up_enable=None, up_limit=None, down_enable=None, down_limit=None):
        """
        RateLimitContentDto - a model defined in Swagger
        """

        self._up_enable = None
        self._up_limit = None
        self._down_enable = None
        self._down_limit = None

        if up_enable is not None:
          self.up_enable = up_enable
        if up_limit is not None:
          self.up_limit = up_limit
        if down_enable is not None:
          self.down_enable = down_enable
        if down_limit is not None:
          self.down_limit = down_limit

    @property
    def up_enable(self):
        """
        Gets the up_enable of this RateLimitContentDto.
        上行限速使能。

        :return: The up_enable of this RateLimitContentDto.
        :rtype: bool
        """
        return self._up_enable

    @up_enable.setter
    def up_enable(self, up_enable):
        """
        Sets the up_enable of this RateLimitContentDto.
        上行限速使能。

        :param up_enable: The up_enable of this RateLimitContentDto.
        :type: bool
        """

        self._up_enable = up_enable

    @property
    def up_limit(self):
        """
        Gets the up_limit of this RateLimitContentDto.
        上行限速速率(Mbps)，范围：0.1-10000.0内的数字，小数点后最多一位。

        :return: The up_limit of this RateLimitContentDto.
        :rtype: str
        """
        return self._up_limit

    @up_limit.setter
    def up_limit(self, up_limit):
        """
        Sets the up_limit of this RateLimitContentDto.
        上行限速速率(Mbps)，范围：0.1-10000.0内的数字，小数点后最多一位。

        :param up_limit: The up_limit of this RateLimitContentDto.
        :type: str
        """
        if up_limit is not None and len(up_limit) > 7:
            raise ValueError("Invalid value for `up_limit`, length must be less than or equal to `7`")
        if up_limit is not None and len(up_limit) < 1:
            raise ValueError("Invalid value for `up_limit`, length must be greater than or equal to `1`")

        self._up_limit = up_limit

    @property
    def down_enable(self):
        """
        Gets the down_enable of this RateLimitContentDto.
        下行限速使能。

        :return: The down_enable of this RateLimitContentDto.
        :rtype: bool
        """
        return self._down_enable

    @down_enable.setter
    def down_enable(self, down_enable):
        """
        Sets the down_enable of this RateLimitContentDto.
        下行限速使能。

        :param down_enable: The down_enable of this RateLimitContentDto.
        :type: bool
        """

        self._down_enable = down_enable

    @property
    def down_limit(self):
        """
        Gets the down_limit of this RateLimitContentDto.
        下行限速速率(Mbps)，范围：0.1-10000.0内的数字，小数点后最多一位。

        :return: The down_limit of this RateLimitContentDto.
        :rtype: str
        """
        return self._down_limit

    @down_limit.setter
    def down_limit(self, down_limit):
        """
        Sets the down_limit of this RateLimitContentDto.
        下行限速速率(Mbps)，范围：0.1-10000.0内的数字，小数点后最多一位。

        :param down_limit: The down_limit of this RateLimitContentDto.
        :type: str
        """
        if down_limit is not None and len(down_limit) > 7:
            raise ValueError("Invalid value for `down_limit`, length must be less than or equal to `7`")
        if down_limit is not None and len(down_limit) < 1:
            raise ValueError("Invalid value for `down_limit`, length must be greater than or equal to `1`")

        self._down_limit = down_limit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RateLimitContentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
