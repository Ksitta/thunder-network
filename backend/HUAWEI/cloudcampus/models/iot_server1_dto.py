# coding: utf-8

"""
    AP IOT配置

    AP IOT配置北向接口，主要特性： · 查询AP IOT配置信息 · 配置AP IOT信息 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IotServer1Dto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_num': 'int',
        'iot_server': 'str',
        'port': 'int'
    }

    attribute_map = {
        'server_num': 'serverNum',
        'iot_server': 'iotServer',
        'port': 'port'
    }

    def __init__(self, server_num=None, iot_server=None, port=None):
        """
        IotServer1Dto - a model defined in Swagger
        """

        self._server_num = None
        self._iot_server = None
        self._port = None

        if server_num is not None:
          self.server_num = server_num
        if iot_server is not None:
          self.iot_server = iot_server
        if port is not None:
          self.port = port

    @property
    def server_num(self):
        """
        Gets the server_num of this IotServer1Dto.
        IoT服务器编号。

        :return: The server_num of this IotServer1Dto.
        :rtype: int
        """
        return self._server_num

    @server_num.setter
    def server_num(self, server_num):
        """
        Sets the server_num of this IotServer1Dto.
        IoT服务器编号。

        :param server_num: The server_num of this IotServer1Dto.
        :type: int
        """
        if server_num is not None and server_num > 4:
            raise ValueError("Invalid value for `server_num`, must be a value less than or equal to `4`")
        if server_num is not None and server_num < 1:
            raise ValueError("Invalid value for `server_num`, must be a value greater than or equal to `1`")

        self._server_num = server_num

    @property
    def iot_server(self):
        """
        Gets the iot_server of this IotServer1Dto.
        第一通道IoT服务器，支持域名和IP地址。

        :return: The iot_server of this IotServer1Dto.
        :rtype: str
        """
        return self._iot_server

    @iot_server.setter
    def iot_server(self, iot_server):
        """
        Sets the iot_server of this IotServer1Dto.
        第一通道IoT服务器，支持域名和IP地址。

        :param iot_server: The iot_server of this IotServer1Dto.
        :type: str
        """

        self._iot_server = iot_server

    @property
    def port(self):
        """
        Gets the port of this IotServer1Dto.
        第一通道IoT端口。

        :return: The port of this IotServer1Dto.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this IotServer1Dto.
        第一通道IoT端口。

        :param port: The port of this IotServer1Dto.
        :type: int
        """
        if port is not None and port > 65535:
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")
        if port is not None and port < 1:
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")

        self._port = port

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IotServer1Dto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
