# coding: utf-8

"""
    室内地图信息查询

    室内地图第三方北向接口。 · 查询站点中所有楼栋基本信息 · 查询楼栋中所有楼层基本信息 · 查询楼栋中所有楼层详细信息 · 查询楼栋中楼层和设备布放信息 · 查询楼栋中楼层已布放设备详细信息 · 查询楼层已布放设备位置信息 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LocatedDeviceInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'status': 'str',
        'device_type': 'str',
        'position_x': 'int',
        'position_y': 'int',
        'plan_position_x': 'int',
        'plan_position_y': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'device_type': 'deviceType',
        'position_x': 'positionX',
        'position_y': 'positionY',
        'plan_position_x': 'planPositionX',
        'plan_position_y': 'planPositionY'
    }

    def __init__(self, id=None, name=None, status=None, device_type=None, position_x=None, position_y=None, plan_position_x=None, plan_position_y=None):
        """
        LocatedDeviceInfo - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._status = None
        self._device_type = None
        self._position_x = None
        self._position_y = None
        self._plan_position_x = None
        self._plan_position_y = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if status is not None:
          self.status = status
        if device_type is not None:
          self.device_type = device_type
        if position_x is not None:
          self.position_x = position_x
        if position_y is not None:
          self.position_y = position_y
        if plan_position_x is not None:
          self.plan_position_x = plan_position_x
        if plan_position_y is not None:
          self.plan_position_y = plan_position_y

    @property
    def id(self):
        """
        Gets the id of this LocatedDeviceInfo.
        设备ID，格式UUID。

        :return: The id of this LocatedDeviceInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LocatedDeviceInfo.
        设备ID，格式UUID。

        :param id: The id of this LocatedDeviceInfo.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this LocatedDeviceInfo.
        设备名称。

        :return: The name of this LocatedDeviceInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LocatedDeviceInfo.
        设备名称。

        :param name: The name of this LocatedDeviceInfo.
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """
        Gets the status of this LocatedDeviceInfo.
        设备状态 0: 正常 1: 告警  3: 离线 4: 未注册 

        :return: The status of this LocatedDeviceInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this LocatedDeviceInfo.
        设备状态 0: 正常 1: 告警  3: 离线 4: 未注册 

        :param status: The status of this LocatedDeviceInfo.
        :type: str
        """

        self._status = status

    @property
    def device_type(self):
        """
        Gets the device_type of this LocatedDeviceInfo.
        设备类型。

        :return: The device_type of this LocatedDeviceInfo.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """
        Sets the device_type of this LocatedDeviceInfo.
        设备类型。

        :param device_type: The device_type of this LocatedDeviceInfo.
        :type: str
        """
        allowed_values = ["AP", "AR", "FW", "LSW", "AC", "OLT", "ONT"]
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def position_x(self):
        """
        Gets the position_x of this LocatedDeviceInfo.
        设备布放坐标X，单位：像素。

        :return: The position_x of this LocatedDeviceInfo.
        :rtype: int
        """
        return self._position_x

    @position_x.setter
    def position_x(self, position_x):
        """
        Sets the position_x of this LocatedDeviceInfo.
        设备布放坐标X，单位：像素。

        :param position_x: The position_x of this LocatedDeviceInfo.
        :type: int
        """

        self._position_x = position_x

    @property
    def position_y(self):
        """
        Gets the position_y of this LocatedDeviceInfo.
        设备布放坐标Y，单位：像素。

        :return: The position_y of this LocatedDeviceInfo.
        :rtype: int
        """
        return self._position_y

    @position_y.setter
    def position_y(self, position_y):
        """
        Sets the position_y of this LocatedDeviceInfo.
        设备布放坐标Y，单位：像素。

        :param position_y: The position_y of this LocatedDeviceInfo.
        :type: int
        """

        self._position_y = position_y

    @property
    def plan_position_x(self):
        """
        Gets the plan_position_x of this LocatedDeviceInfo.
        设备规划坐标X，单位：像素。

        :return: The plan_position_x of this LocatedDeviceInfo.
        :rtype: int
        """
        return self._plan_position_x

    @plan_position_x.setter
    def plan_position_x(self, plan_position_x):
        """
        Sets the plan_position_x of this LocatedDeviceInfo.
        设备规划坐标X，单位：像素。

        :param plan_position_x: The plan_position_x of this LocatedDeviceInfo.
        :type: int
        """

        self._plan_position_x = plan_position_x

    @property
    def plan_position_y(self):
        """
        Gets the plan_position_y of this LocatedDeviceInfo.
        设备规划坐标Y，单位：像素。

        :return: The plan_position_y of this LocatedDeviceInfo.
        :rtype: int
        """
        return self._plan_position_y

    @plan_position_y.setter
    def plan_position_y(self, plan_position_y):
        """
        Sets the plan_position_y of this LocatedDeviceInfo.
        设备规划坐标Y，单位：像素。

        :param plan_position_y: The plan_position_y of this LocatedDeviceInfo.
        :type: int
        """

        self._plan_position_y = plan_position_y

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LocatedDeviceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
