# coding: utf-8

"""
    租户管理

    租户管理第三方北向接口。 · 提供租户创建接口 · 提供租户删除接口 · 提供租户查询接口 

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateTenantCommonDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit_account_num': 'int',
        'user_account': 'str',
        'user_email': 'str',
        'send_init_email_enable': 'bool',
        'country_code': 'str',
        'is_logo_inherit': 'bool'
    }

    attribute_map = {
        'limit_account_num': 'limitAccountNum',
        'user_account': 'userAccount',
        'user_email': 'userEmail',
        'send_init_email_enable': 'sendInitEmailEnable',
        'country_code': 'countryCode',
        'is_logo_inherit': 'isLogoInherit'
    }

    def __init__(self, limit_account_num=None, user_account=None, user_email=None, send_init_email_enable=None, country_code=None, is_logo_inherit=False):
        """
        CreateTenantCommonDto - a model defined in Swagger
        """

        self._limit_account_num = None
        self._user_account = None
        self._user_email = None
        self._send_init_email_enable = None
        self._country_code = None
        self._is_logo_inherit = None

        if limit_account_num is not None:
          self.limit_account_num = limit_account_num
        if user_account is not None:
          self.user_account = user_account
        if user_email is not None:
          self.user_email = user_email
        if send_init_email_enable is not None:
          self.send_init_email_enable = send_init_email_enable
        if country_code is not None:
          self.country_code = country_code
        if is_logo_inherit is not None:
          self.is_logo_inherit = is_logo_inherit

    @property
    def limit_account_num(self):
        """
        Gets the limit_account_num of this CreateTenantCommonDto.
        帐号数量限制，默认值：20。

        :return: The limit_account_num of this CreateTenantCommonDto.
        :rtype: int
        """
        return self._limit_account_num

    @limit_account_num.setter
    def limit_account_num(self, limit_account_num):
        """
        Sets the limit_account_num of this CreateTenantCommonDto.
        帐号数量限制，默认值：20。

        :param limit_account_num: The limit_account_num of this CreateTenantCommonDto.
        :type: int
        """
        if limit_account_num is not None and limit_account_num > 100:
            raise ValueError("Invalid value for `limit_account_num`, must be a value less than or equal to `100`")
        if limit_account_num is not None and limit_account_num < 1:
            raise ValueError("Invalid value for `limit_account_num`, must be a value greater than or equal to `1`")

        self._limit_account_num = limit_account_num

    @property
    def user_account(self):
        """
        Gets the user_account of this CreateTenantCommonDto.
        租户默认管理员帐号。

        :return: The user_account of this CreateTenantCommonDto.
        :rtype: str
        """
        return self._user_account

    @user_account.setter
    def user_account(self, user_account):
        """
        Sets the user_account of this CreateTenantCommonDto.
        租户默认管理员帐号。

        :param user_account: The user_account of this CreateTenantCommonDto.
        :type: str
        """
        if user_account is not None and len(user_account) > 32:
            raise ValueError("Invalid value for `user_account`, length must be less than or equal to `32`")
        if user_account is not None and len(user_account) < 10:
            raise ValueError("Invalid value for `user_account`, length must be greater than or equal to `10`")

        self._user_account = user_account

    @property
    def user_email(self):
        """
        Gets the user_email of this CreateTenantCommonDto.
        租户默认管理员邮箱，用于接收初始化密码邮件。如未填，将按照租户默认管理员帐号发送邮件。

        :return: The user_email of this CreateTenantCommonDto.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """
        Sets the user_email of this CreateTenantCommonDto.
        租户默认管理员邮箱，用于接收初始化密码邮件。如未填，将按照租户默认管理员帐号发送邮件。

        :param user_email: The user_email of this CreateTenantCommonDto.
        :type: str
        """
        if user_email is not None and len(user_email) > 128:
            raise ValueError("Invalid value for `user_email`, length must be less than or equal to `128`")
        if user_email is not None and len(user_email) < 0:
            raise ValueError("Invalid value for `user_email`, length must be greater than or equal to `0`")

        self._user_email = user_email

    @property
    def send_init_email_enable(self):
        """
        Gets the send_init_email_enable of this CreateTenantCommonDto.
        是否发送初始化邮件，默认：true。

        :return: The send_init_email_enable of this CreateTenantCommonDto.
        :rtype: bool
        """
        return self._send_init_email_enable

    @send_init_email_enable.setter
    def send_init_email_enable(self, send_init_email_enable):
        """
        Sets the send_init_email_enable of this CreateTenantCommonDto.
        是否发送初始化邮件，默认：true。

        :param send_init_email_enable: The send_init_email_enable of this CreateTenantCommonDto.
        :type: bool
        """

        self._send_init_email_enable = send_init_email_enable

    @property
    def country_code(self):
        """
        Gets the country_code of this CreateTenantCommonDto.
        国家码，不填默认CN。

        :return: The country_code of this CreateTenantCommonDto.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this CreateTenantCommonDto.
        国家码，不填默认CN。

        :param country_code: The country_code of this CreateTenantCommonDto.
        :type: str
        """
        if country_code is not None and len(country_code) > 2:
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")
        if country_code is not None and len(country_code) < 2:
            raise ValueError("Invalid value for `country_code`, length must be greater than or equal to `2`")

        self._country_code = country_code

    @property
    def is_logo_inherit(self):
        """
        Gets the is_logo_inherit of this CreateTenantCommonDto.
        租户logo是否继承自MSP。

        :return: The is_logo_inherit of this CreateTenantCommonDto.
        :rtype: bool
        """
        return self._is_logo_inherit

    @is_logo_inherit.setter
    def is_logo_inherit(self, is_logo_inherit):
        """
        Sets the is_logo_inherit of this CreateTenantCommonDto.
        租户logo是否继承自MSP。

        :param is_logo_inherit: The is_logo_inherit of this CreateTenantCommonDto.
        :type: bool
        """

        self._is_logo_inherit = is_logo_inherit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateTenantCommonDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
