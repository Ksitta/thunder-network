# coding: utf-8

"""
    站点模板SNMP配置

    站点模板SNMP配置第三方接口说明。 

    OpenAPI spec version: 1.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SiteTemplateSnmpDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'snmp_enable': 'bool',
        'protocol_version': 'str',
        'group_name': 'str',
        'user_infos': 'list[UserInfosDto]',
        'acl_ips': 'list[str]',
        'trap_enable': 'bool',
        'target_hosts': 'list[TargetHostsDto]'
    }

    attribute_map = {
        'snmp_enable': 'snmpEnable',
        'protocol_version': 'protocolVersion',
        'group_name': 'groupName',
        'user_infos': 'userInfos',
        'acl_ips': 'aclIps',
        'trap_enable': 'trapEnable',
        'target_hosts': 'targetHosts'
    }

    def __init__(self, snmp_enable=None, protocol_version=None, group_name=None, user_infos=None, acl_ips=None, trap_enable=None, target_hosts=None):
        """
        SiteTemplateSnmpDto - a model defined in Swagger
        """

        self._snmp_enable = None
        self._protocol_version = None
        self._group_name = None
        self._user_infos = None
        self._acl_ips = None
        self._trap_enable = None
        self._target_hosts = None

        if snmp_enable is not None:
          self.snmp_enable = snmp_enable
        if protocol_version is not None:
          self.protocol_version = protocol_version
        if group_name is not None:
          self.group_name = group_name
        if user_infos is not None:
          self.user_infos = user_infos
        if acl_ips is not None:
          self.acl_ips = acl_ips
        if trap_enable is not None:
          self.trap_enable = trap_enable
        if target_hosts is not None:
          self.target_hosts = target_hosts

    @property
    def snmp_enable(self):
        """
        Gets the snmp_enable of this SiteTemplateSnmpDto.
        SNMP使能开关。

        :return: The snmp_enable of this SiteTemplateSnmpDto.
        :rtype: bool
        """
        return self._snmp_enable

    @snmp_enable.setter
    def snmp_enable(self, snmp_enable):
        """
        Sets the snmp_enable of this SiteTemplateSnmpDto.
        SNMP使能开关。

        :param snmp_enable: The snmp_enable of this SiteTemplateSnmpDto.
        :type: bool
        """

        self._snmp_enable = snmp_enable

    @property
    def protocol_version(self):
        """
        Gets the protocol_version of this SiteTemplateSnmpDto.
        协议版本，只能为V1、V2C、V3其中一种，当snmpEnable为true时，protocolVersion生效且不能为空。

        :return: The protocol_version of this SiteTemplateSnmpDto.
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """
        Sets the protocol_version of this SiteTemplateSnmpDto.
        协议版本，只能为V1、V2C、V3其中一种，当snmpEnable为true时，protocolVersion生效且不能为空。

        :param protocol_version: The protocol_version of this SiteTemplateSnmpDto.
        :type: str
        """

        self._protocol_version = protocol_version

    @property
    def group_name(self):
        """
        Gets the group_name of this SiteTemplateSnmpDto.
        团体名，当snmpEnable为true且protocolVersion为V1或V2C时，groupName生效且不能为空。

        :return: The group_name of this SiteTemplateSnmpDto.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """
        Sets the group_name of this SiteTemplateSnmpDto.
        团体名，当snmpEnable为true且protocolVersion为V1或V2C时，groupName生效且不能为空。

        :param group_name: The group_name of this SiteTemplateSnmpDto.
        :type: str
        """
        if group_name is not None and len(group_name) > 32:
            raise ValueError("Invalid value for `group_name`, length must be less than or equal to `32`")
        if group_name is not None and len(group_name) < 8:
            raise ValueError("Invalid value for `group_name`, length must be greater than or equal to `8`")

        self._group_name = group_name

    @property
    def user_infos(self):
        """
        Gets the user_infos of this SiteTemplateSnmpDto.
        用户列表，当snmpEnable为true且protocolVersion为V3时，userInfos生效且不能为空。

        :return: The user_infos of this SiteTemplateSnmpDto.
        :rtype: list[UserInfosDto]
        """
        return self._user_infos

    @user_infos.setter
    def user_infos(self, user_infos):
        """
        Sets the user_infos of this SiteTemplateSnmpDto.
        用户列表，当snmpEnable为true且protocolVersion为V3时，userInfos生效且不能为空。

        :param user_infos: The user_infos of this SiteTemplateSnmpDto.
        :type: list[UserInfosDto]
        """

        self._user_infos = user_infos

    @property
    def acl_ips(self):
        """
        Gets the acl_ips of this SiteTemplateSnmpDto.
        IP地址限定，当snmpEnable为true时，aclIps生效。

        :return: The acl_ips of this SiteTemplateSnmpDto.
        :rtype: list[str]
        """
        return self._acl_ips

    @acl_ips.setter
    def acl_ips(self, acl_ips):
        """
        Sets the acl_ips of this SiteTemplateSnmpDto.
        IP地址限定，当snmpEnable为true时，aclIps生效。

        :param acl_ips: The acl_ips of this SiteTemplateSnmpDto.
        :type: list[str]
        """

        self._acl_ips = acl_ips

    @property
    def trap_enable(self):
        """
        Gets the trap_enable of this SiteTemplateSnmpDto.
        告警服务器使能开关，当snmpEnable为true时，trapEnable生效。

        :return: The trap_enable of this SiteTemplateSnmpDto.
        :rtype: bool
        """
        return self._trap_enable

    @trap_enable.setter
    def trap_enable(self, trap_enable):
        """
        Sets the trap_enable of this SiteTemplateSnmpDto.
        告警服务器使能开关，当snmpEnable为true时，trapEnable生效。

        :param trap_enable: The trap_enable of this SiteTemplateSnmpDto.
        :type: bool
        """

        self._trap_enable = trap_enable

    @property
    def target_hosts(self):
        """
        Gets the target_hosts of this SiteTemplateSnmpDto.
        告警服务器列表，当trapEnable为true时，targetHosts生效且不能为空。

        :return: The target_hosts of this SiteTemplateSnmpDto.
        :rtype: list[TargetHostsDto]
        """
        return self._target_hosts

    @target_hosts.setter
    def target_hosts(self, target_hosts):
        """
        Sets the target_hosts of this SiteTemplateSnmpDto.
        告警服务器列表，当trapEnable为true时，targetHosts生效且不能为空。

        :param target_hosts: The target_hosts of this SiteTemplateSnmpDto.
        :type: list[TargetHostsDto]
        """

        self._target_hosts = target_hosts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SiteTemplateSnmpDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
