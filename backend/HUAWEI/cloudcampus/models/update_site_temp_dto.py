# coding: utf-8

"""
    站点模板管理

    站点模板第三方接口说明。 

    OpenAPI spec version: 1.2.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UpdateSiteTempDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'types': 'list[str]',
        'custom': 'bool',
        'config_identifies': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'types': 'types',
        'custom': 'custom',
        'config_identifies': 'configIdentifies'
    }

    def __init__(self, name=None, types=None, custom=None, config_identifies=None):
        """
        UpdateSiteTempDto - a model defined in Swagger
        """

        self._name = None
        self._types = None
        self._custom = None
        self._config_identifies = None

        if name is not None:
          self.name = name
        if types is not None:
          self.types = types
        if custom is not None:
          self.custom = custom
        if config_identifies is not None:
          self.config_identifies = config_identifies

    @property
    def name(self):
        """
        Gets the name of this UpdateSiteTempDto.
        站点模板名称（不支持包括特殊字符' , : \"  ^ / < > = & % # ? + ! ）几项。

        :return: The name of this UpdateSiteTempDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UpdateSiteTempDto.
        站点模板名称（不支持包括特殊字符' , : \"  ^ / < > = & % # ? + ! ）几项。

        :param name: The name of this UpdateSiteTempDto.
        :type: str
        """
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def types(self):
        """
        Gets the types of this UpdateSiteTempDto.
        站点模板类型列表，可为AP，LSW，FW。

        :return: The types of this UpdateSiteTempDto.
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this UpdateSiteTempDto.
        站点模板类型列表，可为AP，LSW，FW。

        :param types: The types of this UpdateSiteTempDto.
        :type: list[str]
        """

        self._types = types

    @property
    def custom(self):
        """
        Gets the custom of this UpdateSiteTempDto.
        是否定制特性。

        :return: The custom of this UpdateSiteTempDto.
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """
        Sets the custom of this UpdateSiteTempDto.
        是否定制特性。

        :param custom: The custom of this UpdateSiteTempDto.
        :type: bool
        """

        self._custom = custom

    @property
    def config_identifies(self):
        """
        Gets the config_identifies of this UpdateSiteTempDto.
        \"当custom为true时必填且不能为空，支持定制的特性，和站点模板类型有对应关系（所有站点模板类型都支持定制通用配置特性：   snmp -- SNMP、   clientdata -- 运维配置(O&M Parameters)、   bootrom -- BootROM、   time -- NTP时间(NTP Time)、   initloginuser -- 本地用户(Local User)； AP站点模板类型单独支持定制特性：   apssid -- AP SSID、   groupradio -- 射频(Radio)； FW站点模板类型单独支持定制特性：   fwtrafficpolicy -- 流量策略(Traffic Policy)、   fwsecureauth -- 认证(Authentication)、   fwssid -- FW SSID、   fwsecuritypolicy -- 安全策略(Security Policy)； LSW站点模板类型无单独支持的定制特性）。\" 

        :return: The config_identifies of this UpdateSiteTempDto.
        :rtype: list[str]
        """
        return self._config_identifies

    @config_identifies.setter
    def config_identifies(self, config_identifies):
        """
        Sets the config_identifies of this UpdateSiteTempDto.
        \"当custom为true时必填且不能为空，支持定制的特性，和站点模板类型有对应关系（所有站点模板类型都支持定制通用配置特性：   snmp -- SNMP、   clientdata -- 运维配置(O&M Parameters)、   bootrom -- BootROM、   time -- NTP时间(NTP Time)、   initloginuser -- 本地用户(Local User)； AP站点模板类型单独支持定制特性：   apssid -- AP SSID、   groupradio -- 射频(Radio)； FW站点模板类型单独支持定制特性：   fwtrafficpolicy -- 流量策略(Traffic Policy)、   fwsecureauth -- 认证(Authentication)、   fwssid -- FW SSID、   fwsecuritypolicy -- 安全策略(Security Policy)； LSW站点模板类型无单独支持的定制特性）。\" 

        :param config_identifies: The config_identifies of this UpdateSiteTempDto.
        :type: list[str]
        """
        allowed_values = ["snmp", "clientdata", "bootrom", "time", "initloginuser", "apssid", "groupradio", "fwsecureauth", "fwssid", "fwtrafficpolicy", "fwsecuritypolicy"]
        if not set(config_identifies).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `config_identifies` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(config_identifies)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._config_identifies = config_identifies

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UpdateSiteTempDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
