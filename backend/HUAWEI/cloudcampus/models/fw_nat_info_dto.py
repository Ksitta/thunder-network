# coding: utf-8

"""
    防火墙设备NAT配置

    防火墙设备NAT配置第三方接口。

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FwNatInfoDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_index': 'int',
        'page_size': 'int',
        'total_records': 'int',
        'device_nat_policys': 'list[DeviceFwNatInfoDto]'
    }

    attribute_map = {
        'page_index': 'pageIndex',
        'page_size': 'pageSize',
        'total_records': 'totalRecords',
        'device_nat_policys': 'deviceNatPolicys'
    }

    def __init__(self, page_index=None, page_size=None, total_records=None, device_nat_policys=None):
        """
        FwNatInfoDto - a model defined in Swagger
        """

        self._page_index = None
        self._page_size = None
        self._total_records = None
        self._device_nat_policys = None

        if page_index is not None:
          self.page_index = page_index
        if page_size is not None:
          self.page_size = page_size
        if total_records is not None:
          self.total_records = total_records
        if device_nat_policys is not None:
          self.device_nat_policys = device_nat_policys

    @property
    def page_index(self):
        """
        Gets the page_index of this FwNatInfoDto.
        页面索引。

        :return: The page_index of this FwNatInfoDto.
        :rtype: int
        """
        return self._page_index

    @page_index.setter
    def page_index(self, page_index):
        """
        Sets the page_index of this FwNatInfoDto.
        页面索引。

        :param page_index: The page_index of this FwNatInfoDto.
        :type: int
        """
        if page_index is not None and page_index > 65535:
            raise ValueError("Invalid value for `page_index`, must be a value less than or equal to `65535`")
        if page_index is not None and page_index < 1:
            raise ValueError("Invalid value for `page_index`, must be a value greater than or equal to `1`")

        self._page_index = page_index

    @property
    def page_size(self):
        """
        Gets the page_size of this FwNatInfoDto.
        每页显示记录数。

        :return: The page_size of this FwNatInfoDto.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this FwNatInfoDto.
        每页显示记录数。

        :param page_size: The page_size of this FwNatInfoDto.
        :type: int
        """
        if page_size is not None and page_size > 1000:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `1000`")
        if page_size is not None and page_size < 1:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1`")

        self._page_size = page_size

    @property
    def total_records(self):
        """
        Gets the total_records of this FwNatInfoDto.
        总记录数。

        :return: The total_records of this FwNatInfoDto.
        :rtype: int
        """
        return self._total_records

    @total_records.setter
    def total_records(self, total_records):
        """
        Sets the total_records of this FwNatInfoDto.
        总记录数。

        :param total_records: The total_records of this FwNatInfoDto.
        :type: int
        """
        if total_records is not None and total_records > 65535:
            raise ValueError("Invalid value for `total_records`, must be a value less than or equal to `65535`")
        if total_records is not None and total_records < 1:
            raise ValueError("Invalid value for `total_records`, must be a value greater than or equal to `1`")

        self._total_records = total_records

    @property
    def device_nat_policys(self):
        """
        Gets the device_nat_policys of this FwNatInfoDto.
        防火墙设备NAT配置信息。

        :return: The device_nat_policys of this FwNatInfoDto.
        :rtype: list[DeviceFwNatInfoDto]
        """
        return self._device_nat_policys

    @device_nat_policys.setter
    def device_nat_policys(self, device_nat_policys):
        """
        Sets the device_nat_policys of this FwNatInfoDto.
        防火墙设备NAT配置信息。

        :param device_nat_policys: The device_nat_policys of this FwNatInfoDto.
        :type: list[DeviceFwNatInfoDto]
        """

        self._device_nat_policys = device_nat_policys

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FwNatInfoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
