# coding: utf-8

"""
    站点内AP增值服务配置

    站点内AP增值服务配置北向接口，主要特性： * 查询站点内AP增值服务配置。 * 修改站点内AP增值服务配置。 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DataUploadDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mu': 'bool',
        'server_ip': 'str',
        'server_port': 'int',
        'interver': 'int',
        'rssi': 'int'
    }

    attribute_map = {
        'mu': 'mu',
        'server_ip': 'serverIp',
        'server_port': 'serverPort',
        'interver': 'interver',
        'rssi': 'rssi'
    }

    def __init__(self, mu=None, server_ip=None, server_port=None, interver=None, rssi=None):
        """
        DataUploadDto - a model defined in Swagger
        """

        self._mu = None
        self._server_ip = None
        self._server_port = None
        self._interver = None
        self._rssi = None

        if mu is not None:
          self.mu = mu
        if server_ip is not None:
          self.server_ip = server_ip
        if server_port is not None:
          self.server_port = server_port
        if interver is not None:
          self.interver = interver
        if rssi is not None:
          self.rssi = rssi

    @property
    def mu(self):
        """
        Gets the mu of this DataUploadDto.
        是否开启上传功能，将终端位置信息上报到指定服务器。

        :return: The mu of this DataUploadDto.
        :rtype: bool
        """
        return self._mu

    @mu.setter
    def mu(self, mu):
        """
        Sets the mu of this DataUploadDto.
        是否开启上传功能，将终端位置信息上报到指定服务器。

        :param mu: The mu of this DataUploadDto.
        :type: bool
        """

        self._mu = mu

    @property
    def server_ip(self):
        """
        Gets the server_ip of this DataUploadDto.
        服务器IP/域名。当mu为true时，serverIp必填。

        :return: The server_ip of this DataUploadDto.
        :rtype: str
        """
        return self._server_ip

    @server_ip.setter
    def server_ip(self, server_ip):
        """
        Sets the server_ip of this DataUploadDto.
        服务器IP/域名。当mu为true时，serverIp必填。

        :param server_ip: The server_ip of this DataUploadDto.
        :type: str
        """

        self._server_ip = server_ip

    @property
    def server_port(self):
        """
        Gets the server_port of this DataUploadDto.
        端口号，必须为1-65535范围内的整数，不填默认为10031。端口号跟服务器IP/域名要么都填，要么都不填。

        :return: The server_port of this DataUploadDto.
        :rtype: int
        """
        return self._server_port

    @server_port.setter
    def server_port(self, server_port):
        """
        Sets the server_port of this DataUploadDto.
        端口号，必须为1-65535范围内的整数，不填默认为10031。端口号跟服务器IP/域名要么都填，要么都不填。

        :param server_port: The server_port of this DataUploadDto.
        :type: int
        """
        if server_port is not None and server_port > 65535:
            raise ValueError("Invalid value for `server_port`, must be a value less than or equal to `65535`")
        if server_port is not None and server_port < 1:
            raise ValueError("Invalid value for `server_port`, must be a value greater than or equal to `1`")

        self._server_port = server_port

    @property
    def interver(self):
        """
        Gets the interver of this DataUploadDto.
        上报周期，单位为ms，必须是500-60000范围内的整数，不填默认为20000。

        :return: The interver of this DataUploadDto.
        :rtype: int
        """
        return self._interver

    @interver.setter
    def interver(self, interver):
        """
        Sets the interver of this DataUploadDto.
        上报周期，单位为ms，必须是500-60000范围内的整数，不填默认为20000。

        :param interver: The interver of this DataUploadDto.
        :type: int
        """
        if interver is not None and interver > 60000:
            raise ValueError("Invalid value for `interver`, must be a value less than or equal to `60000`")
        if interver is not None and interver < 500:
            raise ValueError("Invalid value for `interver`, must be a value greater than or equal to `500`")

        self._interver = interver

    @property
    def rssi(self):
        """
        Gets the rssi of this DataUploadDto.
        阀值，必须为-95-0范围内的整数，不填默认为-75。

        :return: The rssi of this DataUploadDto.
        :rtype: int
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """
        Sets the rssi of this DataUploadDto.
        阀值，必须为-95-0范围内的整数，不填默认为-75。

        :param rssi: The rssi of this DataUploadDto.
        :type: int
        """
        self._rssi = rssi

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DataUploadDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
