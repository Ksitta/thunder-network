# coding: utf-8

"""
    设备升级

    · 查询设备文件 · 创建站点升级 · 查询站点升级 · 查询设备升级 · 取消设备升级 · 删除站点升级 · 重新升级设备 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UpPath(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_model': 'str',
        'target_software_id': 'str',
        'target_patch_id': 'str',
        'is_uninstall': 'int',
        'status': 'int'
    }

    attribute_map = {
        'device_model': 'deviceModel',
        'target_software_id': 'targetSoftwareId',
        'target_patch_id': 'targetPatchId',
        'is_uninstall': 'isUninstall',
        'status': 'status'
    }

    def __init__(self, device_model=None, target_software_id=None, target_patch_id=None, is_uninstall=None, status=None):
        """
        UpPath - a model defined in Swagger
        """

        self._device_model = None
        self._target_software_id = None
        self._target_patch_id = None
        self._is_uninstall = None
        self._status = None

        if device_model is not None:
          self.device_model = device_model
        if target_software_id is not None:
          self.target_software_id = target_software_id
        if target_patch_id is not None:
          self.target_patch_id = target_patch_id
        if is_uninstall is not None:
          self.is_uninstall = is_uninstall
        if status is not None:
          self.status = status

    @property
    def device_model(self):
        """
        Gets the device_model of this UpPath.
        设备款型。

        :return: The device_model of this UpPath.
        :rtype: str
        """
        return self._device_model

    @device_model.setter
    def device_model(self, device_model):
        """
        Sets the device_model of this UpPath.
        设备款型。

        :param device_model: The device_model of this UpPath.
        :type: str
        """
        if device_model is not None and len(device_model) > 256:
            raise ValueError("Invalid value for `device_model`, length must be less than or equal to `256`")
        if device_model is not None and len(device_model) < 0:
            raise ValueError("Invalid value for `device_model`, length must be greater than or equal to `0`")

        self._device_model = device_model

    @property
    def target_software_id(self):
        """
        Gets the target_software_id of this UpPath.
        目标软件版本ID。从/version这个接口的返回的pkgList获取。targetSoftwareId和targetPatchId至少填一个。

        :return: The target_software_id of this UpPath.
        :rtype: str
        """
        return self._target_software_id

    @target_software_id.setter
    def target_software_id(self, target_software_id):
        """
        Sets the target_software_id of this UpPath.
        目标软件版本ID。从/version这个接口的返回的pkgList获取。targetSoftwareId和targetPatchId至少填一个。

        :param target_software_id: The target_software_id of this UpPath.
        :type: str
        """

        self._target_software_id = target_software_id

    @property
    def target_patch_id(self):
        """
        Gets the target_patch_id of this UpPath.
        目标补丁ID。从/version这个接口的返回的pkgPatchMap获取。targetSoftwareId和targetPatchId至少填一个。

        :return: The target_patch_id of this UpPath.
        :rtype: str
        """
        return self._target_patch_id

    @target_patch_id.setter
    def target_patch_id(self, target_patch_id):
        """
        Sets the target_patch_id of this UpPath.
        目标补丁ID。从/version这个接口的返回的pkgPatchMap获取。targetSoftwareId和targetPatchId至少填一个。

        :param target_patch_id: The target_patch_id of this UpPath.
        :type: str
        """

        self._target_patch_id = target_patch_id

    @property
    def is_uninstall(self):
        """
        Gets the is_uninstall of this UpPath.
        是否卸载旧补丁。 1：是 0：否 

        :return: The is_uninstall of this UpPath.
        :rtype: int
        """
        return self._is_uninstall

    @is_uninstall.setter
    def is_uninstall(self, is_uninstall):
        """
        Sets the is_uninstall of this UpPath.
        是否卸载旧补丁。 1：是 0：否 

        :param is_uninstall: The is_uninstall of this UpPath.
        :type: int
        """
        if is_uninstall is not None and is_uninstall > 1:
            raise ValueError("Invalid value for `is_uninstall`, must be a value less than or equal to `1`")
        if is_uninstall is not None and is_uninstall < 0:
            raise ValueError("Invalid value for `is_uninstall`, must be a value greater than or equal to `0`")

        self._is_uninstall = is_uninstall

    @property
    def status(self):
        """
        Gets the status of this UpPath.
        升级状态。查询站点升级计划和详情时返回。 0：未创建升级任务 1：无需升级 2：升级成功 3：升级失败 4：下载完成 5：升级中 创建多站点升级计划时无需填写。 

        :return: The status of this UpPath.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this UpPath.
        升级状态。查询站点升级计划和详情时返回。 0：未创建升级任务 1：无需升级 2：升级成功 3：升级失败 4：下载完成 5：升级中 创建多站点升级计划时无需填写。 

        :param status: The status of this UpPath.
        :type: int
        """
        if status is not None and status > 10:
            raise ValueError("Invalid value for `status`, must be a value less than or equal to `10`")
        if status is not None and status < 0:
            raise ValueError("Invalid value for `status`, must be a value greater than or equal to `0`")

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UpPath):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
