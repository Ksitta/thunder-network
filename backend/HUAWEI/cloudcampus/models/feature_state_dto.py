# coding: utf-8

"""
    配置结果查询

    查询配置结果

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FeatureStateDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature_identify': 'str',
        'state': 'int',
        'feature_items': 'list[FeatureItemStateDto]'
    }

    attribute_map = {
        'feature_identify': 'featureIdentify',
        'state': 'state',
        'feature_items': 'featureItems'
    }

    def __init__(self, feature_identify=None, state=None, feature_items=None):
        """
        FeatureStateDto - a model defined in Swagger
        """

        self._feature_identify = None
        self._state = None
        self._feature_items = None

        if feature_identify is not None:
          self.feature_identify = feature_identify
        if state is not None:
          self.state = state
        if feature_items is not None:
          self.feature_items = feature_items

    @property
    def feature_identify(self):
        """
        Gets the feature_identify of this FeatureStateDto.
        特性类型。

        :return: The feature_identify of this FeatureStateDto.
        :rtype: str
        """
        return self._feature_identify

    @feature_identify.setter
    def feature_identify(self, feature_identify):
        """
        Sets the feature_identify of this FeatureStateDto.
        特性类型。

        :param feature_identify: The feature_identify of this FeatureStateDto.
        :type: str
        """

        self._feature_identify = feature_identify

    @property
    def state(self):
        """
        Gets the state of this FeatureStateDto.
        配置下发状态，取值范围：0---成功；1---告警；2---预配置；3---失败；4---正在下发。

        :return: The state of this FeatureStateDto.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this FeatureStateDto.
        配置下发状态，取值范围：0---成功；1---告警；2---预配置；3---失败；4---正在下发。

        :param state: The state of this FeatureStateDto.
        :type: int
        """

        self._state = state

    @property
    def feature_items(self):
        """
        Gets the feature_items of this FeatureStateDto.
        设备对应特性的配置结果。

        :return: The feature_items of this FeatureStateDto.
        :rtype: list[FeatureItemStateDto]
        """
        return self._feature_items

    @feature_items.setter
    def feature_items(self, feature_items):
        """
        Sets the feature_items of this FeatureStateDto.
        设备对应特性的配置结果。

        :param feature_items: The feature_items of this FeatureStateDto.
        :type: list[FeatureItemStateDto]
        """

        self._feature_items = feature_items

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FeatureStateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
