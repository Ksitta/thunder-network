# coding: utf-8

"""
    终端用户列表信息查询

    · 站点维度终端用户列表查询 · 站点维度TopN终端流量数据查询 · 设备维度下终端用户信息查询 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StationInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_time': 'int',
        'access_type': 'int',
        'account': 'str',
        'device_name': 'str',
        'auth_type': 'str',
        'channel': 'int',
        'cumulative_traffic': 'int',
        'downward_speed': 'int',
        'dual_frequency': 'int',
        'frequency_band': 'int',
        'host_name': 'str',
        'mode': 'int',
        'online_status': 'int',
        'online_time': 'int',
        'package_loss_rate': 'int',
        'port_index': 'int',
        'retrans_rate': 'int',
        'rssi': 'int',
        'send_package_speed': 'int',
        'signal_noise_ratio': 'int',
        'ssid': 'str',
        'sticky_tags': 'int',
        'terminal_ip': 'str',
        'terminal_mac': 'str',
        'upward_speed': 'int',
        'vlan': 'int'
    }

    attribute_map = {
        'access_time': 'accessTime',
        'access_type': 'accessType',
        'account': 'account',
        'device_name': 'deviceName',
        'auth_type': 'authType',
        'channel': 'channel',
        'cumulative_traffic': 'cumulativeTraffic',
        'downward_speed': 'downwardSpeed',
        'dual_frequency': 'dualFrequency',
        'frequency_band': 'frequencyBand',
        'host_name': 'hostName',
        'mode': 'mode',
        'online_status': 'onlineStatus',
        'online_time': 'onlineTime',
        'package_loss_rate': 'packageLossRate',
        'port_index': 'portIndex',
        'retrans_rate': 'retransRate',
        'rssi': 'rssi',
        'send_package_speed': 'sendPackageSpeed',
        'signal_noise_ratio': 'signalNoiseRatio',
        'ssid': 'ssid',
        'sticky_tags': 'stickyTags',
        'terminal_ip': 'terminalIP',
        'terminal_mac': 'terminalMac',
        'upward_speed': 'upwardSpeed',
        'vlan': 'vlan'
    }

    def __init__(self, access_time=None, access_type=None, account=None, device_name=None, auth_type=None, channel=None, cumulative_traffic=None, downward_speed=None, dual_frequency=None, frequency_band=None, host_name=None, mode=None, online_status=None, online_time=None, package_loss_rate=None, port_index=None, retrans_rate=None, rssi=None, send_package_speed=None, signal_noise_ratio=None, ssid=None, sticky_tags=None, terminal_ip=None, terminal_mac=None, upward_speed=None, vlan=None):
        """
        StationInfo - a model defined in Swagger
        """

        self._access_time = None
        self._access_type = None
        self._account = None
        self._device_name = None
        self._auth_type = None
        self._channel = None
        self._cumulative_traffic = None
        self._downward_speed = None
        self._dual_frequency = None
        self._frequency_band = None
        self._host_name = None
        self._mode = None
        self._online_status = None
        self._online_time = None
        self._package_loss_rate = None
        self._port_index = None
        self._retrans_rate = None
        self._rssi = None
        self._send_package_speed = None
        self._signal_noise_ratio = None
        self._ssid = None
        self._sticky_tags = None
        self._terminal_ip = None
        self._terminal_mac = None
        self._upward_speed = None
        self._vlan = None

        if access_time is not None:
          self.access_time = access_time
        if access_type is not None:
          self.access_type = access_type
        if account is not None:
          self.account = account
        if device_name is not None:
          self.device_name = device_name
        if auth_type is not None:
          self.auth_type = auth_type
        if channel is not None:
          self.channel = channel
        if cumulative_traffic is not None:
          self.cumulative_traffic = cumulative_traffic
        if downward_speed is not None:
          self.downward_speed = downward_speed
        if dual_frequency is not None:
          self.dual_frequency = dual_frequency
        if frequency_band is not None:
          self.frequency_band = frequency_band
        if host_name is not None:
          self.host_name = host_name
        if mode is not None:
          self.mode = mode
        if online_status is not None:
          self.online_status = online_status
        if online_time is not None:
          self.online_time = online_time
        if package_loss_rate is not None:
          self.package_loss_rate = package_loss_rate
        if port_index is not None:
          self.port_index = port_index
        if retrans_rate is not None:
          self.retrans_rate = retrans_rate
        if rssi is not None:
          self.rssi = rssi
        if send_package_speed is not None:
          self.send_package_speed = send_package_speed
        if signal_noise_ratio is not None:
          self.signal_noise_ratio = signal_noise_ratio
        if ssid is not None:
          self.ssid = ssid
        if sticky_tags is not None:
          self.sticky_tags = sticky_tags
        if terminal_ip is not None:
          self.terminal_ip = terminal_ip
        if terminal_mac is not None:
          self.terminal_mac = terminal_mac
        if upward_speed is not None:
          self.upward_speed = upward_speed
        if vlan is not None:
          self.vlan = vlan

    @property
    def access_time(self):
        """
        Gets the access_time of this StationInfo.
        用户接入的格林威治时间，单位：秒。

        :return: The access_time of this StationInfo.
        :rtype: int
        """
        return self._access_time

    @access_time.setter
    def access_time(self, access_time):
        """
        Sets the access_time of this StationInfo.
        用户接入的格林威治时间，单位：秒。

        :param access_time: The access_time of this StationInfo.
        :type: int
        """
        if access_time is not None and access_time > 9223372036854775807:
            raise ValueError("Invalid value for `access_time`, must be a value less than or equal to `9223372036854775807`")
        if access_time is not None and access_time < 0:
            raise ValueError("Invalid value for `access_time`, must be a value greater than or equal to `0`")

        self._access_time = access_time

    @property
    def access_type(self):
        """
        Gets the access_type of this StationInfo.
        接入类型，0---有线接入，1---无线接入。

        :return: The access_type of this StationInfo.
        :rtype: int
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """
        Sets the access_type of this StationInfo.
        接入类型，0---有线接入，1---无线接入。

        :param access_type: The access_type of this StationInfo.
        :type: int
        """
        if access_type is not None and access_type > 2147483647:
            raise ValueError("Invalid value for `access_type`, must be a value less than or equal to `2147483647`")
        if access_type is not None and access_type < 0:
            raise ValueError("Invalid value for `access_type`, must be a value greater than or equal to `0`")

        self._access_type = access_type

    @property
    def account(self):
        """
        Gets the account of this StationInfo.
        用户名称。

        :return: The account of this StationInfo.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this StationInfo.
        用户名称。

        :param account: The account of this StationInfo.
        :type: str
        """
        if account is not None and len(account) > 256:
            raise ValueError("Invalid value for `account`, length must be less than or equal to `256`")
        if account is not None and len(account) < 0:
            raise ValueError("Invalid value for `account`, length must be greater than or equal to `0`")

        self._account = account

    @property
    def device_name(self):
        """
        Gets the device_name of this StationInfo.
        关联设备的名称。

        :return: The device_name of this StationInfo.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """
        Sets the device_name of this StationInfo.
        关联设备的名称。

        :param device_name: The device_name of this StationInfo.
        :type: str
        """
        if device_name is not None and len(device_name) > 256:
            raise ValueError("Invalid value for `device_name`, length must be less than or equal to `256`")
        if device_name is not None and len(device_name) < 0:
            raise ValueError("Invalid value for `device_name`, length must be greater than or equal to `0`")

        self._device_name = device_name

    @property
    def auth_type(self):
        """
        Gets the auth_type of this StationInfo.
        接入设备认证方式。

        :return: The auth_type of this StationInfo.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """
        Sets the auth_type of this StationInfo.
        接入设备认证方式。

        :param auth_type: The auth_type of this StationInfo.
        :type: str
        """
        if auth_type is not None and len(auth_type) > 256:
            raise ValueError("Invalid value for `auth_type`, length must be less than or equal to `256`")
        if auth_type is not None and len(auth_type) < 0:
            raise ValueError("Invalid value for `auth_type`, length must be greater than or equal to `0`")

        self._auth_type = auth_type

    @property
    def channel(self):
        """
        Gets the channel of this StationInfo.
        无线信道。

        :return: The channel of this StationInfo.
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """
        Sets the channel of this StationInfo.
        无线信道。

        :param channel: The channel of this StationInfo.
        :type: int
        """
        if channel is not None and channel > 256:
            raise ValueError("Invalid value for `channel`, must be a value less than or equal to `256`")
        if channel is not None and channel < 0:
            raise ValueError("Invalid value for `channel`, must be a value greater than or equal to `0`")

        self._channel = channel

    @property
    def cumulative_traffic(self):
        """
        Gets the cumulative_traffic of this StationInfo.
        累计上下行流量，单位：字节。

        :return: The cumulative_traffic of this StationInfo.
        :rtype: int
        """
        return self._cumulative_traffic

    @cumulative_traffic.setter
    def cumulative_traffic(self, cumulative_traffic):
        """
        Sets the cumulative_traffic of this StationInfo.
        累计上下行流量，单位：字节。

        :param cumulative_traffic: The cumulative_traffic of this StationInfo.
        :type: int
        """
        if cumulative_traffic is not None and cumulative_traffic > 9223372036854775807:
            raise ValueError("Invalid value for `cumulative_traffic`, must be a value less than or equal to `9223372036854775807`")
        if cumulative_traffic is not None and cumulative_traffic < 0:
            raise ValueError("Invalid value for `cumulative_traffic`, must be a value greater than or equal to `0`")

        self._cumulative_traffic = cumulative_traffic

    @property
    def downward_speed(self):
        """
        Gets the downward_speed of this StationInfo.
        下行速率，单位：bps，最后一个统计周期内的平均值，统计周期为5分钟。

        :return: The downward_speed of this StationInfo.
        :rtype: int
        """
        return self._downward_speed

    @downward_speed.setter
    def downward_speed(self, downward_speed):
        """
        Sets the downward_speed of this StationInfo.
        下行速率，单位：bps，最后一个统计周期内的平均值，统计周期为5分钟。

        :param downward_speed: The downward_speed of this StationInfo.
        :type: int
        """
        if downward_speed is not None and downward_speed > 9223372036854775807:
            raise ValueError("Invalid value for `downward_speed`, must be a value less than or equal to `9223372036854775807`")
        if downward_speed is not None and downward_speed < 0:
            raise ValueError("Invalid value for `downward_speed`, must be a value greater than or equal to `0`")

        self._downward_speed = downward_speed

    @property
    def dual_frequency(self):
        """
        Gets the dual_frequency of this StationInfo.
        双频能力，0-支持2.4G、1-支持5G。

        :return: The dual_frequency of this StationInfo.
        :rtype: int
        """
        return self._dual_frequency

    @dual_frequency.setter
    def dual_frequency(self, dual_frequency):
        """
        Sets the dual_frequency of this StationInfo.
        双频能力，0-支持2.4G、1-支持5G。

        :param dual_frequency: The dual_frequency of this StationInfo.
        :type: int
        """
        if dual_frequency is not None and dual_frequency > 2147483647:
            raise ValueError("Invalid value for `dual_frequency`, must be a value less than or equal to `2147483647`")
        if dual_frequency is not None and dual_frequency < 0:
            raise ValueError("Invalid value for `dual_frequency`, must be a value greater than or equal to `0`")

        self._dual_frequency = dual_frequency

    @property
    def frequency_band(self):
        """
        Gets the frequency_band of this StationInfo.
        关联频段，1-2.4G、2-5G。

        :return: The frequency_band of this StationInfo.
        :rtype: int
        """
        return self._frequency_band

    @frequency_band.setter
    def frequency_band(self, frequency_band):
        """
        Sets the frequency_band of this StationInfo.
        关联频段，1-2.4G、2-5G。

        :param frequency_band: The frequency_band of this StationInfo.
        :type: int
        """
        if frequency_band is not None and frequency_band > 2147483647:
            raise ValueError("Invalid value for `frequency_band`, must be a value less than or equal to `2147483647`")
        if frequency_band is not None and frequency_band < 0:
            raise ValueError("Invalid value for `frequency_band`, must be a value greater than or equal to `0`")

        self._frequency_band = frequency_band

    @property
    def host_name(self):
        """
        Gets the host_name of this StationInfo.
        终端设备名称。

        :return: The host_name of this StationInfo.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """
        Sets the host_name of this StationInfo.
        终端设备名称。

        :param host_name: The host_name of this StationInfo.
        :type: str
        """
        if host_name is not None and len(host_name) > 256:
            raise ValueError("Invalid value for `host_name`, length must be less than or equal to `256`")
        if host_name is not None and len(host_name) < 0:
            raise ValueError("Invalid value for `host_name`, length must be greater than or equal to `0`")

        self._host_name = host_name

    @property
    def mode(self):
        """
        Gets the mode of this StationInfo.
        模式，0-802.11b、1-802.11g、2-802.11n、3-802.11a、4-802.11ac。

        :return: The mode of this StationInfo.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this StationInfo.
        模式，0-802.11b、1-802.11g、2-802.11n、3-802.11a、4-802.11ac。

        :param mode: The mode of this StationInfo.
        :type: int
        """
        if mode is not None and mode > 2147483647:
            raise ValueError("Invalid value for `mode`, must be a value less than or equal to `2147483647`")
        if mode is not None and mode < 0:
            raise ValueError("Invalid value for `mode`, must be a value greater than or equal to `0`")

        self._mode = mode

    @property
    def online_status(self):
        """
        Gets the online_status of this StationInfo.
        在线状态，1---在线、2---离线。

        :return: The online_status of this StationInfo.
        :rtype: int
        """
        return self._online_status

    @online_status.setter
    def online_status(self, online_status):
        """
        Sets the online_status of this StationInfo.
        在线状态，1---在线、2---离线。

        :param online_status: The online_status of this StationInfo.
        :type: int
        """
        if online_status is not None and online_status > 2147483647:
            raise ValueError("Invalid value for `online_status`, must be a value less than or equal to `2147483647`")
        if online_status is not None and online_status < 0:
            raise ValueError("Invalid value for `online_status`, must be a value greater than or equal to `0`")

        self._online_status = online_status

    @property
    def online_time(self):
        """
        Gets the online_time of this StationInfo.
        在线时长，单位：秒。

        :return: The online_time of this StationInfo.
        :rtype: int
        """
        return self._online_time

    @online_time.setter
    def online_time(self, online_time):
        """
        Sets the online_time of this StationInfo.
        在线时长，单位：秒。

        :param online_time: The online_time of this StationInfo.
        :type: int
        """
        if online_time is not None and online_time > 9223372036854775807:
            raise ValueError("Invalid value for `online_time`, must be a value less than or equal to `9223372036854775807`")
        if online_time is not None and online_time < 0:
            raise ValueError("Invalid value for `online_time`, must be a value greater than or equal to `0`")

        self._online_time = online_time

    @property
    def package_loss_rate(self):
        """
        Gets the package_loss_rate of this StationInfo.
        丢包率（上报周期内），单位：百分比。

        :return: The package_loss_rate of this StationInfo.
        :rtype: int
        """
        return self._package_loss_rate

    @package_loss_rate.setter
    def package_loss_rate(self, package_loss_rate):
        """
        Sets the package_loss_rate of this StationInfo.
        丢包率（上报周期内），单位：百分比。

        :param package_loss_rate: The package_loss_rate of this StationInfo.
        :type: int
        """
        if package_loss_rate is not None and package_loss_rate > 2147483647:
            raise ValueError("Invalid value for `package_loss_rate`, must be a value less than or equal to `2147483647`")
        if package_loss_rate is not None and package_loss_rate < 0:
            raise ValueError("Invalid value for `package_loss_rate`, must be a value greater than or equal to `0`")

        self._package_loss_rate = package_loss_rate

    @property
    def port_index(self):
        """
        Gets the port_index of this StationInfo.
        接入端口索引，不推荐使用。

        :return: The port_index of this StationInfo.
        :rtype: int
        """
        return self._port_index

    @port_index.setter
    def port_index(self, port_index):
        """
        Sets the port_index of this StationInfo.
        接入端口索引，不推荐使用。

        :param port_index: The port_index of this StationInfo.
        :type: int
        """
        if port_index is not None and port_index > 2048:
            raise ValueError("Invalid value for `port_index`, must be a value less than or equal to `2048`")
        if port_index is not None and port_index < 0:
            raise ValueError("Invalid value for `port_index`, must be a value greater than or equal to `0`")

        self._port_index = port_index

    @property
    def retrans_rate(self):
        """
        Gets the retrans_rate of this StationInfo.
        重传率（上报周期内），单位：百分比。

        :return: The retrans_rate of this StationInfo.
        :rtype: int
        """
        return self._retrans_rate

    @retrans_rate.setter
    def retrans_rate(self, retrans_rate):
        """
        Sets the retrans_rate of this StationInfo.
        重传率（上报周期内），单位：百分比。

        :param retrans_rate: The retrans_rate of this StationInfo.
        :type: int
        """
        if retrans_rate is not None and retrans_rate > 100:
            raise ValueError("Invalid value for `retrans_rate`, must be a value less than or equal to `100`")
        if retrans_rate is not None and retrans_rate < 0:
            raise ValueError("Invalid value for `retrans_rate`, must be a value greater than or equal to `0`")

        self._retrans_rate = retrans_rate

    @property
    def rssi(self):
        """
        Gets the rssi of this StationInfo.
        信号强度，单位：dBm。

        :return: The rssi of this StationInfo.
        :rtype: int
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """
        Sets the rssi of this StationInfo.
        信号强度，单位：dBm。

        :param rssi: The rssi of this StationInfo.
        :type: int
        """
        self._rssi = rssi

    @property
    def send_package_speed(self):
        """
        Gets the send_package_speed of this StationInfo.
        实际发包速率（协商速率），单位：bps。

        :return: The send_package_speed of this StationInfo.
        :rtype: int
        """
        return self._send_package_speed

    @send_package_speed.setter
    def send_package_speed(self, send_package_speed):
        """
        Sets the send_package_speed of this StationInfo.
        实际发包速率（协商速率），单位：bps。

        :param send_package_speed: The send_package_speed of this StationInfo.
        :type: int
        """
        if send_package_speed is not None and send_package_speed > 2147483647:
            raise ValueError("Invalid value for `send_package_speed`, must be a value less than or equal to `2147483647`")
        if send_package_speed is not None and send_package_speed < 0:
            raise ValueError("Invalid value for `send_package_speed`, must be a value greater than or equal to `0`")

        self._send_package_speed = send_package_speed

    @property
    def signal_noise_ratio(self):
        """
        Gets the signal_noise_ratio of this StationInfo.
        信噪比（上报周期内），单位：dB。

        :return: The signal_noise_ratio of this StationInfo.
        :rtype: int
        """
        return self._signal_noise_ratio

    @signal_noise_ratio.setter
    def signal_noise_ratio(self, signal_noise_ratio):
        """
        Sets the signal_noise_ratio of this StationInfo.
        信噪比（上报周期内），单位：dB。

        :param signal_noise_ratio: The signal_noise_ratio of this StationInfo.
        :type: int
        """
        if signal_noise_ratio is not None and signal_noise_ratio > 2147483647:
            raise ValueError("Invalid value for `signal_noise_ratio`, must be a value less than or equal to `2147483647`")
        if signal_noise_ratio is not None and signal_noise_ratio < 0:
            raise ValueError("Invalid value for `signal_noise_ratio`, must be a value greater than or equal to `0`")

        self._signal_noise_ratio = signal_noise_ratio

    @property
    def ssid(self):
        """
        Gets the ssid of this StationInfo.
        SSID名称。

        :return: The ssid of this StationInfo.
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """
        Sets the ssid of this StationInfo.
        SSID名称。

        :param ssid: The ssid of this StationInfo.
        :type: str
        """
        if ssid is not None and len(ssid) > 256:
            raise ValueError("Invalid value for `ssid`, length must be less than or equal to `256`")
        if ssid is not None and len(ssid) < 0:
            raise ValueError("Invalid value for `ssid`, length must be greater than or equal to `0`")

        self._ssid = ssid

    @property
    def sticky_tags(self):
        """
        Gets the sticky_tags of this StationInfo.
        粘性标记，0---no、1---yes，粘性终端标记含义：信号低、速率低且不漫游的终端。

        :return: The sticky_tags of this StationInfo.
        :rtype: int
        """
        return self._sticky_tags

    @sticky_tags.setter
    def sticky_tags(self, sticky_tags):
        """
        Sets the sticky_tags of this StationInfo.
        粘性标记，0---no、1---yes，粘性终端标记含义：信号低、速率低且不漫游的终端。

        :param sticky_tags: The sticky_tags of this StationInfo.
        :type: int
        """
        if sticky_tags is not None and sticky_tags > 2147483647:
            raise ValueError("Invalid value for `sticky_tags`, must be a value less than or equal to `2147483647`")
        if sticky_tags is not None and sticky_tags < 0:
            raise ValueError("Invalid value for `sticky_tags`, must be a value greater than or equal to `0`")

        self._sticky_tags = sticky_tags

    @property
    def terminal_ip(self):
        """
        Gets the terminal_ip of this StationInfo.
        终端IP。

        :return: The terminal_ip of this StationInfo.
        :rtype: str
        """
        return self._terminal_ip

    @terminal_ip.setter
    def terminal_ip(self, terminal_ip):
        """
        Sets the terminal_ip of this StationInfo.
        终端IP。

        :param terminal_ip: The terminal_ip of this StationInfo.
        :type: str
        """
        if terminal_ip is not None and len(terminal_ip) > 128:
            raise ValueError("Invalid value for `terminal_ip`, length must be less than or equal to `128`")
        if terminal_ip is not None and len(terminal_ip) < 0:
            raise ValueError("Invalid value for `terminal_ip`, length must be greater than or equal to `0`")

        self._terminal_ip = terminal_ip

    @property
    def terminal_mac(self):
        """
        Gets the terminal_mac of this StationInfo.
        终端MAC。

        :return: The terminal_mac of this StationInfo.
        :rtype: str
        """
        return self._terminal_mac

    @terminal_mac.setter
    def terminal_mac(self, terminal_mac):
        """
        Sets the terminal_mac of this StationInfo.
        终端MAC。

        :param terminal_mac: The terminal_mac of this StationInfo.
        :type: str
        """
        if terminal_mac is not None and len(terminal_mac) > 256:
            raise ValueError("Invalid value for `terminal_mac`, length must be less than or equal to `256`")
        if terminal_mac is not None and len(terminal_mac) < 0:
            raise ValueError("Invalid value for `terminal_mac`, length must be greater than or equal to `0`")

        self._terminal_mac = terminal_mac

    @property
    def upward_speed(self):
        """
        Gets the upward_speed of this StationInfo.
        上行速率，单位：bps，最后一个统计周期内的平均值，统计周期为5分钟。

        :return: The upward_speed of this StationInfo.
        :rtype: int
        """
        return self._upward_speed

    @upward_speed.setter
    def upward_speed(self, upward_speed):
        """
        Sets the upward_speed of this StationInfo.
        上行速率，单位：bps，最后一个统计周期内的平均值，统计周期为5分钟。

        :param upward_speed: The upward_speed of this StationInfo.
        :type: int
        """
        if upward_speed is not None and upward_speed > 9223372036854775807:
            raise ValueError("Invalid value for `upward_speed`, must be a value less than or equal to `9223372036854775807`")
        if upward_speed is not None and upward_speed < 0:
            raise ValueError("Invalid value for `upward_speed`, must be a value greater than or equal to `0`")

        self._upward_speed = upward_speed

    @property
    def vlan(self):
        """
        Gets the vlan of this StationInfo.
        接入VLAN。

        :return: The vlan of this StationInfo.
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """
        Sets the vlan of this StationInfo.
        接入VLAN。

        :param vlan: The vlan of this StationInfo.
        :type: int
        """
        if vlan is not None and vlan > 4096:
            raise ValueError("Invalid value for `vlan`, must be a value less than or equal to `4096`")
        if vlan is not None and vlan < 0:
            raise ValueError("Invalid value for `vlan`, must be a value greater than or equal to `0`")

        self._vlan = vlan

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
