# coding: utf-8

"""
    交换机全局VLAN配置

    配置交换机全局VLAN 

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LswGlobalVlanDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vlan_id': 'int',
        'vlan_name': 'str',
        'vlan_desc': 'str',
        'ip_subnet_vlan': 'list[str]'
    }

    attribute_map = {
        'vlan_id': 'vlanId',
        'vlan_name': 'vlanName',
        'vlan_desc': 'vlanDesc',
        'ip_subnet_vlan': 'ipSubnetVlan'
    }

    def __init__(self, vlan_id=None, vlan_name=None, vlan_desc=None, ip_subnet_vlan=None):
        """
        LswGlobalVlanDto - a model defined in Swagger
        """

        self._vlan_id = None
        self._vlan_name = None
        self._vlan_desc = None
        self._ip_subnet_vlan = None

        if vlan_id is not None:
          self.vlan_id = vlan_id
        if vlan_name is not None:
          self.vlan_name = vlan_name
        if vlan_desc is not None:
          self.vlan_desc = vlan_desc
        if ip_subnet_vlan is not None:
          self.ip_subnet_vlan = ip_subnet_vlan

    @property
    def vlan_id(self):
        """
        Gets the vlan_id of this LswGlobalVlanDto.
        VLAN ID。取值范围1~4094整数。

        :return: The vlan_id of this LswGlobalVlanDto.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """
        Sets the vlan_id of this LswGlobalVlanDto.
        VLAN ID。取值范围1~4094整数。

        :param vlan_id: The vlan_id of this LswGlobalVlanDto.
        :type: int
        """
        if vlan_id is not None and vlan_id > 4094:
            raise ValueError("Invalid value for `vlan_id`, must be a value less than or equal to `4094`")
        if vlan_id is not None and vlan_id < 1:
            raise ValueError("Invalid value for `vlan_id`, must be a value greater than or equal to `1`")

        self._vlan_id = vlan_id

    @property
    def vlan_name(self):
        """
        Gets the vlan_name of this LswGlobalVlanDto.
        VLAN名称。1~31个字符，不能包含空格、制表符、？或中文字符。不允许重复。

        :return: The vlan_name of this LswGlobalVlanDto.
        :rtype: str
        """
        return self._vlan_name

    @vlan_name.setter
    def vlan_name(self, vlan_name):
        """
        Sets the vlan_name of this LswGlobalVlanDto.
        VLAN名称。1~31个字符，不能包含空格、制表符、？或中文字符。不允许重复。

        :param vlan_name: The vlan_name of this LswGlobalVlanDto.
        :type: str
        """
        if vlan_name is not None and len(vlan_name) > 31:
            raise ValueError("Invalid value for `vlan_name`, length must be less than or equal to `31`")
        if vlan_name is not None and len(vlan_name) < 1:
            raise ValueError("Invalid value for `vlan_name`, length must be greater than or equal to `1`")

        self._vlan_name = vlan_name

    @property
    def vlan_desc(self):
        """
        Gets the vlan_desc of this LswGlobalVlanDto.
        VLAN描述。可选字段，支持不超过80个字符，不能包含制表符、？和中文字符。

        :return: The vlan_desc of this LswGlobalVlanDto.
        :rtype: str
        """
        return self._vlan_desc

    @vlan_desc.setter
    def vlan_desc(self, vlan_desc):
        """
        Sets the vlan_desc of this LswGlobalVlanDto.
        VLAN描述。可选字段，支持不超过80个字符，不能包含制表符、？和中文字符。

        :param vlan_desc: The vlan_desc of this LswGlobalVlanDto.
        :type: str
        """
        if vlan_desc is not None and len(vlan_desc) > 80:
            raise ValueError("Invalid value for `vlan_desc`, length must be less than or equal to `80`")
        if vlan_desc is not None and len(vlan_desc) < 0:
            raise ValueError("Invalid value for `vlan_desc`, length must be greater than or equal to `0`")

        self._vlan_desc = vlan_desc

    @property
    def ip_subnet_vlan(self):
        """
        Gets the ip_subnet_vlan of this LswGlobalVlanDto.
        IP子网划分VLAN。

        :return: The ip_subnet_vlan of this LswGlobalVlanDto.
        :rtype: list[str]
        """
        return self._ip_subnet_vlan

    @ip_subnet_vlan.setter
    def ip_subnet_vlan(self, ip_subnet_vlan):
        """
        Sets the ip_subnet_vlan of this LswGlobalVlanDto.
        IP子网划分VLAN。

        :param ip_subnet_vlan: The ip_subnet_vlan of this LswGlobalVlanDto.
        :type: list[str]
        """

        self._ip_subnet_vlan = ip_subnet_vlan

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LswGlobalVlanDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
