# coding: utf-8

"""
    设备基础性能数据信息查询

    · 查询设备网络速率历史数据 · 查询站点维度TopN设备或者全部设备的上行流量、下行流量 · 查询站点维度设备连接终端数历史数据 · 查询单设备连接终端数历史数据 · 查询租户维度下设备状态历史数据 · 查询基于站点的站点健康度和设备健康度 · 查询站点下TOP N SSID流量和最近在线用户数 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SiteStationStatisticInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'int',
        'user24_g': 'int',
        'user5_g': 'int'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'user24_g': 'user24G',
        'user5_g': 'user5G'
    }

    def __init__(self, timestamp=None, user24_g=None, user5_g=None):
        """
        SiteStationStatisticInfo - a model defined in Swagger
        """

        self._timestamp = None
        self._user24_g = None
        self._user5_g = None

        if timestamp is not None:
          self.timestamp = timestamp
        if user24_g is not None:
          self.user24_g = user24_g
        if user5_g is not None:
          self.user5_g = user5_g

    @property
    def timestamp(self):
        """
        Gets the timestamp of this SiteStationStatisticInfo.
        格林威治时间。

        :return: The timestamp of this SiteStationStatisticInfo.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this SiteStationStatisticInfo.
        格林威治时间。

        :param timestamp: The timestamp of this SiteStationStatisticInfo.
        :type: int
        """
        if timestamp is not None and timestamp > 2147483647:
            raise ValueError("Invalid value for `timestamp`, must be a value less than or equal to `2147483647`")
        if timestamp is not None and timestamp < 0:
            raise ValueError("Invalid value for `timestamp`, must be a value greater than or equal to `0`")

        self._timestamp = timestamp

    @property
    def user24_g(self):
        """
        Gets the user24_g of this SiteStationStatisticInfo.
        2.4G用户数量。

        :return: The user24_g of this SiteStationStatisticInfo.
        :rtype: int
        """
        return self._user24_g

    @user24_g.setter
    def user24_g(self, user24_g):
        """
        Sets the user24_g of this SiteStationStatisticInfo.
        2.4G用户数量。

        :param user24_g: The user24_g of this SiteStationStatisticInfo.
        :type: int
        """
        if user24_g is not None and user24_g > 2147483647:
            raise ValueError("Invalid value for `user24_g`, must be a value less than or equal to `2147483647`")
        if user24_g is not None and user24_g < 0:
            raise ValueError("Invalid value for `user24_g`, must be a value greater than or equal to `0`")

        self._user24_g = user24_g

    @property
    def user5_g(self):
        """
        Gets the user5_g of this SiteStationStatisticInfo.
        5G用户数量。

        :return: The user5_g of this SiteStationStatisticInfo.
        :rtype: int
        """
        return self._user5_g

    @user5_g.setter
    def user5_g(self, user5_g):
        """
        Sets the user5_g of this SiteStationStatisticInfo.
        5G用户数量。

        :param user5_g: The user5_g of this SiteStationStatisticInfo.
        :type: int
        """
        if user5_g is not None and user5_g > 2147483647:
            raise ValueError("Invalid value for `user5_g`, must be a value less than or equal to `2147483647`")
        if user5_g is not None and user5_g < 0:
            raise ValueError("Invalid value for `user5_g`, must be a value greater than or equal to `0`")

        self._user5_g = user5_g

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SiteStationStatisticInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
