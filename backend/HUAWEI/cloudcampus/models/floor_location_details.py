# coding: utf-8

"""
    室内地图信息查询

    室内地图第三方北向接口。 · 查询站点中所有楼栋基本信息 · 查询楼栋中所有楼层基本信息 · 查询楼栋中所有楼层详细信息 · 查询楼栋中楼层和设备布放信息 · 查询楼栋中楼层已布放设备详细信息 · 查询楼层已布放设备位置信息 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FloorLocationDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'building_name': 'str',
        'image': 'str',
        'scale': 'float',
        'located_device_list': 'list[LocatedDeviceInfo]',
        'un_located_device_list': 'list[DeviceInfo]'
    }

    attribute_map = {
        'name': 'name',
        'building_name': 'buildingName',
        'image': 'image',
        'scale': 'scale',
        'located_device_list': 'locatedDeviceList',
        'un_located_device_list': 'unLocatedDeviceList'
    }

    def __init__(self, name=None, building_name=None, image=None, scale=None, located_device_list=None, un_located_device_list=None):
        """
        FloorLocationDetails - a model defined in Swagger
        """

        self._name = None
        self._building_name = None
        self._image = None
        self._scale = None
        self._located_device_list = None
        self._un_located_device_list = None

        if name is not None:
          self.name = name
        if building_name is not None:
          self.building_name = building_name
        if image is not None:
          self.image = image
        if scale is not None:
          self.scale = scale
        if located_device_list is not None:
          self.located_device_list = located_device_list
        if un_located_device_list is not None:
          self.un_located_device_list = un_located_device_list

    @property
    def name(self):
        """
        Gets the name of this FloorLocationDetails.
        楼层名称。

        :return: The name of this FloorLocationDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FloorLocationDetails.
        楼层名称。

        :param name: The name of this FloorLocationDetails.
        :type: str
        """

        self._name = name

    @property
    def building_name(self):
        """
        Gets the building_name of this FloorLocationDetails.
        楼层所属楼栋名称。

        :return: The building_name of this FloorLocationDetails.
        :rtype: str
        """
        return self._building_name

    @building_name.setter
    def building_name(self, building_name):
        """
        Sets the building_name of this FloorLocationDetails.
        楼层所属楼栋名称。

        :param building_name: The building_name of this FloorLocationDetails.
        :type: str
        """

        self._building_name = building_name

    @property
    def image(self):
        """
        Gets the image of this FloorLocationDetails.
        楼层图纸。

        :return: The image of this FloorLocationDetails.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this FloorLocationDetails.
        楼层图纸。

        :param image: The image of this FloorLocationDetails.
        :type: str
        """
        if image is not None and not re.search('^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', image):
            raise ValueError("Invalid value for `image`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._image = image

    @property
    def scale(self):
        """
        Gets the scale of this FloorLocationDetails.
        比例尺，表示图上距离与实际距离的比，例如：图上0.01米代表实际1米，则比例尺为0.01。

        :return: The scale of this FloorLocationDetails.
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """
        Sets the scale of this FloorLocationDetails.
        比例尺，表示图上距离与实际距离的比，例如：图上0.01米代表实际1米，则比例尺为0.01。

        :param scale: The scale of this FloorLocationDetails.
        :type: float
        """

        self._scale = scale

    @property
    def located_device_list(self):
        """
        Gets the located_device_list of this FloorLocationDetails.
        已布放设备列表。

        :return: The located_device_list of this FloorLocationDetails.
        :rtype: list[LocatedDeviceInfo]
        """
        return self._located_device_list

    @located_device_list.setter
    def located_device_list(self, located_device_list):
        """
        Sets the located_device_list of this FloorLocationDetails.
        已布放设备列表。

        :param located_device_list: The located_device_list of this FloorLocationDetails.
        :type: list[LocatedDeviceInfo]
        """

        self._located_device_list = located_device_list

    @property
    def un_located_device_list(self):
        """
        Gets the un_located_device_list of this FloorLocationDetails.
        未布放设备列表。

        :return: The un_located_device_list of this FloorLocationDetails.
        :rtype: list[DeviceInfo]
        """
        return self._un_located_device_list

    @un_located_device_list.setter
    def un_located_device_list(self, un_located_device_list):
        """
        Sets the un_located_device_list of this FloorLocationDetails.
        未布放设备列表。

        :param un_located_device_list: The un_located_device_list of this FloorLocationDetails.
        :type: list[DeviceInfo]
        """

        self._un_located_device_list = un_located_device_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FloorLocationDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
