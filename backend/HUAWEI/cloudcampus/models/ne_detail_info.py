# coding: utf-8

"""
    网络设备管理

    提供北向查询网络设备服务。 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NeDetailInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nedn': 'str',
        'neid': 'str',
        'aliasname': 'str',
        'nename': 'str',
        'necategory': 'str',
        'netype': 'str',
        'nevendorname': 'str',
        'neesn': 'str',
        'neip': 'str',
        'nemac': 'str',
        'version': 'str',
        'nepatchversion': 'str',
        'nesysoid': 'str',
        'nestate': 'int',
        'lastpolltime': 'str',
        'createtime': 'str',
        'timezoneid': 'str',
        'neiptype': 'int',
        'neip2_number': 'int',
        'subnet': 'str',
        'negroupname': 'str',
        'neosversion': 'str',
        'necontact': 'str',
        'neposition': 'str',
        'memo': 'str',
        'maintainunit': 'str',
        'putintoactiontime': 'str',
        'usefullife': 'str',
        'neruntime': 'str',
        'nedescribe': 'str',
        'asset_manager': 'str',
        'asset_number': 'str',
        'asset_date': 'str'
    }

    attribute_map = {
        'nedn': 'nedn',
        'neid': 'neid',
        'aliasname': 'aliasname',
        'nename': 'nename',
        'necategory': 'necategory',
        'netype': 'netype',
        'nevendorname': 'nevendorname',
        'neesn': 'neesn',
        'neip': 'neip',
        'nemac': 'nemac',
        'version': 'version',
        'nepatchversion': 'nepatchversion',
        'nesysoid': 'nesysoid',
        'nestate': 'nestate',
        'lastpolltime': 'lastpolltime',
        'createtime': 'createtime',
        'timezoneid': 'timezoneid',
        'neiptype': 'neiptype',
        'neip2_number': 'NEIP2NUMBER',
        'subnet': 'subnet',
        'negroupname': 'negroupname',
        'neosversion': 'neosversion',
        'necontact': 'necontact',
        'neposition': 'neposition',
        'memo': 'memo',
        'maintainunit': 'maintainunit',
        'putintoactiontime': 'putintoactiontime',
        'usefullife': 'usefullife',
        'neruntime': 'neruntime',
        'nedescribe': 'nedescribe',
        'asset_manager': 'assetManager',
        'asset_number': 'assetNumber',
        'asset_date': 'assetDate'
    }

    def __init__(self, nedn=None, neid=None, aliasname=None, nename=None, necategory=None, netype=None, nevendorname=None, neesn=None, neip=None, nemac=None, version=None, nepatchversion=None, nesysoid=None, nestate=None, lastpolltime=None, createtime=None, timezoneid=None, neiptype=None, neip2_number=None, subnet=None, negroupname=None, neosversion=None, necontact=None, neposition=None, memo=None, maintainunit=None, putintoactiontime=None, usefullife=None, neruntime=None, nedescribe=None, asset_manager=None, asset_number=None, asset_date=None):
        """
        NeDetailInfo - a model defined in Swagger
        """

        self._nedn = None
        self._neid = None
        self._aliasname = None
        self._nename = None
        self._necategory = None
        self._netype = None
        self._nevendorname = None
        self._neesn = None
        self._neip = None
        self._nemac = None
        self._version = None
        self._nepatchversion = None
        self._nesysoid = None
        self._nestate = None
        self._lastpolltime = None
        self._createtime = None
        self._timezoneid = None
        self._neiptype = None
        self._neip2_number = None
        self._subnet = None
        self._negroupname = None
        self._neosversion = None
        self._necontact = None
        self._neposition = None
        self._memo = None
        self._maintainunit = None
        self._putintoactiontime = None
        self._usefullife = None
        self._neruntime = None
        self._nedescribe = None
        self._asset_manager = None
        self._asset_number = None
        self._asset_date = None

        if nedn is not None:
          self.nedn = nedn
        if neid is not None:
          self.neid = neid
        if aliasname is not None:
          self.aliasname = aliasname
        if nename is not None:
          self.nename = nename
        if necategory is not None:
          self.necategory = necategory
        if netype is not None:
          self.netype = netype
        if nevendorname is not None:
          self.nevendorname = nevendorname
        if neesn is not None:
          self.neesn = neesn
        if neip is not None:
          self.neip = neip
        if nemac is not None:
          self.nemac = nemac
        if version is not None:
          self.version = version
        if nepatchversion is not None:
          self.nepatchversion = nepatchversion
        if nesysoid is not None:
          self.nesysoid = nesysoid
        if nestate is not None:
          self.nestate = nestate
        if lastpolltime is not None:
          self.lastpolltime = lastpolltime
        if createtime is not None:
          self.createtime = createtime
        if timezoneid is not None:
          self.timezoneid = timezoneid
        if neiptype is not None:
          self.neiptype = neiptype
        if neip2_number is not None:
          self.neip2_number = neip2_number
        if subnet is not None:
          self.subnet = subnet
        if negroupname is not None:
          self.negroupname = negroupname
        if neosversion is not None:
          self.neosversion = neosversion
        if necontact is not None:
          self.necontact = necontact
        if neposition is not None:
          self.neposition = neposition
        if memo is not None:
          self.memo = memo
        if maintainunit is not None:
          self.maintainunit = maintainunit
        if putintoactiontime is not None:
          self.putintoactiontime = putintoactiontime
        if usefullife is not None:
          self.usefullife = usefullife
        if neruntime is not None:
          self.neruntime = neruntime
        if nedescribe is not None:
          self.nedescribe = nedescribe
        if asset_manager is not None:
          self.asset_manager = asset_manager
        if asset_number is not None:
          self.asset_number = asset_number
        if asset_date is not None:
          self.asset_date = asset_date

    @property
    def nedn(self):
        """
        Gets the nedn of this NeDetailInfo.
        设备DN

        :return: The nedn of this NeDetailInfo.
        :rtype: str
        """
        return self._nedn

    @nedn.setter
    def nedn(self, nedn):
        """
        Sets the nedn of this NeDetailInfo.
        设备DN

        :param nedn: The nedn of this NeDetailInfo.
        :type: str
        """

        self._nedn = nedn

    @property
    def neid(self):
        """
        Gets the neid of this NeDetailInfo.
        设备id

        :return: The neid of this NeDetailInfo.
        :rtype: str
        """
        return self._neid

    @neid.setter
    def neid(self, neid):
        """
        Sets the neid of this NeDetailInfo.
        设备id

        :param neid: The neid of this NeDetailInfo.
        :type: str
        """

        self._neid = neid

    @property
    def aliasname(self):
        """
        Gets the aliasname of this NeDetailInfo.
        网管名称

        :return: The aliasname of this NeDetailInfo.
        :rtype: str
        """
        return self._aliasname

    @aliasname.setter
    def aliasname(self, aliasname):
        """
        Sets the aliasname of this NeDetailInfo.
        网管名称

        :param aliasname: The aliasname of this NeDetailInfo.
        :type: str
        """

        self._aliasname = aliasname

    @property
    def nename(self):
        """
        Gets the nename of this NeDetailInfo.
        设备名称

        :return: The nename of this NeDetailInfo.
        :rtype: str
        """
        return self._nename

    @nename.setter
    def nename(self, nename):
        """
        Sets the nename of this NeDetailInfo.
        设备名称

        :param nename: The nename of this NeDetailInfo.
        :type: str
        """

        self._nename = nename

    @property
    def necategory(self):
        """
        Gets the necategory of this NeDetailInfo.
        设备种类（类似路由器、交换机）

        :return: The necategory of this NeDetailInfo.
        :rtype: str
        """
        return self._necategory

    @necategory.setter
    def necategory(self, necategory):
        """
        Sets the necategory of this NeDetailInfo.
        设备种类（类似路由器、交换机）

        :param necategory: The necategory of this NeDetailInfo.
        :type: str
        """

        self._necategory = necategory

    @property
    def netype(self):
        """
        Gets the netype of this NeDetailInfo.
        设备类型

        :return: The netype of this NeDetailInfo.
        :rtype: str
        """
        return self._netype

    @netype.setter
    def netype(self, netype):
        """
        Sets the netype of this NeDetailInfo.
        设备类型

        :param netype: The netype of this NeDetailInfo.
        :type: str
        """

        self._netype = netype

    @property
    def nevendorname(self):
        """
        Gets the nevendorname of this NeDetailInfo.
        设备厂商信息(设备厂商ID)

        :return: The nevendorname of this NeDetailInfo.
        :rtype: str
        """
        return self._nevendorname

    @nevendorname.setter
    def nevendorname(self, nevendorname):
        """
        Sets the nevendorname of this NeDetailInfo.
        设备厂商信息(设备厂商ID)

        :param nevendorname: The nevendorname of this NeDetailInfo.
        :type: str
        """

        self._nevendorname = nevendorname

    @property
    def neesn(self):
        """
        Gets the neesn of this NeDetailInfo.
        设备序列号

        :return: The neesn of this NeDetailInfo.
        :rtype: str
        """
        return self._neesn

    @neesn.setter
    def neesn(self, neesn):
        """
        Sets the neesn of this NeDetailInfo.
        设备序列号

        :param neesn: The neesn of this NeDetailInfo.
        :type: str
        """

        self._neesn = neesn

    @property
    def neip(self):
        """
        Gets the neip of this NeDetailInfo.
        设备IP地址（通过“,”分隔）

        :return: The neip of this NeDetailInfo.
        :rtype: str
        """
        return self._neip

    @neip.setter
    def neip(self, neip):
        """
        Sets the neip of this NeDetailInfo.
        设备IP地址（通过“,”分隔）

        :param neip: The neip of this NeDetailInfo.
        :type: str
        """

        self._neip = neip

    @property
    def nemac(self):
        """
        Gets the nemac of this NeDetailInfo.
        设备MAC地址

        :return: The nemac of this NeDetailInfo.
        :rtype: str
        """
        return self._nemac

    @nemac.setter
    def nemac(self, nemac):
        """
        Sets the nemac of this NeDetailInfo.
        设备MAC地址

        :param nemac: The nemac of this NeDetailInfo.
        :type: str
        """

        self._nemac = nemac

    @property
    def version(self):
        """
        Gets the version of this NeDetailInfo.
        设备版本

        :return: The version of this NeDetailInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this NeDetailInfo.
        设备版本

        :param version: The version of this NeDetailInfo.
        :type: str
        """

        self._version = version

    @property
    def nepatchversion(self):
        """
        Gets the nepatchversion of this NeDetailInfo.
        补丁版本

        :return: The nepatchversion of this NeDetailInfo.
        :rtype: str
        """
        return self._nepatchversion

    @nepatchversion.setter
    def nepatchversion(self, nepatchversion):
        """
        Sets the nepatchversion of this NeDetailInfo.
        补丁版本

        :param nepatchversion: The nepatchversion of this NeDetailInfo.
        :type: str
        """

        self._nepatchversion = nepatchversion

    @property
    def nesysoid(self):
        """
        Gets the nesysoid of this NeDetailInfo.
        设备sysoid

        :return: The nesysoid of this NeDetailInfo.
        :rtype: str
        """
        return self._nesysoid

    @nesysoid.setter
    def nesysoid(self, nesysoid):
        """
        Sets the nesysoid of this NeDetailInfo.
        设备sysoid

        :param nesysoid: The nesysoid of this NeDetailInfo.
        :type: str
        """

        self._nesysoid = nesysoid

    @property
    def nestate(self):
        """
        Gets the nestate of this NeDetailInfo.
        网络设备状态，可以是如下值之一： 0：未管理 1：在线 2：离线 3：未知 4：snmp不可达 5：错误 

        :return: The nestate of this NeDetailInfo.
        :rtype: int
        """
        return self._nestate

    @nestate.setter
    def nestate(self, nestate):
        """
        Sets the nestate of this NeDetailInfo.
        网络设备状态，可以是如下值之一： 0：未管理 1：在线 2：离线 3：未知 4：snmp不可达 5：错误 

        :param nestate: The nestate of this NeDetailInfo.
        :type: int
        """

        self._nestate = nestate

    @property
    def lastpolltime(self):
        """
        Gets the lastpolltime of this NeDetailInfo.
        上次同步时间

        :return: The lastpolltime of this NeDetailInfo.
        :rtype: str
        """
        return self._lastpolltime

    @lastpolltime.setter
    def lastpolltime(self, lastpolltime):
        """
        Sets the lastpolltime of this NeDetailInfo.
        上次同步时间

        :param lastpolltime: The lastpolltime of this NeDetailInfo.
        :type: str
        """

        self._lastpolltime = lastpolltime

    @property
    def createtime(self):
        """
        Gets the createtime of this NeDetailInfo.
        设备创建时间

        :return: The createtime of this NeDetailInfo.
        :rtype: str
        """
        return self._createtime

    @createtime.setter
    def createtime(self, createtime):
        """
        Sets the createtime of this NeDetailInfo.
        设备创建时间

        :param createtime: The createtime of this NeDetailInfo.
        :type: str
        """

        self._createtime = createtime

    @property
    def timezoneid(self):
        """
        Gets the timezoneid of this NeDetailInfo.
        设备时区

        :return: The timezoneid of this NeDetailInfo.
        :rtype: str
        """
        return self._timezoneid

    @timezoneid.setter
    def timezoneid(self, timezoneid):
        """
        Sets the timezoneid of this NeDetailInfo.
        设备时区

        :param timezoneid: The timezoneid of this NeDetailInfo.
        :type: str
        """

        self._timezoneid = timezoneid

    @property
    def neiptype(self):
        """
        Gets the neiptype of this NeDetailInfo.
        ip地址类型，可以是如下值之一： 0：IPv4 1：IPv6 

        :return: The neiptype of this NeDetailInfo.
        :rtype: int
        """
        return self._neiptype

    @neiptype.setter
    def neiptype(self, neiptype):
        """
        Sets the neiptype of this NeDetailInfo.
        ip地址类型，可以是如下值之一： 0：IPv4 1：IPv6 

        :param neiptype: The neiptype of this NeDetailInfo.
        :type: int
        """

        self._neiptype = neiptype

    @property
    def neip2_number(self):
        """
        Gets the neip2_number of this NeDetailInfo.
        ip地址转换成后的数值

        :return: The neip2_number of this NeDetailInfo.
        :rtype: int
        """
        return self._neip2_number

    @neip2_number.setter
    def neip2_number(self, neip2_number):
        """
        Sets the neip2_number of this NeDetailInfo.
        ip地址转换成后的数值

        :param neip2_number: The neip2_number of this NeDetailInfo.
        :type: int
        """

        self._neip2_number = neip2_number

    @property
    def subnet(self):
        """
        Gets the subnet of this NeDetailInfo.
        所属子网

        :return: The subnet of this NeDetailInfo.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """
        Sets the subnet of this NeDetailInfo.
        所属子网

        :param subnet: The subnet of this NeDetailInfo.
        :type: str
        """

        self._subnet = subnet

    @property
    def negroupname(self):
        """
        Gets the negroupname of this NeDetailInfo.
        所属分组名称

        :return: The negroupname of this NeDetailInfo.
        :rtype: str
        """
        return self._negroupname

    @negroupname.setter
    def negroupname(self, negroupname):
        """
        Sets the negroupname of this NeDetailInfo.
        所属分组名称

        :param negroupname: The negroupname of this NeDetailInfo.
        :type: str
        """

        self._negroupname = negroupname

    @property
    def neosversion(self):
        """
        Gets the neosversion of this NeDetailInfo.
        软件版本

        :return: The neosversion of this NeDetailInfo.
        :rtype: str
        """
        return self._neosversion

    @neosversion.setter
    def neosversion(self, neosversion):
        """
        Sets the neosversion of this NeDetailInfo.
        软件版本

        :param neosversion: The neosversion of this NeDetailInfo.
        :type: str
        """

        self._neosversion = neosversion

    @property
    def necontact(self):
        """
        Gets the necontact of this NeDetailInfo.
        设备联系人

        :return: The necontact of this NeDetailInfo.
        :rtype: str
        """
        return self._necontact

    @necontact.setter
    def necontact(self, necontact):
        """
        Sets the necontact of this NeDetailInfo.
        设备联系人

        :param necontact: The necontact of this NeDetailInfo.
        :type: str
        """

        self._necontact = necontact

    @property
    def neposition(self):
        """
        Gets the neposition of this NeDetailInfo.
        设备位置

        :return: The neposition of this NeDetailInfo.
        :rtype: str
        """
        return self._neposition

    @neposition.setter
    def neposition(self, neposition):
        """
        Sets the neposition of this NeDetailInfo.
        设备位置

        :param neposition: The neposition of this NeDetailInfo.
        :type: str
        """

        self._neposition = neposition

    @property
    def memo(self):
        """
        Gets the memo of this NeDetailInfo.
        设备备注

        :return: The memo of this NeDetailInfo.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """
        Sets the memo of this NeDetailInfo.
        设备备注

        :param memo: The memo of this NeDetailInfo.
        :type: str
        """

        self._memo = memo

    @property
    def maintainunit(self):
        """
        Gets the maintainunit of this NeDetailInfo.
        维保单位

        :return: The maintainunit of this NeDetailInfo.
        :rtype: str
        """
        return self._maintainunit

    @maintainunit.setter
    def maintainunit(self, maintainunit):
        """
        Sets the maintainunit of this NeDetailInfo.
        维保单位

        :param maintainunit: The maintainunit of this NeDetailInfo.
        :type: str
        """

        self._maintainunit = maintainunit

    @property
    def putintoactiontime(self):
        """
        Gets the putintoactiontime of this NeDetailInfo.
        投入使用时间

        :return: The putintoactiontime of this NeDetailInfo.
        :rtype: str
        """
        return self._putintoactiontime

    @putintoactiontime.setter
    def putintoactiontime(self, putintoactiontime):
        """
        Sets the putintoactiontime of this NeDetailInfo.
        投入使用时间

        :param putintoactiontime: The putintoactiontime of this NeDetailInfo.
        :type: str
        """

        self._putintoactiontime = putintoactiontime

    @property
    def usefullife(self):
        """
        Gets the usefullife of this NeDetailInfo.
        维保到期时间

        :return: The usefullife of this NeDetailInfo.
        :rtype: str
        """
        return self._usefullife

    @usefullife.setter
    def usefullife(self, usefullife):
        """
        Sets the usefullife of this NeDetailInfo.
        维保到期时间

        :param usefullife: The usefullife of this NeDetailInfo.
        :type: str
        """

        self._usefullife = usefullife

    @property
    def neruntime(self):
        """
        Gets the neruntime of this NeDetailInfo.
        设备启动时间

        :return: The neruntime of this NeDetailInfo.
        :rtype: str
        """
        return self._neruntime

    @neruntime.setter
    def neruntime(self, neruntime):
        """
        Sets the neruntime of this NeDetailInfo.
        设备启动时间

        :param neruntime: The neruntime of this NeDetailInfo.
        :type: str
        """

        self._neruntime = neruntime

    @property
    def nedescribe(self):
        """
        Gets the nedescribe of this NeDetailInfo.
        设备描述

        :return: The nedescribe of this NeDetailInfo.
        :rtype: str
        """
        return self._nedescribe

    @nedescribe.setter
    def nedescribe(self, nedescribe):
        """
        Sets the nedescribe of this NeDetailInfo.
        设备描述

        :param nedescribe: The nedescribe of this NeDetailInfo.
        :type: str
        """

        self._nedescribe = nedescribe

    @property
    def asset_manager(self):
        """
        Gets the asset_manager of this NeDetailInfo.
        资产管理人

        :return: The asset_manager of this NeDetailInfo.
        :rtype: str
        """
        return self._asset_manager

    @asset_manager.setter
    def asset_manager(self, asset_manager):
        """
        Sets the asset_manager of this NeDetailInfo.
        资产管理人

        :param asset_manager: The asset_manager of this NeDetailInfo.
        :type: str
        """

        self._asset_manager = asset_manager

    @property
    def asset_number(self):
        """
        Gets the asset_number of this NeDetailInfo.
        资产编号

        :return: The asset_number of this NeDetailInfo.
        :rtype: str
        """
        return self._asset_number

    @asset_number.setter
    def asset_number(self, asset_number):
        """
        Sets the asset_number of this NeDetailInfo.
        资产编号

        :param asset_number: The asset_number of this NeDetailInfo.
        :type: str
        """

        self._asset_number = asset_number

    @property
    def asset_date(self):
        """
        Gets the asset_date of this NeDetailInfo.
        购买日期

        :return: The asset_date of this NeDetailInfo.
        :rtype: str
        """
        return self._asset_date

    @asset_date.setter
    def asset_date(self, asset_date):
        """
        Sets the asset_date of this NeDetailInfo.
        购买日期

        :param asset_date: The asset_date of this NeDetailInfo.
        :type: str
        """

        self._asset_date = asset_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NeDetailInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
