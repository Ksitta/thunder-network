# coding: utf-8

"""
    框式交换机板卡信息操作

    框式上云相关操作接口： 场景：对框式交换机信息查询操作的第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PowerSupplyDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'frame_no': 'int',
        'board_name': 'str',
        'operation': 'str'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'frame_no': 'frameNo',
        'board_name': 'boardName',
        'operation': 'operation'
    }

    def __init__(self, device_id=None, frame_no=None, board_name=None, operation=None):
        """
        PowerSupplyDto - a model defined in Swagger
        """

        self._device_id = None
        self._frame_no = None
        self._board_name = None
        self._operation = None

        if device_id is not None:
          self.device_id = device_id
        if frame_no is not None:
          self.frame_no = frame_no
        if board_name is not None:
          self.board_name = board_name
        if operation is not None:
          self.operation = operation

    @property
    def device_id(self):
        """
        Gets the device_id of this PowerSupplyDto.
        设备ID，UUID格式。

        :return: The device_id of this PowerSupplyDto.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this PowerSupplyDto.
        设备ID，UUID格式。

        :param device_id: The device_id of this PowerSupplyDto.
        :type: str
        """
        if device_id is not None and len(device_id) > 36:
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `36`")
        if device_id is not None and len(device_id) < 36:
            raise ValueError("Invalid value for `device_id`, length must be greater than or equal to `36`")

        self._device_id = device_id

    @property
    def frame_no(self):
        """
        Gets the frame_no of this PowerSupplyDto.
        机框号。

        :return: The frame_no of this PowerSupplyDto.
        :rtype: int
        """
        return self._frame_no

    @frame_no.setter
    def frame_no(self, frame_no):
        """
        Sets the frame_no of this PowerSupplyDto.
        机框号。

        :param frame_no: The frame_no of this PowerSupplyDto.
        :type: int
        """

        self._frame_no = frame_no

    @property
    def board_name(self):
        """
        Gets the board_name of this PowerSupplyDto.
        单板名称。

        :return: The board_name of this PowerSupplyDto.
        :rtype: str
        """
        return self._board_name

    @board_name.setter
    def board_name(self, board_name):
        """
        Sets the board_name of this PowerSupplyDto.
        单板名称。

        :param board_name: The board_name of this PowerSupplyDto.
        :type: str
        """
        if board_name is not None and len(board_name) > 36:
            raise ValueError("Invalid value for `board_name`, length must be less than or equal to `36`")
        if board_name is not None and len(board_name) < 1:
            raise ValueError("Invalid value for `board_name`, length must be greater than or equal to `1`")

        self._board_name = board_name

    @property
    def operation(self):
        """
        Gets the operation of this PowerSupplyDto.
        上下电操作。取值范围：on---代表上电，off---代表下电。

        :return: The operation of this PowerSupplyDto.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """
        Sets the operation of this PowerSupplyDto.
        上下电操作。取值范围：on---代表上电，off---代表下电。

        :param operation: The operation of this PowerSupplyDto.
        :type: str
        """
        if operation is not None and len(operation) > 36:
            raise ValueError("Invalid value for `operation`, length must be less than or equal to `36`")
        if operation is not None and len(operation) < 1:
            raise ValueError("Invalid value for `operation`, length must be greater than or equal to `1`")

        self._operation = operation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PowerSupplyDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
