# coding: utf-8

"""
    运维ping/trace探测

    ping/trace探测第三方接口。 · 创建ping探测任务 · 查询ping探测结果 · 创建trace探测任务 · 查询trace探测结果 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PingDiagnoseDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'destination': 'str',
        'ping_self': 'bool'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'destination': 'destination',
        'ping_self': 'pingSelf'
    }

    def __init__(self, device_id=None, destination=None, ping_self=None):
        """
        PingDiagnoseDto - a model defined in Swagger
        """

        self._device_id = None
        self._destination = None
        self._ping_self = None

        if device_id is not None:
          self.device_id = device_id
        if destination is not None:
          self.destination = destination
        if ping_self is not None:
          self.ping_self = ping_self

    @property
    def device_id(self):
        """
        Gets the device_id of this PingDiagnoseDto.
        设备ID，UUID格式。

        :return: The device_id of this PingDiagnoseDto.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this PingDiagnoseDto.
        设备ID，UUID格式。

        :param device_id: The device_id of this PingDiagnoseDto.
        :type: str
        """
        if device_id is not None and len(device_id) > 36:
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `36`")
        if device_id is not None and len(device_id) < 36:
            raise ValueError("Invalid value for `device_id`, length must be greater than or equal to `36`")

        self._device_id = device_id

    @property
    def destination(self):
        """
        Gets the destination of this PingDiagnoseDto.
        ping目的地址，可以是IP地址或域名，域名中不能包含空格。

        :return: The destination of this PingDiagnoseDto.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this PingDiagnoseDto.
        ping目的地址，可以是IP地址或域名，域名中不能包含空格。

        :param destination: The destination of this PingDiagnoseDto.
        :type: str
        """
        if destination is not None and len(destination) > 253:
            raise ValueError("Invalid value for `destination`, length must be less than or equal to `253`")
        if destination is not None and len(destination) < 0:
            raise ValueError("Invalid value for `destination`, length must be greater than or equal to `0`")

        self._destination = destination

    @property
    def ping_self(self):
        """
        Gets the ping_self of this PingDiagnoseDto.
        是否ping探测自身。默认为false。当为true时，destination值不写。

        :return: The ping_self of this PingDiagnoseDto.
        :rtype: bool
        """
        return self._ping_self

    @ping_self.setter
    def ping_self(self, ping_self):
        """
        Sets the ping_self of this PingDiagnoseDto.
        是否ping探测自身。默认为false。当为true时，destination值不写。

        :param ping_self: The ping_self of this PingDiagnoseDto.
        :type: bool
        """

        self._ping_self = ping_self

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PingDiagnoseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
