# coding: utf-8

"""
    mac帐号管理

    mac帐号管理

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MacOutputDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'terminal_macs': 'list[str]',
        'user_group_id': 'str',
        'id': 'str',
        'user_group_path': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'terminal_macs': 'terminalMacs',
        'user_group_id': 'userGroupId',
        'id': 'id',
        'user_group_path': 'userGroupPath'
    }

    def __init__(self, name=None, description=None, terminal_macs=None, user_group_id=None, id=None, user_group_path=None):
        """
        MacOutputDto - a model defined in Swagger
        """

        self._name = None
        self._description = None
        self._terminal_macs = None
        self._user_group_id = None
        self._id = None
        self._user_group_path = None

        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if terminal_macs is not None:
          self.terminal_macs = terminal_macs
        if user_group_id is not None:
          self.user_group_id = user_group_id
        if id is not None:
          self.id = id
        if user_group_path is not None:
          self.user_group_path = user_group_path

    @property
    def name(self):
        """
        Gets the name of this MacOutputDto.
        mac帐号名称。

        :return: The name of this MacOutputDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MacOutputDto.
        mac帐号名称。

        :param name: The name of this MacOutputDto.
        :type: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this MacOutputDto.
        mac帐号描述。

        :return: The description of this MacOutputDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this MacOutputDto.
        mac帐号描述。

        :param description: The description of this MacOutputDto.
        :type: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def terminal_macs(self):
        """
        Gets the terminal_macs of this MacOutputDto.
        终端MAC列表。

        :return: The terminal_macs of this MacOutputDto.
        :rtype: list[str]
        """
        return self._terminal_macs

    @terminal_macs.setter
    def terminal_macs(self, terminal_macs):
        """
        Sets the terminal_macs of this MacOutputDto.
        终端MAC列表。

        :param terminal_macs: The terminal_macs of this MacOutputDto.
        :type: list[str]
        """

        self._terminal_macs = terminal_macs

    @property
    def user_group_id(self):
        """
        Gets the user_group_id of this MacOutputDto.
        用户组ID，UUID格式。

        :return: The user_group_id of this MacOutputDto.
        :rtype: str
        """
        return self._user_group_id

    @user_group_id.setter
    def user_group_id(self, user_group_id):
        """
        Sets the user_group_id of this MacOutputDto.
        用户组ID，UUID格式。

        :param user_group_id: The user_group_id of this MacOutputDto.
        :type: str
        """

        self._user_group_id = user_group_id

    @property
    def id(self):
        """
        Gets the id of this MacOutputDto.
        mac账号ID，UUID格式。

        :return: The id of this MacOutputDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MacOutputDto.
        mac账号ID，UUID格式。

        :param id: The id of this MacOutputDto.
        :type: str
        """

        self._id = id

    @property
    def user_group_path(self):
        """
        Gets the user_group_path of this MacOutputDto.
        用户组。

        :return: The user_group_path of this MacOutputDto.
        :rtype: str
        """
        return self._user_group_path

    @user_group_path.setter
    def user_group_path(self, user_group_path):
        """
        Sets the user_group_path of this MacOutputDto.
        用户组。

        :param user_group_path: The user_group_path of this MacOutputDto.
        :type: str
        """

        self._user_group_path = user_group_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MacOutputDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
