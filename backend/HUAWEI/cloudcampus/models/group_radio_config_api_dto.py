# coding: utf-8

"""
    AP站点射频配置

    AP站点射频配置第三方接口说明。 

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GroupRadioConfigApiDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'scan_duration': 'str',
        'scan_interval': 'str',
        'scan_channel': 'str',
        'dca2g_channel_set': 'str',
        'dca_bandwidth': 'str',
        'dca5g_channel_set': 'str',
        'calibrate': 'str',
        'dca_start_time': 'str',
        'dca_interval': 'int',
        'dca_schedule_time': 'str',
        'tpc_max_tx_pwr': 'int',
        'tpc_min_tx_pwr': 'int',
        'tpc_coverage_threshold': 'int',
        'radio2_dot4_guard_interval_mode': 'str',
        'radio5_guard_interval_mode': 'str',
        'reference_data_analysis': 'bool'
    }

    attribute_map = {
        'country_code': 'countryCode',
        'scan_duration': 'scanDuration',
        'scan_interval': 'scanInterval',
        'scan_channel': 'scanChannel',
        'dca2g_channel_set': 'dca2gChannelSet',
        'dca_bandwidth': 'dcaBandwidth',
        'dca5g_channel_set': 'dca5gChannelSet',
        'calibrate': 'calibrate',
        'dca_start_time': 'dcaStartTime',
        'dca_interval': 'dcaInterval',
        'dca_schedule_time': 'dcaScheduleTime',
        'tpc_max_tx_pwr': 'tpcMaxTxPwr',
        'tpc_min_tx_pwr': 'tpcMinTxPwr',
        'tpc_coverage_threshold': 'tpcCoverageThreshold',
        'radio2_dot4_guard_interval_mode': 'radio2Dot4GuardIntervalMode',
        'radio5_guard_interval_mode': 'radio5GuardIntervalMode',
        'reference_data_analysis': 'referenceDataAnalysis'
    }

    def __init__(self, country_code=None, scan_duration=None, scan_interval=None, scan_channel=None, dca2g_channel_set=None, dca_bandwidth=None, dca5g_channel_set=None, calibrate=None, dca_start_time=None, dca_interval=None, dca_schedule_time=None, tpc_max_tx_pwr=None, tpc_min_tx_pwr=None, tpc_coverage_threshold=None, radio2_dot4_guard_interval_mode=None, radio5_guard_interval_mode=None, reference_data_analysis=None):
        """
        GroupRadioConfigApiDto - a model defined in Swagger
        """

        self._country_code = None
        self._scan_duration = None
        self._scan_interval = None
        self._scan_channel = None
        self._dca2g_channel_set = None
        self._dca_bandwidth = None
        self._dca5g_channel_set = None
        self._calibrate = None
        self._dca_start_time = None
        self._dca_interval = None
        self._dca_schedule_time = None
        self._tpc_max_tx_pwr = None
        self._tpc_min_tx_pwr = None
        self._tpc_coverage_threshold = None
        self._radio2_dot4_guard_interval_mode = None
        self._radio5_guard_interval_mode = None
        self._reference_data_analysis = None

        if country_code is not None:
          self.country_code = country_code
        if scan_duration is not None:
          self.scan_duration = scan_duration
        if scan_interval is not None:
          self.scan_interval = scan_interval
        if scan_channel is not None:
          self.scan_channel = scan_channel
        if dca2g_channel_set is not None:
          self.dca2g_channel_set = dca2g_channel_set
        if dca_bandwidth is not None:
          self.dca_bandwidth = dca_bandwidth
        if dca5g_channel_set is not None:
          self.dca5g_channel_set = dca5g_channel_set
        if calibrate is not None:
          self.calibrate = calibrate
        if dca_start_time is not None:
          self.dca_start_time = dca_start_time
        if dca_interval is not None:
          self.dca_interval = dca_interval
        if dca_schedule_time is not None:
          self.dca_schedule_time = dca_schedule_time
        if tpc_max_tx_pwr is not None:
          self.tpc_max_tx_pwr = tpc_max_tx_pwr
        if tpc_min_tx_pwr is not None:
          self.tpc_min_tx_pwr = tpc_min_tx_pwr
        if tpc_coverage_threshold is not None:
          self.tpc_coverage_threshold = tpc_coverage_threshold
        if radio2_dot4_guard_interval_mode is not None:
          self.radio2_dot4_guard_interval_mode = radio2_dot4_guard_interval_mode
        if radio5_guard_interval_mode is not None:
          self.radio5_guard_interval_mode = radio5_guard_interval_mode
        if reference_data_analysis is not None:
          self.reference_data_analysis = reference_data_analysis

    @property
    def country_code(self):
        """
        Gets the country_code of this GroupRadioConfigApiDto.
        国家码。

        :return: The country_code of this GroupRadioConfigApiDto.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this GroupRadioConfigApiDto.
        国家码。

        :param country_code: The country_code of this GroupRadioConfigApiDto.
        :type: str
        """

        self._country_code = country_code

    @property
    def scan_duration(self):
        """
        Gets the scan_duration of this GroupRadioConfigApiDto.
        扫描时长，范围60~100，单位（ms）。

        :return: The scan_duration of this GroupRadioConfigApiDto.
        :rtype: str
        """
        return self._scan_duration

    @scan_duration.setter
    def scan_duration(self, scan_duration):
        """
        Sets the scan_duration of this GroupRadioConfigApiDto.
        扫描时长，范围60~100，单位（ms）。

        :param scan_duration: The scan_duration of this GroupRadioConfigApiDto.
        :type: str
        """

        self._scan_duration = scan_duration

    @property
    def scan_interval(self):
        """
        Gets the scan_interval of this GroupRadioConfigApiDto.
        扫描间隔，范围300~600000，单位（ms）。

        :return: The scan_interval of this GroupRadioConfigApiDto.
        :rtype: str
        """
        return self._scan_interval

    @scan_interval.setter
    def scan_interval(self, scan_interval):
        """
        Sets the scan_interval of this GroupRadioConfigApiDto.
        扫描间隔，范围300~600000，单位（ms）。

        :param scan_interval: The scan_interval of this GroupRadioConfigApiDto.
        :type: str
        """

        self._scan_interval = scan_interval

    @property
    def scan_channel(self):
        """
        Gets the scan_channel of this GroupRadioConfigApiDto.
        扫描信道，只能为country-channel，dca-channel，work-channel其中一种。

        :return: The scan_channel of this GroupRadioConfigApiDto.
        :rtype: str
        """
        return self._scan_channel

    @scan_channel.setter
    def scan_channel(self, scan_channel):
        """
        Sets the scan_channel of this GroupRadioConfigApiDto.
        扫描信道，只能为country-channel，dca-channel，work-channel其中一种。

        :param scan_channel: The scan_channel of this GroupRadioConfigApiDto.
        :type: str
        """

        self._scan_channel = scan_channel

    @property
    def dca2g_channel_set(self):
        """
        Gets the dca2g_channel_set of this GroupRadioConfigApiDto.
        2.4G调优信道集。可选\"1，6，11\"和\"1，5，9，13\"两种信道集。

        :return: The dca2g_channel_set of this GroupRadioConfigApiDto.
        :rtype: str
        """
        return self._dca2g_channel_set

    @dca2g_channel_set.setter
    def dca2g_channel_set(self, dca2g_channel_set):
        """
        Sets the dca2g_channel_set of this GroupRadioConfigApiDto.
        2.4G调优信道集。可选\"1，6，11\"和\"1，5，9，13\"两种信道集。

        :param dca2g_channel_set: The dca2g_channel_set of this GroupRadioConfigApiDto.
        :type: str
        """

        self._dca2g_channel_set = dca2g_channel_set

    @property
    def dca_bandwidth(self):
        """
        Gets the dca_bandwidth of this GroupRadioConfigApiDto.
        5G调优频宽，只能为20mhz，40mhz，80mhz其中一种。

        :return: The dca_bandwidth of this GroupRadioConfigApiDto.
        :rtype: str
        """
        return self._dca_bandwidth

    @dca_bandwidth.setter
    def dca_bandwidth(self, dca_bandwidth):
        """
        Sets the dca_bandwidth of this GroupRadioConfigApiDto.
        5G调优频宽，只能为20mhz，40mhz，80mhz其中一种。

        :param dca_bandwidth: The dca_bandwidth of this GroupRadioConfigApiDto.
        :type: str
        """

        self._dca_bandwidth = dca_bandwidth

    @property
    def dca5g_channel_set(self):
        """
        Gets the dca5g_channel_set of this GroupRadioConfigApiDto.
        5G调优信道集。当5G调优频宽为20MHz时，支持的信道有36，40，44，48，52，56，60，64，149，153，157，161，165； 当5G调优信道为40MHz或80MHz时，支持的信道有36，40，44，48，52，56，60，64，149，153，157，161。 为了确保校准结果，请选择至少三个选项。若可选信道少于三个，则此国家不支持配置此调优频宽。

        :return: The dca5g_channel_set of this GroupRadioConfigApiDto.
        :rtype: str
        """
        return self._dca5g_channel_set

    @dca5g_channel_set.setter
    def dca5g_channel_set(self, dca5g_channel_set):
        """
        Sets the dca5g_channel_set of this GroupRadioConfigApiDto.
        5G调优信道集。当5G调优频宽为20MHz时，支持的信道有36，40，44，48，52，56，60，64，149，153，157，161，165； 当5G调优信道为40MHz或80MHz时，支持的信道有36，40，44，48，52，56，60，64，149，153，157，161。 为了确保校准结果，请选择至少三个选项。若可选信道少于三个，则此国家不支持配置此调优频宽。

        :param dca5g_channel_set: The dca5g_channel_set of this GroupRadioConfigApiDto.
        :type: str
        """

        self._dca5g_channel_set = dca5g_channel_set

    @property
    def calibrate(self):
        """
        Gets the calibrate of this GroupRadioConfigApiDto.
        调优模式，只能为manual，auto，schedule其中一种。

        :return: The calibrate of this GroupRadioConfigApiDto.
        :rtype: str
        """
        return self._calibrate

    @calibrate.setter
    def calibrate(self, calibrate):
        """
        Sets the calibrate of this GroupRadioConfigApiDto.
        调优模式，只能为manual，auto，schedule其中一种。

        :param calibrate: The calibrate of this GroupRadioConfigApiDto.
        :type: str
        """

        self._calibrate = calibrate

    @property
    def dca_start_time(self):
        """
        Gets the dca_start_time of this GroupRadioConfigApiDto.
        自动调优模式下开始时间。

        :return: The dca_start_time of this GroupRadioConfigApiDto.
        :rtype: str
        """
        return self._dca_start_time

    @dca_start_time.setter
    def dca_start_time(self, dca_start_time):
        """
        Sets the dca_start_time of this GroupRadioConfigApiDto.
        自动调优模式下开始时间。

        :param dca_start_time: The dca_start_time of this GroupRadioConfigApiDto.
        :type: str
        """

        self._dca_start_time = dca_start_time

    @property
    def dca_interval(self):
        """
        Gets the dca_interval of this GroupRadioConfigApiDto.
        自动调优模式下周期，单位（min）。

        :return: The dca_interval of this GroupRadioConfigApiDto.
        :rtype: int
        """
        return self._dca_interval

    @dca_interval.setter
    def dca_interval(self, dca_interval):
        """
        Sets the dca_interval of this GroupRadioConfigApiDto.
        自动调优模式下周期，单位（min）。

        :param dca_interval: The dca_interval of this GroupRadioConfigApiDto.
        :type: int
        """
        if dca_interval is not None and dca_interval > 1440:
            raise ValueError("Invalid value for `dca_interval`, must be a value less than or equal to `1440`")
        if dca_interval is not None and dca_interval < 30:
            raise ValueError("Invalid value for `dca_interval`, must be a value greater than or equal to `30`")

        self._dca_interval = dca_interval

    @property
    def dca_schedule_time(self):
        """
        Gets the dca_schedule_time of this GroupRadioConfigApiDto.
        定时调优模式下调优时间。

        :return: The dca_schedule_time of this GroupRadioConfigApiDto.
        :rtype: str
        """
        return self._dca_schedule_time

    @dca_schedule_time.setter
    def dca_schedule_time(self, dca_schedule_time):
        """
        Sets the dca_schedule_time of this GroupRadioConfigApiDto.
        定时调优模式下调优时间。

        :param dca_schedule_time: The dca_schedule_time of this GroupRadioConfigApiDto.
        :type: str
        """

        self._dca_schedule_time = dca_schedule_time

    @property
    def tpc_max_tx_pwr(self):
        """
        Gets the tpc_max_tx_pwr of this GroupRadioConfigApiDto.
        TPC上限。

        :return: The tpc_max_tx_pwr of this GroupRadioConfigApiDto.
        :rtype: int
        """
        return self._tpc_max_tx_pwr

    @tpc_max_tx_pwr.setter
    def tpc_max_tx_pwr(self, tpc_max_tx_pwr):
        """
        Sets the tpc_max_tx_pwr of this GroupRadioConfigApiDto.
        TPC上限。

        :param tpc_max_tx_pwr: The tpc_max_tx_pwr of this GroupRadioConfigApiDto.
        :type: int
        """
        if tpc_max_tx_pwr is not None and tpc_max_tx_pwr > 127:
            raise ValueError("Invalid value for `tpc_max_tx_pwr`, must be a value less than or equal to `127`")
        if tpc_max_tx_pwr is not None and tpc_max_tx_pwr < 1:
            raise ValueError("Invalid value for `tpc_max_tx_pwr`, must be a value greater than or equal to `1`")

        self._tpc_max_tx_pwr = tpc_max_tx_pwr

    @property
    def tpc_min_tx_pwr(self):
        """
        Gets the tpc_min_tx_pwr of this GroupRadioConfigApiDto.
        TPC下限。

        :return: The tpc_min_tx_pwr of this GroupRadioConfigApiDto.
        :rtype: int
        """
        return self._tpc_min_tx_pwr

    @tpc_min_tx_pwr.setter
    def tpc_min_tx_pwr(self, tpc_min_tx_pwr):
        """
        Sets the tpc_min_tx_pwr of this GroupRadioConfigApiDto.
        TPC下限。

        :param tpc_min_tx_pwr: The tpc_min_tx_pwr of this GroupRadioConfigApiDto.
        :type: int
        """
        if tpc_min_tx_pwr is not None and tpc_min_tx_pwr > 127:
            raise ValueError("Invalid value for `tpc_min_tx_pwr`, must be a value less than or equal to `127`")
        if tpc_min_tx_pwr is not None and tpc_min_tx_pwr < 1:
            raise ValueError("Invalid value for `tpc_min_tx_pwr`, must be a value greater than or equal to `1`")

        self._tpc_min_tx_pwr = tpc_min_tx_pwr

    @property
    def tpc_coverage_threshold(self):
        """
        Gets the tpc_coverage_threshold of this GroupRadioConfigApiDto.
        TPC阈值。

        :return: The tpc_coverage_threshold of this GroupRadioConfigApiDto.
        :rtype: int
        """
        return self._tpc_coverage_threshold

    @tpc_coverage_threshold.setter
    def tpc_coverage_threshold(self, tpc_coverage_threshold):
        """
        Sets the tpc_coverage_threshold of this GroupRadioConfigApiDto.
        TPC阈值。

        :param tpc_coverage_threshold: The tpc_coverage_threshold of this GroupRadioConfigApiDto.
        :type: int
        """
        if tpc_coverage_threshold is not None and tpc_coverage_threshold > -35:
            raise ValueError("Invalid value for `tpc_coverage_threshold`, must be a value less than or equal to `-35`")
        if tpc_coverage_threshold is not None and tpc_coverage_threshold < -85:
            raise ValueError("Invalid value for `tpc_coverage_threshold`, must be a value greater than or equal to `-85`")

        self._tpc_coverage_threshold = tpc_coverage_threshold

    @property
    def radio2_dot4_guard_interval_mode(self):
        """
        Gets the radio2_dot4_guard_interval_mode of this GroupRadioConfigApiDto.
        2.4G射频间隔(GI)模式，可填default(默认)、short(短间隔)或normal(普通间隔)。普通间隔的时间为800ns，在802.11n和802.11ac标准中允许使用短间隔，为400ns，可以提高802.11n和802.11ac的传输率。

        :return: The radio2_dot4_guard_interval_mode of this GroupRadioConfigApiDto.
        :rtype: str
        """
        return self._radio2_dot4_guard_interval_mode

    @radio2_dot4_guard_interval_mode.setter
    def radio2_dot4_guard_interval_mode(self, radio2_dot4_guard_interval_mode):
        """
        Sets the radio2_dot4_guard_interval_mode of this GroupRadioConfigApiDto.
        2.4G射频间隔(GI)模式，可填default(默认)、short(短间隔)或normal(普通间隔)。普通间隔的时间为800ns，在802.11n和802.11ac标准中允许使用短间隔，为400ns，可以提高802.11n和802.11ac的传输率。

        :param radio2_dot4_guard_interval_mode: The radio2_dot4_guard_interval_mode of this GroupRadioConfigApiDto.
        :type: str
        """

        self._radio2_dot4_guard_interval_mode = radio2_dot4_guard_interval_mode

    @property
    def radio5_guard_interval_mode(self):
        """
        Gets the radio5_guard_interval_mode of this GroupRadioConfigApiDto.
        5G射频间隔(GI)模式，可填default(默认)、short(短间隔)或normal(普通间隔)。普通间隔的时间为800ns，在802.11n和802.11ac标准中允许使用短间隔，为400ns，可以提高802.11n和802.11ac的传输率。

        :return: The radio5_guard_interval_mode of this GroupRadioConfigApiDto.
        :rtype: str
        """
        return self._radio5_guard_interval_mode

    @radio5_guard_interval_mode.setter
    def radio5_guard_interval_mode(self, radio5_guard_interval_mode):
        """
        Sets the radio5_guard_interval_mode of this GroupRadioConfigApiDto.
        5G射频间隔(GI)模式，可填default(默认)、short(短间隔)或normal(普通间隔)。普通间隔的时间为800ns，在802.11n和802.11ac标准中允许使用短间隔，为400ns，可以提高802.11n和802.11ac的传输率。

        :param radio5_guard_interval_mode: The radio5_guard_interval_mode of this GroupRadioConfigApiDto.
        :type: str
        """

        self._radio5_guard_interval_mode = radio5_guard_interval_mode

    @property
    def reference_data_analysis(self):
        """
        Gets the reference_data_analysis of this GroupRadioConfigApiDto.
        是否基于历史数据进行射频调优，可选值: true(默认)，false。

        :return: The reference_data_analysis of this GroupRadioConfigApiDto.
        :rtype: bool
        """
        return self._reference_data_analysis

    @reference_data_analysis.setter
    def reference_data_analysis(self, reference_data_analysis):
        """
        Sets the reference_data_analysis of this GroupRadioConfigApiDto.
        是否基于历史数据进行射频调优，可选值: true(默认)，false。

        :param reference_data_analysis: The reference_data_analysis of this GroupRadioConfigApiDto.
        :type: bool
        """

        self._reference_data_analysis = reference_data_analysis

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GroupRadioConfigApiDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
