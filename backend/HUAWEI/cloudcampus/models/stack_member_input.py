# coding: utf-8

"""
    堆叠管理

    堆叠管理第三方接口。 场景：创建堆叠操作的第三方接口。

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StackMemberInput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'esn': 'str',
        'slot_id': 'int',
        'priority': 'int'
    }

    attribute_map = {
        'esn': 'esn',
        'slot_id': 'slotId',
        'priority': 'priority'
    }

    def __init__(self, esn=None, slot_id=None, priority=100):
        """
        StackMemberInput - a model defined in Swagger
        """

        self._esn = None
        self._slot_id = None
        self._priority = None

        if esn is not None:
          self.esn = esn
        if slot_id is not None:
          self.slot_id = slot_id
        if priority is not None:
          self.priority = priority

    @property
    def esn(self):
        """
        Gets the esn of this StackMemberInput.
        设备ESN。

        :return: The esn of this StackMemberInput.
        :rtype: str
        """
        return self._esn

    @esn.setter
    def esn(self, esn):
        """
        Sets the esn of this StackMemberInput.
        设备ESN。

        :param esn: The esn of this StackMemberInput.
        :type: str
        """
        if esn is not None and len(esn) > 64:
            raise ValueError("Invalid value for `esn`, length must be less than or equal to `64`")
        if esn is not None and len(esn) < 10:
            raise ValueError("Invalid value for `esn`, length must be greater than or equal to `10`")

        self._esn = esn

    @property
    def slot_id(self):
        """
        Gets the slot_id of this StackMemberInput.
        堆叠成员编号。

        :return: The slot_id of this StackMemberInput.
        :rtype: int
        """
        return self._slot_id

    @slot_id.setter
    def slot_id(self, slot_id):
        """
        Sets the slot_id of this StackMemberInput.
        堆叠成员编号。

        :param slot_id: The slot_id of this StackMemberInput.
        :type: int
        """
        if slot_id is not None and slot_id > 8:
            raise ValueError("Invalid value for `slot_id`, must be a value less than or equal to `8`")
        if slot_id is not None and slot_id < 0:
            raise ValueError("Invalid value for `slot_id`, must be a value greater than or equal to `0`")

        self._slot_id = slot_id

    @property
    def priority(self):
        """
        Gets the priority of this StackMemberInput.
        堆叠成员优先级。

        :return: The priority of this StackMemberInput.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this StackMemberInput.
        堆叠成员优先级。

        :param priority: The priority of this StackMemberInput.
        :type: int
        """
        if priority is not None and priority > 255:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `255`")
        if priority is not None and priority < 1:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")

        self._priority = priority

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StackMemberInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
