# coding: utf-8

"""
    链路管理

    链路管理北向接口 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LinkInfoBo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link_id': 'str',
        'link_type': 'str',
        'anedn': 'str',
        'znedn': 'str',
        'ane_portid': 'str',
        'zne_portid': 'str',
        'ane_dev_type': 'str',
        'zne_dev_type': 'str',
        'link_status': 'int',
        'aport_name': 'str',
        'zport_name': 'str'
    }

    attribute_map = {
        'link_id': 'linkId',
        'link_type': 'linkType',
        'anedn': 'anedn',
        'znedn': 'znedn',
        'ane_portid': 'anePortid',
        'zne_portid': 'znePortid',
        'ane_dev_type': 'aneDevType',
        'zne_dev_type': 'zneDevType',
        'link_status': 'linkStatus',
        'aport_name': 'aportName',
        'zport_name': 'zportName'
    }

    def __init__(self, link_id=None, link_type=None, anedn=None, znedn=None, ane_portid=None, zne_portid=None, ane_dev_type=None, zne_dev_type=None, link_status=None, aport_name=None, zport_name=None):
        """
        LinkInfoBo - a model defined in Swagger
        """

        self._link_id = None
        self._link_type = None
        self._anedn = None
        self._znedn = None
        self._ane_portid = None
        self._zne_portid = None
        self._ane_dev_type = None
        self._zne_dev_type = None
        self._link_status = None
        self._aport_name = None
        self._zport_name = None

        if link_id is not None:
          self.link_id = link_id
        if link_type is not None:
          self.link_type = link_type
        if anedn is not None:
          self.anedn = anedn
        if znedn is not None:
          self.znedn = znedn
        if ane_portid is not None:
          self.ane_portid = ane_portid
        if zne_portid is not None:
          self.zne_portid = zne_portid
        if ane_dev_type is not None:
          self.ane_dev_type = ane_dev_type
        if zne_dev_type is not None:
          self.zne_dev_type = zne_dev_type
        if link_status is not None:
          self.link_status = link_status
        if aport_name is not None:
          self.aport_name = aport_name
        if zport_name is not None:
          self.zport_name = zport_name

    @property
    def link_id(self):
        """
        Gets the link_id of this LinkInfoBo.
        链路ID

        :return: The link_id of this LinkInfoBo.
        :rtype: str
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """
        Sets the link_id of this LinkInfoBo.
        链路ID

        :param link_id: The link_id of this LinkInfoBo.
        :type: str
        """

        self._link_id = link_id

    @property
    def link_type(self):
        """
        Gets the link_type of this LinkInfoBo.
        链路类型，例如： FC、ETH

        :return: The link_type of this LinkInfoBo.
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """
        Sets the link_type of this LinkInfoBo.
        链路类型，例如： FC、ETH

        :param link_type: The link_type of this LinkInfoBo.
        :type: str
        """

        self._link_type = link_type

    @property
    def anedn(self):
        """
        Gets the anedn of this LinkInfoBo.
        源网元DN

        :return: The anedn of this LinkInfoBo.
        :rtype: str
        """
        return self._anedn

    @anedn.setter
    def anedn(self, anedn):
        """
        Sets the anedn of this LinkInfoBo.
        源网元DN

        :param anedn: The anedn of this LinkInfoBo.
        :type: str
        """

        self._anedn = anedn

    @property
    def znedn(self):
        """
        Gets the znedn of this LinkInfoBo.
        目的网元DN

        :return: The znedn of this LinkInfoBo.
        :rtype: str
        """
        return self._znedn

    @znedn.setter
    def znedn(self, znedn):
        """
        Sets the znedn of this LinkInfoBo.
        目的网元DN

        :param znedn: The znedn of this LinkInfoBo.
        :type: str
        """

        self._znedn = znedn

    @property
    def ane_portid(self):
        """
        Gets the ane_portid of this LinkInfoBo.
        源网元端口

        :return: The ane_portid of this LinkInfoBo.
        :rtype: str
        """
        return self._ane_portid

    @ane_portid.setter
    def ane_portid(self, ane_portid):
        """
        Sets the ane_portid of this LinkInfoBo.
        源网元端口

        :param ane_portid: The ane_portid of this LinkInfoBo.
        :type: str
        """

        self._ane_portid = ane_portid

    @property
    def zne_portid(self):
        """
        Gets the zne_portid of this LinkInfoBo.
        目的网元端口

        :return: The zne_portid of this LinkInfoBo.
        :rtype: str
        """
        return self._zne_portid

    @zne_portid.setter
    def zne_portid(self, zne_portid):
        """
        Sets the zne_portid of this LinkInfoBo.
        目的网元端口

        :param zne_portid: The zne_portid of this LinkInfoBo.
        :type: str
        """

        self._zne_portid = zne_portid

    @property
    def ane_dev_type(self):
        """
        Gets the ane_dev_type of this LinkInfoBo.
        源网元类型

        :return: The ane_dev_type of this LinkInfoBo.
        :rtype: str
        """
        return self._ane_dev_type

    @ane_dev_type.setter
    def ane_dev_type(self, ane_dev_type):
        """
        Sets the ane_dev_type of this LinkInfoBo.
        源网元类型

        :param ane_dev_type: The ane_dev_type of this LinkInfoBo.
        :type: str
        """

        self._ane_dev_type = ane_dev_type

    @property
    def zne_dev_type(self):
        """
        Gets the zne_dev_type of this LinkInfoBo.
        目的网元类型

        :return: The zne_dev_type of this LinkInfoBo.
        :rtype: str
        """
        return self._zne_dev_type

    @zne_dev_type.setter
    def zne_dev_type(self, zne_dev_type):
        """
        Sets the zne_dev_type of this LinkInfoBo.
        目的网元类型

        :param zne_dev_type: The zne_dev_type of this LinkInfoBo.
        :type: str
        """

        self._zne_dev_type = zne_dev_type

    @property
    def link_status(self):
        """
        Gets the link_status of this LinkInfoBo.
        链路状态： 0：正常 1：未知 2：重要 3：紧急 4：离线 5：未管理 

        :return: The link_status of this LinkInfoBo.
        :rtype: int
        """
        return self._link_status

    @link_status.setter
    def link_status(self, link_status):
        """
        Sets the link_status of this LinkInfoBo.
        链路状态： 0：正常 1：未知 2：重要 3：紧急 4：离线 5：未管理 

        :param link_status: The link_status of this LinkInfoBo.
        :type: int
        """

        self._link_status = link_status

    @property
    def aport_name(self):
        """
        Gets the aport_name of this LinkInfoBo.
        源网元端口名称

        :return: The aport_name of this LinkInfoBo.
        :rtype: str
        """
        return self._aport_name

    @aport_name.setter
    def aport_name(self, aport_name):
        """
        Sets the aport_name of this LinkInfoBo.
        源网元端口名称

        :param aport_name: The aport_name of this LinkInfoBo.
        :type: str
        """

        self._aport_name = aport_name

    @property
    def zport_name(self):
        """
        Gets the zport_name of this LinkInfoBo.
        目的网元端口名称

        :return: The zport_name of this LinkInfoBo.
        :rtype: str
        """
        return self._zport_name

    @zport_name.setter
    def zport_name(self, zport_name):
        """
        Sets the zport_name of this LinkInfoBo.
        目的网元端口名称

        :param zport_name: The zport_name of this LinkInfoBo.
        :type: str
        """

        self._zport_name = zport_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LinkInfoBo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
