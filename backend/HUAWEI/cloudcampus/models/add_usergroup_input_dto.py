# coding: utf-8

"""
    用户组管理

    用户组管理开放API。 

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AddUsergroupInputDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent_id': 'str',
        'name': 'str',
        'address': 'str',
        'postal_code': 'str',
        'admin_email': 'str',
        'description': 'str'
    }

    attribute_map = {
        'parent_id': 'parentId',
        'name': 'name',
        'address': 'address',
        'postal_code': 'postalCode',
        'admin_email': 'adminEmail',
        'description': 'description'
    }

    def __init__(self, parent_id=None, name=None, address=None, postal_code=None, admin_email=None, description=None):
        """
        AddUsergroupInputDto - a model defined in Swagger
        """

        self._parent_id = None
        self._name = None
        self._address = None
        self._postal_code = None
        self._admin_email = None
        self._description = None

        if parent_id is not None:
          self.parent_id = parent_id
        if name is not None:
          self.name = name
        if address is not None:
          self.address = address
        if postal_code is not None:
          self.postal_code = postal_code
        if admin_email is not None:
          self.admin_email = admin_email
        if description is not None:
          self.description = description

    @property
    def parent_id(self):
        """
        Gets the parent_id of this AddUsergroupInputDto.
        父用户组ID，UUID格式。

        :return: The parent_id of this AddUsergroupInputDto.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this AddUsergroupInputDto.
        父用户组ID，UUID格式。

        :param parent_id: The parent_id of this AddUsergroupInputDto.
        :type: str
        """

        self._parent_id = parent_id

    @property
    def name(self):
        """
        Gets the name of this AddUsergroupInputDto.
        用户组名。

        :return: The name of this AddUsergroupInputDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AddUsergroupInputDto.
        用户组名。

        :param name: The name of this AddUsergroupInputDto.
        :type: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def address(self):
        """
        Gets the address of this AddUsergroupInputDto.
        地址。

        :return: The address of this AddUsergroupInputDto.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this AddUsergroupInputDto.
        地址。

        :param address: The address of this AddUsergroupInputDto.
        :type: str
        """
        if address is not None and len(address) > 256:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `256`")
        if address is not None and len(address) < 0:
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `0`")

        self._address = address

    @property
    def postal_code(self):
        """
        Gets the postal_code of this AddUsergroupInputDto.
        邮编。

        :return: The postal_code of this AddUsergroupInputDto.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this AddUsergroupInputDto.
        邮编。

        :param postal_code: The postal_code of this AddUsergroupInputDto.
        :type: str
        """
        if postal_code is not None and len(postal_code) > 50:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `50`")
        if postal_code is not None and len(postal_code) < 0:
            raise ValueError("Invalid value for `postal_code`, length must be greater than or equal to `0`")

        self._postal_code = postal_code

    @property
    def admin_email(self):
        """
        Gets the admin_email of this AddUsergroupInputDto.
        用户组管理员邮箱。

        :return: The admin_email of this AddUsergroupInputDto.
        :rtype: str
        """
        return self._admin_email

    @admin_email.setter
    def admin_email(self, admin_email):
        """
        Sets the admin_email of this AddUsergroupInputDto.
        用户组管理员邮箱。

        :param admin_email: The admin_email of this AddUsergroupInputDto.
        :type: str
        """
        if admin_email is not None and len(admin_email) > 100:
            raise ValueError("Invalid value for `admin_email`, length must be less than or equal to `100`")
        if admin_email is not None and len(admin_email) < 0:
            raise ValueError("Invalid value for `admin_email`, length must be greater than or equal to `0`")

        self._admin_email = admin_email

    @property
    def description(self):
        """
        Gets the description of this AddUsergroupInputDto.
        用户组描述信息。

        :return: The description of this AddUsergroupInputDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AddUsergroupInputDto.
        用户组描述信息。

        :param description: The description of this AddUsergroupInputDto.
        :type: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AddUsergroupInputDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
