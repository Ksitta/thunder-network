# coding: utf-8

"""
    AP SSID配置管理

    AP SSID第三方接口。

    OpenAPI spec version: 1.4.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RadiusContentDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'radius_tmpl_id': 'str',
        'radius_tmpl_name': 'str',
        'static_enable': 'bool'
    }

    attribute_map = {
        'radius_tmpl_id': 'radiusTmplId',
        'radius_tmpl_name': 'radiusTmplName',
        'static_enable': 'staticEnable'
    }

    def __init__(self, radius_tmpl_id=None, radius_tmpl_name=None, static_enable=None):
        """
        RadiusContentDto - a model defined in Swagger
        """

        self._radius_tmpl_id = None
        self._radius_tmpl_name = None
        self._static_enable = None

        if radius_tmpl_id is not None:
          self.radius_tmpl_id = radius_tmpl_id
        if radius_tmpl_name is not None:
          self.radius_tmpl_name = radius_tmpl_name
        if static_enable is not None:
          self.static_enable = static_enable

    @property
    def radius_tmpl_id(self):
        """
        Gets the radius_tmpl_id of this RadiusContentDto.
        RADIUS模板ID。

        :return: The radius_tmpl_id of this RadiusContentDto.
        :rtype: str
        """
        return self._radius_tmpl_id

    @radius_tmpl_id.setter
    def radius_tmpl_id(self, radius_tmpl_id):
        """
        Sets the radius_tmpl_id of this RadiusContentDto.
        RADIUS模板ID。

        :param radius_tmpl_id: The radius_tmpl_id of this RadiusContentDto.
        :type: str
        """

        self._radius_tmpl_id = radius_tmpl_id

    @property
    def radius_tmpl_name(self):
        """
        Gets the radius_tmpl_name of this RadiusContentDto.
        RADIUS模板名称。POST与PUT操作时，该字段无效。

        :return: The radius_tmpl_name of this RadiusContentDto.
        :rtype: str
        """
        return self._radius_tmpl_name

    @radius_tmpl_name.setter
    def radius_tmpl_name(self, radius_tmpl_name):
        """
        Sets the radius_tmpl_name of this RadiusContentDto.
        RADIUS模板名称。POST与PUT操作时，该字段无效。

        :param radius_tmpl_name: The radius_tmpl_name of this RadiusContentDto.
        :type: str
        """

        self._radius_tmpl_name = radius_tmpl_name

    @property
    def static_enable(self):
        """
        Gets the static_enable of this RadiusContentDto.
        用户流量统计使能开关。

        :return: The static_enable of this RadiusContentDto.
        :rtype: bool
        """
        return self._static_enable

    @static_enable.setter
    def static_enable(self, static_enable):
        """
        Sets the static_enable of this RadiusContentDto.
        用户流量统计使能开关。

        :param static_enable: The static_enable of this RadiusContentDto.
        :type: bool
        """

        self._static_enable = static_enable

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RadiusContentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
