# coding: utf-8

"""
    CIS服务接口

    CIS操作接口说明： 1、创建CIS隔离 2、创建CIS阻断 3、撤销CIS阻断/隔离 4、阻断隔离应用状态查询 5、CIS策略命中率查询 

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class QueryStatusResponseDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_id': 'str',
        'status': 'str',
        'failed_policy_ids': 'list[str]'
    }

    attribute_map = {
        'block_id': 'blockId',
        'status': 'status',
        'failed_policy_ids': 'failedPolicyIds'
    }

    def __init__(self, block_id=None, status=None, failed_policy_ids=None):
        """
        QueryStatusResponseDTO - a model defined in Swagger
        """

        self._block_id = None
        self._status = None
        self._failed_policy_ids = None

        if block_id is not None:
          self.block_id = block_id
        if status is not None:
          self.status = status
        if failed_policy_ids is not None:
          self.failed_policy_ids = failed_policy_ids

    @property
    def block_id(self):
        """
        Gets the block_id of this QueryStatusResponseDTO.
        事件ID，UUID格式。

        :return: The block_id of this QueryStatusResponseDTO.
        :rtype: str
        """
        return self._block_id

    @block_id.setter
    def block_id(self, block_id):
        """
        Sets the block_id of this QueryStatusResponseDTO.
        事件ID，UUID格式。

        :param block_id: The block_id of this QueryStatusResponseDTO.
        :type: str
        """
        if block_id is not None and len(block_id) > 36:
            raise ValueError("Invalid value for `block_id`, length must be less than or equal to `36`")
        if block_id is not None and len(block_id) < 36:
            raise ValueError("Invalid value for `block_id`, length must be greater than or equal to `36`")

        self._block_id = block_id

    @property
    def status(self):
        """
        Gets the status of this QueryStatusResponseDTO.
        查询状态。NO_DATA--查询不到数据，SUCCESS--成功，RETRY--需要重试，CE_FAILURE--失败。

        :return: The status of this QueryStatusResponseDTO.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this QueryStatusResponseDTO.
        查询状态。NO_DATA--查询不到数据，SUCCESS--成功，RETRY--需要重试，CE_FAILURE--失败。

        :param status: The status of this QueryStatusResponseDTO.
        :type: str
        """

        self._status = status

    @property
    def failed_policy_ids(self):
        """
        Gets the failed_policy_ids of this QueryStatusResponseDTO.
        失败策略列表，UUID格式。

        :return: The failed_policy_ids of this QueryStatusResponseDTO.
        :rtype: list[str]
        """
        return self._failed_policy_ids

    @failed_policy_ids.setter
    def failed_policy_ids(self, failed_policy_ids):
        """
        Sets the failed_policy_ids of this QueryStatusResponseDTO.
        失败策略列表，UUID格式。

        :param failed_policy_ids: The failed_policy_ids of this QueryStatusResponseDTO.
        :type: list[str]
        """

        self._failed_policy_ids = failed_policy_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, QueryStatusResponseDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
