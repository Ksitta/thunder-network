# coding: utf-8

"""
    配置结果查询

    查询配置结果

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FeatureItemStateDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'message_id': 'str',
        'operation': 'int',
        'state': 'int',
        'error_message': 'str',
        'update_time': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'message_id': 'messageId',
        'operation': 'operation',
        'state': 'state',
        'error_message': 'errorMessage',
        'update_time': 'updateTime'
    }

    def __init__(self, id=None, name=None, message_id=None, operation=None, state=None, error_message=None, update_time=None):
        """
        FeatureItemStateDto - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._message_id = None
        self._operation = None
        self._state = None
        self._error_message = None
        self._update_time = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if message_id is not None:
          self.message_id = message_id
        if operation is not None:
          self.operation = operation
        if state is not None:
          self.state = state
        if error_message is not None:
          self.error_message = error_message
        if update_time is not None:
          self.update_time = update_time

    @property
    def id(self):
        """
        Gets the id of this FeatureItemStateDto.
        单个特性ID。

        :return: The id of this FeatureItemStateDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FeatureItemStateDto.
        单个特性ID。

        :param id: The id of this FeatureItemStateDto.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this FeatureItemStateDto.
        单个特性名称。

        :return: The name of this FeatureItemStateDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FeatureItemStateDto.
        单个特性名称。

        :param name: The name of this FeatureItemStateDto.
        :type: str
        """

        self._name = name

    @property
    def message_id(self):
        """
        Gets the message_id of this FeatureItemStateDto.
        下发单个特性的报文ID。

        :return: The message_id of this FeatureItemStateDto.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """
        Sets the message_id of this FeatureItemStateDto.
        下发单个特性的报文ID。

        :param message_id: The message_id of this FeatureItemStateDto.
        :type: str
        """

        self._message_id = message_id

    @property
    def operation(self):
        """
        Gets the operation of this FeatureItemStateDto.
        单个特性对应的操作类型，取值范围：0---新增(Add)；1---删除(Delete)；2---修改(Update)。

        :return: The operation of this FeatureItemStateDto.
        :rtype: int
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """
        Sets the operation of this FeatureItemStateDto.
        单个特性对应的操作类型，取值范围：0---新增(Add)；1---删除(Delete)；2---修改(Update)。

        :param operation: The operation of this FeatureItemStateDto.
        :type: int
        """

        self._operation = operation

    @property
    def state(self):
        """
        Gets the state of this FeatureItemStateDto.
        单个特性的配置下发状态，取值范围：0---成功；1---告警；2---预配置；3---失败；4---正在下发。

        :return: The state of this FeatureItemStateDto.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this FeatureItemStateDto.
        单个特性的配置下发状态，取值范围：0---成功；1---告警；2---预配置；3---失败；4---正在下发。

        :param state: The state of this FeatureItemStateDto.
        :type: int
        """

        self._state = state

    @property
    def error_message(self):
        """
        Gets the error_message of this FeatureItemStateDto.
        错误信息。

        :return: The error_message of this FeatureItemStateDto.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this FeatureItemStateDto.
        错误信息。

        :param error_message: The error_message of this FeatureItemStateDto.
        :type: str
        """

        self._error_message = error_message

    @property
    def update_time(self):
        """
        Gets the update_time of this FeatureItemStateDto.
        更新时间。

        :return: The update_time of this FeatureItemStateDto.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """
        Sets the update_time of this FeatureItemStateDto.
        更新时间。

        :param update_time: The update_time of this FeatureItemStateDto.
        :type: str
        """

        self._update_time = update_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FeatureItemStateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
